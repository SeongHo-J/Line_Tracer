
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000063a  000006ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000063a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800120  00800120  000006ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000432  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c5  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032d  00000000  00000000  00000d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000240  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000045f  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000184f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 35       	cpi	r26, 0x50	; 80
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	15 d1       	rcall	.+554    	; 0x2ee <main>
  c4:	b8 c2       	rjmp	.+1392   	; 0x636 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_MCU>:
		MOTER_MOVE(ADC_TO_MOTER(NORM_DATA));
	}
}
void init_MCU()
{
	DDRA = 0xff;  //신호
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xff;  //발광부
  cc:	81 bb       	out	0x11, r24	; 17
	DDRE = 0b11101111;//스위치
  ce:	8f ee       	ldi	r24, 0xEF	; 239
  d0:	82 b9       	out	0x02, r24	; 2
	DDRF = 0x00;  //수신부
  d2:	10 92 61 00 	sts	0x0061, r1
	PORTA = 0x08; //0b00001000
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	8b bb       	out	0x1b, r24	; 27
	ADMUX = 0x00;
  da:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87;
  dc:	87 e8       	ldi	r24, 0x87	; 135
  de:	86 b9       	out	0x06, r24	; 6
  e0:	08 95       	ret

000000e2 <init_PWM>:
	
}
void init_PWM(void)
{
	DDRB = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	87 bb       	out	0x17, r24	; 23
	TCCR0 = 0x6F;
  e6:	9f e6       	ldi	r25, 0x6F	; 111
  e8:	93 bf       	out	0x33, r25	; 51
	TCCR2 = 0x6D;
  ea:	9d e6       	ldi	r25, 0x6D	; 109
  ec:	95 bd       	out	0x25, r25	; 37
	TCNT0 = 0xff;
  ee:	82 bf       	out	0x32, r24	; 50
	TCNT2 = 0xff;
  f0:	84 bd       	out	0x24, r24	; 36
	OCR0 = SPEED;
  f2:	8c e3       	ldi	r24, 0x3C	; 60
  f4:	81 bf       	out	0x31, r24	; 49
	OCR2 = SPEED;
  f6:	83 bd       	out	0x23, r24	; 35
  f8:	08 95       	ret

000000fa <ADC_GET>:
}
void ADC_GET(int *ADC_DATA)
{
  fa:	fc 01       	movw	r30, r24
	for(int i=0; i<8; i++){
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
		PORTD = 0x01 << i;
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	ca 01       	movw	r24, r20
 106:	02 2e       	mov	r0, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <ADC_GET+0x14>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <ADC_GET+0x10>
 112:	82 bb       	out	0x12, r24	; 18
		_delay_us(DELAY);
		ADCSRA |= 0xC0; // ADEN = 1, ADSC = 1
 114:	86 b1       	in	r24, 0x06	; 6
 116:	80 6c       	ori	r24, 0xC0	; 192
 118:	86 b9       	out	0x06, r24	; 6
		while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 11a:	34 9b       	sbis	0x06, 4	; 6
 11c:	fe cf       	rjmp	.-4      	; 0x11a <ADC_GET+0x20>
		ADC_DATA[i] = ADC;
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	95 b1       	in	r25, 0x05	; 5
 122:	81 93       	st	Z+, r24
 124:	91 93       	st	Z+, r25
		PORTD = 0x00;
 126:	12 ba       	out	0x12, r1	; 18
		if(i==7){
 128:	27 30       	cpi	r18, 0x07	; 7
 12a:	31 05       	cpc	r19, r1
 12c:	19 f4       	brne	.+6      	; 0x134 <ADC_GET+0x3a>
			ADMUX = 0xC0; // prepare for ADC_i
 12e:	80 ec       	ldi	r24, 0xC0	; 192
 130:	87 b9       	out	0x07, r24	; 7
 132:	08 95       	ret
 134:	81 ec       	ldi	r24, 0xC1	; 193
 136:	82 0f       	add	r24, r18
			}else {
			ADMUX = 0xC1+i; // prepare for ADC_i
 138:	87 b9       	out	0x07, r24	; 7
	OCR0 = SPEED;
	OCR2 = SPEED;
}
void ADC_GET(int *ADC_DATA)
{
	for(int i=0; i<8; i++){
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	28 30       	cpi	r18, 0x08	; 8
 140:	31 05       	cpc	r19, r1
 142:	01 f7       	brne	.-64     	; 0x104 <ADC_GET+0xa>
 144:	08 95       	ret

00000146 <ADC_MAX_MIN>:
			ADMUX = 0xC1+i; // prepare for ADC_i
		}
	}
}
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA)
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
 150:	06 2f       	mov	r16, r22
 152:	17 2f       	mov	r17, r23
 154:	e4 2f       	mov	r30, r20
 156:	f5 2f       	mov	r31, r21
	for(int i=0 ; i<8 ; i++) {
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	af 01       	movw	r20, r30
		if( ADC_MAX[i] < ADC_DATA[i] ) // ADC_MAX
 15e:	20 81       	ld	r18, Z
 160:	31 81       	ldd	r19, Z+1	; 0x01
 162:	68 81       	ld	r22, Y
 164:	79 81       	ldd	r23, Y+1	; 0x01
 166:	62 17       	cp	r22, r18
 168:	73 07       	cpc	r23, r19
 16a:	14 f4       	brge	.+4      	; 0x170 <ADC_MAX_MIN+0x2a>
		ADC_MAX[i] = ADC_DATA[i];
 16c:	39 83       	std	Y+1, r19	; 0x01
 16e:	28 83       	st	Y, r18
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
 170:	da 01       	movw	r26, r20
 172:	2d 91       	ld	r18, X+
 174:	3c 91       	ld	r19, X
 176:	32 96       	adiw	r30, 0x02	; 2
 178:	d8 01       	movw	r26, r16
 17a:	4d 91       	ld	r20, X+
 17c:	5c 91       	ld	r21, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	24 17       	cp	r18, r20
 182:	35 07       	cpc	r19, r21
 184:	14 f4       	brge	.+4      	; 0x18a <ADC_MAX_MIN+0x44>
		ADC_MIN[i] = ADC_DATA[i];
 186:	2d 93       	st	X+, r18
 188:	3c 93       	st	X, r19
		}
	}
}
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA)
{
	for(int i=0 ; i<8 ; i++) {
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	22 96       	adiw	r28, 0x02	; 2
 18e:	0e 5f       	subi	r16, 0xFE	; 254
 190:	1f 4f       	sbci	r17, 0xFF	; 255
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	91 05       	cpc	r25, r1
 196:	11 f7       	brne	.-60     	; 0x15c <ADC_MAX_MIN+0x16>
		if( ADC_MAX[i] < ADC_DATA[i] ) // ADC_MAX
		ADC_MAX[i] = ADC_DATA[i];
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
		ADC_MIN[i] = ADC_DATA[i];
	}
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	08 95       	ret

000001a2 <ADC_NORMALIZE>:
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN)
{
 1a2:	2f 92       	push	r2
 1a4:	3f 92       	push	r3
 1a6:	4f 92       	push	r4
 1a8:	5f 92       	push	r5
 1aa:	6f 92       	push	r6
 1ac:	7f 92       	push	r7
 1ae:	8f 92       	push	r8
 1b0:	9f 92       	push	r9
 1b2:	af 92       	push	r10
 1b4:	bf 92       	push	r11
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	a4 2e       	mov	r10, r20
 1c8:	b5 2e       	mov	r11, r21
 1ca:	c6 2e       	mov	r12, r22
 1cc:	d7 2e       	mov	r13, r23
 1ce:	e2 2e       	mov	r14, r18
 1d0:	f3 2e       	mov	r15, r19
 1d2:	4c 01       	movw	r8, r24
	double temp_1=0, temp_2=0;
	for(int i=0 ; i<8 ; i++) {
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
		temp_1 = ADC_MAX[i] - ADC_DATA[i];
 1d8:	f5 01       	movw	r30, r10
 1da:	01 91       	ld	r16, Z+
 1dc:	11 91       	ld	r17, Z+
 1de:	5f 01       	movw	r10, r30
 1e0:	f6 01       	movw	r30, r12
 1e2:	81 91       	ld	r24, Z+
 1e4:	91 91       	ld	r25, Z+
 1e6:	6f 01       	movw	r12, r30
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
 1e8:	f7 01       	movw	r30, r14
 1ea:	21 90       	ld	r2, Z+
 1ec:	31 90       	ld	r3, Z+
 1ee:	7f 01       	movw	r14, r30
}
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN)
{
	double temp_1=0, temp_2=0;
	for(int i=0 ; i<8 ; i++) {
		temp_1 = ADC_MAX[i] - ADC_DATA[i];
 1f0:	b8 01       	movw	r22, r16
 1f2:	68 1b       	sub	r22, r24
 1f4:	79 0b       	sbc	r23, r25
 1f6:	88 27       	eor	r24, r24
 1f8:	77 fd       	sbrc	r23, 7
 1fa:	80 95       	com	r24
 1fc:	98 2f       	mov	r25, r24
 1fe:	2c d1       	rcall	.+600    	; 0x458 <__floatsisf>
 200:	2b 01       	movw	r4, r22
 202:	3c 01       	movw	r6, r24
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
 204:	b8 01       	movw	r22, r16
 206:	62 19       	sub	r22, r2
 208:	73 09       	sbc	r23, r3
 20a:	88 27       	eor	r24, r24
 20c:	77 fd       	sbrc	r23, 7
 20e:	80 95       	com	r24
 210:	98 2f       	mov	r25, r24
 212:	22 d1       	rcall	.+580    	; 0x458 <__floatsisf>
 214:	9b 01       	movw	r18, r22
 216:	ac 01       	movw	r20, r24
		NORM_DATA[i] = (int)(temp_1/temp_2*100);
 218:	c3 01       	movw	r24, r6
 21a:	b2 01       	movw	r22, r4
 21c:	82 d0       	rcall	.+260    	; 0x322 <__divsf3>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	48 ec       	ldi	r20, 0xC8	; 200
 224:	52 e4       	ldi	r21, 0x42	; 66
 226:	a4 d1       	rcall	.+840    	; 0x570 <__mulsf3>
 228:	e4 d0       	rcall	.+456    	; 0x3f2 <__fixsfsi>
 22a:	f4 01       	movw	r30, r8
 22c:	61 93       	st	Z+, r22
 22e:	71 93       	st	Z+, r23
 230:	4f 01       	movw	r8, r30
	}
}
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN)
{
	double temp_1=0, temp_2=0;
	for(int i=0 ; i<8 ; i++) {
 232:	21 96       	adiw	r28, 0x01	; 1
 234:	c8 30       	cpi	r28, 0x08	; 8
 236:	d1 05       	cpc	r29, r1
 238:	79 f6       	brne	.-98     	; 0x1d8 <ADC_NORMALIZE+0x36>
		temp_1 = ADC_MAX[i] - ADC_DATA[i];
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
		NORM_DATA[i] = (int)(temp_1/temp_2*100);
	}
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	bf 90       	pop	r11
 24c:	af 90       	pop	r10
 24e:	9f 90       	pop	r9
 250:	8f 90       	pop	r8
 252:	7f 90       	pop	r7
 254:	6f 90       	pop	r6
 256:	5f 90       	pop	r5
 258:	4f 90       	pop	r4
 25a:	3f 90       	pop	r3
 25c:	2f 90       	pop	r2
 25e:	08 95       	ret

00000260 <ADC_TO_MOTER>:
int ADC_TO_MOTER(int *NORM_DATA)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	60 97       	sbiw	r28, 0x10	; 16
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
	int temp_01 = 0;
	int weight[8] = {-55 , -50 , -10 , 0 , 0 , 10 , 50 , 55};
 274:	20 e1       	ldi	r18, 0x10	; 16
 276:	e0 e1       	ldi	r30, 0x10	; 16
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	de 01       	movw	r26, r28
 27c:	11 96       	adiw	r26, 0x01	; 1
 27e:	01 90       	ld	r0, Z+
 280:	0d 92       	st	X+, r0
 282:	2a 95       	dec	r18
 284:	e1 f7       	brne	.-8      	; 0x27e <ADC_TO_MOTER+0x1e>
 286:	dc 01       	movw	r26, r24
 288:	fe 01       	movw	r30, r28
 28a:	31 96       	adiw	r30, 0x01	; 1
 28c:	ae 01       	movw	r20, r28
 28e:	4f 5e       	subi	r20, 0xEF	; 239
 290:	5f 4f       	sbci	r21, 0xFF	; 255
		NORM_DATA[i] = (int)(temp_1/temp_2*100);
	}
}
int ADC_TO_MOTER(int *NORM_DATA)
{
	int temp_01 = 0;
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
	int weight[8] = {-55 , -50 , -10 , 0 , 0 , 10 , 50 , 55};
	for(int i=0; i<8; i++){
		if(NORM_DATA[i]>=60){    //검정색
 296:	2d 91       	ld	r18, X+
 298:	3d 91       	ld	r19, X+
 29a:	2c 33       	cpi	r18, 0x3C	; 60
 29c:	31 05       	cpc	r19, r1
 29e:	24 f0       	brlt	.+8      	; 0x2a8 <ADC_TO_MOTER+0x48>
			temp_01 += weight[i];
 2a0:	20 81       	ld	r18, Z
 2a2:	31 81       	ldd	r19, Z+1	; 0x01
 2a4:	82 0f       	add	r24, r18
 2a6:	93 1f       	adc	r25, r19
 2a8:	32 96       	adiw	r30, 0x02	; 2
}
int ADC_TO_MOTER(int *NORM_DATA)
{
	int temp_01 = 0;
	int weight[8] = {-55 , -50 , -10 , 0 , 0 , 10 , 50 , 55};
	for(int i=0; i<8; i++){
 2aa:	e4 17       	cp	r30, r20
 2ac:	f5 07       	cpc	r31, r21
 2ae:	99 f7       	brne	.-26     	; 0x296 <ADC_TO_MOTER+0x36>
		if(NORM_DATA[i]>=60){    //검정색
			temp_01 += weight[i];
		}
	}
	return temp_01;
}
 2b0:	60 96       	adiw	r28, 0x10	; 16
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <MOTER_MOVE>:

void MOTER_MOVE(int MOTER_WIGHT){

	switch(MOTER_WIGHT){
 2c2:	89 3c       	cpi	r24, 0xC9	; 201
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	92 07       	cpc	r25, r18
 2c8:	21 f0       	breq	.+8      	; 0x2d2 <MOTER_MOVE+0x10>
 2ca:	87 33       	cpi	r24, 0x37	; 55
 2cc:	91 05       	cpc	r25, r1
 2ce:	21 f0       	breq	.+8      	; 0x2d8 <MOTER_MOVE+0x16>
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <MOTER_MOVE+0x1c>
		case -55 :
		PORTA = 0b00011000;
 2d2:	88 e1       	ldi	r24, 0x18	; 24
 2d4:	8b bb       	out	0x1b, r24	; 27
		break;
 2d6:	08 95       	ret
		case 55 :
		PORTA = 0b00101000;
 2d8:	88 e2       	ldi	r24, 0x28	; 40
 2da:	8b bb       	out	0x1b, r24	; 27
		break;
 2dc:	08 95       	ret
		default :
		PORTA = 0b00001000;
 2de:	98 e0       	ldi	r25, 0x08	; 8
 2e0:	9b bb       	out	0x1b, r25	; 27
		OCR2 = SPEED - MOTER_WIGHT;
 2e2:	9c e3       	ldi	r25, 0x3C	; 60
 2e4:	98 1b       	sub	r25, r24
 2e6:	93 bd       	out	0x23, r25	; 35
		OCR0 = SPEED + MOTER_WIGHT;
 2e8:	84 5c       	subi	r24, 0xC4	; 196
 2ea:	81 bf       	out	0x31, r24	; 49
 2ec:	08 95       	ret

000002ee <main>:


int main(void)
{
	int temp=0;
	init_PWM();
 2ee:	f9 de       	rcall	.-526    	; 0xe2 <init_PWM>
	init_MCU();
 2f0:	eb de       	rcall	.-554    	; 0xc8 <init_MCU>
	while(1)
	{
		ADC_GET(ADC_DATA);
 2f2:	80 e4       	ldi	r24, 0x40	; 64
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	01 df       	rcall	.-510    	; 0xfa <ADC_GET>
		ADC_MAX_MIN(ADC_MAX,ADC_MIN,ADC_DATA);
 2f8:	40 e4       	ldi	r20, 0x40	; 64
 2fa:	51 e0       	ldi	r21, 0x01	; 1
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	71 e0       	ldi	r23, 0x01	; 1
 300:	80 e3       	ldi	r24, 0x30	; 48
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	20 df       	rcall	.-448    	; 0x146 <ADC_MAX_MIN>
		ADC_NORMALIZE(NORM_DATA,ADC_DATA,ADC_MAX,ADC_MIN);
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	31 e0       	ldi	r19, 0x01	; 1
 30a:	40 e3       	ldi	r20, 0x30	; 48
 30c:	51 e0       	ldi	r21, 0x01	; 1
 30e:	60 e4       	ldi	r22, 0x40	; 64
 310:	71 e0       	ldi	r23, 0x01	; 1
 312:	80 e2       	ldi	r24, 0x20	; 32
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	45 df       	rcall	.-374    	; 0x1a2 <ADC_NORMALIZE>
		MOTER_MOVE(ADC_TO_MOTER(NORM_DATA));
 318:	80 e2       	ldi	r24, 0x20	; 32
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	a1 df       	rcall	.-190    	; 0x260 <ADC_TO_MOTER>
 31e:	d1 df       	rcall	.-94     	; 0x2c2 <MOTER_MOVE>
 320:	e8 cf       	rjmp	.-48     	; 0x2f2 <main+0x4>

00000322 <__divsf3>:
 322:	0c d0       	rcall	.+24     	; 0x33c <__divsf3x>
 324:	eb c0       	rjmp	.+470    	; 0x4fc <__fp_round>
 326:	e3 d0       	rcall	.+454    	; 0x4ee <__fp_pscB>
 328:	40 f0       	brcs	.+16     	; 0x33a <__divsf3+0x18>
 32a:	da d0       	rcall	.+436    	; 0x4e0 <__fp_pscA>
 32c:	30 f0       	brcs	.+12     	; 0x33a <__divsf3+0x18>
 32e:	21 f4       	brne	.+8      	; 0x338 <__divsf3+0x16>
 330:	5f 3f       	cpi	r21, 0xFF	; 255
 332:	19 f0       	breq	.+6      	; 0x33a <__divsf3+0x18>
 334:	cc c0       	rjmp	.+408    	; 0x4ce <__fp_inf>
 336:	51 11       	cpse	r21, r1
 338:	15 c1       	rjmp	.+554    	; 0x564 <__fp_szero>
 33a:	cf c0       	rjmp	.+414    	; 0x4da <__fp_nan>

0000033c <__divsf3x>:
 33c:	f0 d0       	rcall	.+480    	; 0x51e <__fp_split3>
 33e:	98 f3       	brcs	.-26     	; 0x326 <__divsf3+0x4>

00000340 <__divsf3_pse>:
 340:	99 23       	and	r25, r25
 342:	c9 f3       	breq	.-14     	; 0x336 <__divsf3+0x14>
 344:	55 23       	and	r21, r21
 346:	b1 f3       	breq	.-20     	; 0x334 <__divsf3+0x12>
 348:	95 1b       	sub	r25, r21
 34a:	55 0b       	sbc	r21, r21
 34c:	bb 27       	eor	r27, r27
 34e:	aa 27       	eor	r26, r26
 350:	62 17       	cp	r22, r18
 352:	73 07       	cpc	r23, r19
 354:	84 07       	cpc	r24, r20
 356:	38 f0       	brcs	.+14     	; 0x366 <__divsf3_pse+0x26>
 358:	9f 5f       	subi	r25, 0xFF	; 255
 35a:	5f 4f       	sbci	r21, 0xFF	; 255
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	44 1f       	adc	r20, r20
 362:	aa 1f       	adc	r26, r26
 364:	a9 f3       	breq	.-22     	; 0x350 <__divsf3_pse+0x10>
 366:	33 d0       	rcall	.+102    	; 0x3ce <__divsf3_pse+0x8e>
 368:	0e 2e       	mov	r0, r30
 36a:	3a f0       	brmi	.+14     	; 0x37a <__divsf3_pse+0x3a>
 36c:	e0 e8       	ldi	r30, 0x80	; 128
 36e:	30 d0       	rcall	.+96     	; 0x3d0 <__divsf3_pse+0x90>
 370:	91 50       	subi	r25, 0x01	; 1
 372:	50 40       	sbci	r21, 0x00	; 0
 374:	e6 95       	lsr	r30
 376:	00 1c       	adc	r0, r0
 378:	ca f7       	brpl	.-14     	; 0x36c <__divsf3_pse+0x2c>
 37a:	29 d0       	rcall	.+82     	; 0x3ce <__divsf3_pse+0x8e>
 37c:	fe 2f       	mov	r31, r30
 37e:	27 d0       	rcall	.+78     	; 0x3ce <__divsf3_pse+0x8e>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	bb 1f       	adc	r27, r27
 388:	26 17       	cp	r18, r22
 38a:	37 07       	cpc	r19, r23
 38c:	48 07       	cpc	r20, r24
 38e:	ab 07       	cpc	r26, r27
 390:	b0 e8       	ldi	r27, 0x80	; 128
 392:	09 f0       	breq	.+2      	; 0x396 <__divsf3_pse+0x56>
 394:	bb 0b       	sbc	r27, r27
 396:	80 2d       	mov	r24, r0
 398:	bf 01       	movw	r22, r30
 39a:	ff 27       	eor	r31, r31
 39c:	93 58       	subi	r25, 0x83	; 131
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
 3a0:	2a f0       	brmi	.+10     	; 0x3ac <__divsf3_pse+0x6c>
 3a2:	9e 3f       	cpi	r25, 0xFE	; 254
 3a4:	51 05       	cpc	r21, r1
 3a6:	68 f0       	brcs	.+26     	; 0x3c2 <__divsf3_pse+0x82>
 3a8:	92 c0       	rjmp	.+292    	; 0x4ce <__fp_inf>
 3aa:	dc c0       	rjmp	.+440    	; 0x564 <__fp_szero>
 3ac:	5f 3f       	cpi	r21, 0xFF	; 255
 3ae:	ec f3       	brlt	.-6      	; 0x3aa <__divsf3_pse+0x6a>
 3b0:	98 3e       	cpi	r25, 0xE8	; 232
 3b2:	dc f3       	brlt	.-10     	; 0x3aa <__divsf3_pse+0x6a>
 3b4:	86 95       	lsr	r24
 3b6:	77 95       	ror	r23
 3b8:	67 95       	ror	r22
 3ba:	b7 95       	ror	r27
 3bc:	f7 95       	ror	r31
 3be:	9f 5f       	subi	r25, 0xFF	; 255
 3c0:	c9 f7       	brne	.-14     	; 0x3b4 <__divsf3_pse+0x74>
 3c2:	88 0f       	add	r24, r24
 3c4:	91 1d       	adc	r25, r1
 3c6:	96 95       	lsr	r25
 3c8:	87 95       	ror	r24
 3ca:	97 f9       	bld	r25, 7
 3cc:	08 95       	ret
 3ce:	e1 e0       	ldi	r30, 0x01	; 1
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	88 1f       	adc	r24, r24
 3d6:	bb 1f       	adc	r27, r27
 3d8:	62 17       	cp	r22, r18
 3da:	73 07       	cpc	r23, r19
 3dc:	84 07       	cpc	r24, r20
 3de:	ba 07       	cpc	r27, r26
 3e0:	20 f0       	brcs	.+8      	; 0x3ea <__divsf3_pse+0xaa>
 3e2:	62 1b       	sub	r22, r18
 3e4:	73 0b       	sbc	r23, r19
 3e6:	84 0b       	sbc	r24, r20
 3e8:	ba 0b       	sbc	r27, r26
 3ea:	ee 1f       	adc	r30, r30
 3ec:	88 f7       	brcc	.-30     	; 0x3d0 <__divsf3_pse+0x90>
 3ee:	e0 95       	com	r30
 3f0:	08 95       	ret

000003f2 <__fixsfsi>:
 3f2:	04 d0       	rcall	.+8      	; 0x3fc <__fixunssfsi>
 3f4:	68 94       	set
 3f6:	b1 11       	cpse	r27, r1
 3f8:	b5 c0       	rjmp	.+362    	; 0x564 <__fp_szero>
 3fa:	08 95       	ret

000003fc <__fixunssfsi>:
 3fc:	98 d0       	rcall	.+304    	; 0x52e <__fp_splitA>
 3fe:	88 f0       	brcs	.+34     	; 0x422 <__fixunssfsi+0x26>
 400:	9f 57       	subi	r25, 0x7F	; 127
 402:	90 f0       	brcs	.+36     	; 0x428 <__fixunssfsi+0x2c>
 404:	b9 2f       	mov	r27, r25
 406:	99 27       	eor	r25, r25
 408:	b7 51       	subi	r27, 0x17	; 23
 40a:	a0 f0       	brcs	.+40     	; 0x434 <__fixunssfsi+0x38>
 40c:	d1 f0       	breq	.+52     	; 0x442 <__fixunssfsi+0x46>
 40e:	66 0f       	add	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	88 1f       	adc	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	1a f0       	brmi	.+6      	; 0x41e <__fixunssfsi+0x22>
 418:	ba 95       	dec	r27
 41a:	c9 f7       	brne	.-14     	; 0x40e <__fixunssfsi+0x12>
 41c:	12 c0       	rjmp	.+36     	; 0x442 <__fixunssfsi+0x46>
 41e:	b1 30       	cpi	r27, 0x01	; 1
 420:	81 f0       	breq	.+32     	; 0x442 <__fixunssfsi+0x46>
 422:	9f d0       	rcall	.+318    	; 0x562 <__fp_zero>
 424:	b1 e0       	ldi	r27, 0x01	; 1
 426:	08 95       	ret
 428:	9c c0       	rjmp	.+312    	; 0x562 <__fp_zero>
 42a:	67 2f       	mov	r22, r23
 42c:	78 2f       	mov	r23, r24
 42e:	88 27       	eor	r24, r24
 430:	b8 5f       	subi	r27, 0xF8	; 248
 432:	39 f0       	breq	.+14     	; 0x442 <__fixunssfsi+0x46>
 434:	b9 3f       	cpi	r27, 0xF9	; 249
 436:	cc f3       	brlt	.-14     	; 0x42a <__fixunssfsi+0x2e>
 438:	86 95       	lsr	r24
 43a:	77 95       	ror	r23
 43c:	67 95       	ror	r22
 43e:	b3 95       	inc	r27
 440:	d9 f7       	brne	.-10     	; 0x438 <__fixunssfsi+0x3c>
 442:	3e f4       	brtc	.+14     	; 0x452 <__fixunssfsi+0x56>
 444:	90 95       	com	r25
 446:	80 95       	com	r24
 448:	70 95       	com	r23
 44a:	61 95       	neg	r22
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	8f 4f       	sbci	r24, 0xFF	; 255
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	08 95       	ret

00000454 <__floatunsisf>:
 454:	e8 94       	clt
 456:	09 c0       	rjmp	.+18     	; 0x46a <__floatsisf+0x12>

00000458 <__floatsisf>:
 458:	97 fb       	bst	r25, 7
 45a:	3e f4       	brtc	.+14     	; 0x46a <__floatsisf+0x12>
 45c:	90 95       	com	r25
 45e:	80 95       	com	r24
 460:	70 95       	com	r23
 462:	61 95       	neg	r22
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	8f 4f       	sbci	r24, 0xFF	; 255
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	99 23       	and	r25, r25
 46c:	a9 f0       	breq	.+42     	; 0x498 <__floatsisf+0x40>
 46e:	f9 2f       	mov	r31, r25
 470:	96 e9       	ldi	r25, 0x96	; 150
 472:	bb 27       	eor	r27, r27
 474:	93 95       	inc	r25
 476:	f6 95       	lsr	r31
 478:	87 95       	ror	r24
 47a:	77 95       	ror	r23
 47c:	67 95       	ror	r22
 47e:	b7 95       	ror	r27
 480:	f1 11       	cpse	r31, r1
 482:	f8 cf       	rjmp	.-16     	; 0x474 <__floatsisf+0x1c>
 484:	fa f4       	brpl	.+62     	; 0x4c4 <__floatsisf+0x6c>
 486:	bb 0f       	add	r27, r27
 488:	11 f4       	brne	.+4      	; 0x48e <__floatsisf+0x36>
 48a:	60 ff       	sbrs	r22, 0
 48c:	1b c0       	rjmp	.+54     	; 0x4c4 <__floatsisf+0x6c>
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	8f 4f       	sbci	r24, 0xFF	; 255
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	16 c0       	rjmp	.+44     	; 0x4c4 <__floatsisf+0x6c>
 498:	88 23       	and	r24, r24
 49a:	11 f0       	breq	.+4      	; 0x4a0 <__floatsisf+0x48>
 49c:	96 e9       	ldi	r25, 0x96	; 150
 49e:	11 c0       	rjmp	.+34     	; 0x4c2 <__floatsisf+0x6a>
 4a0:	77 23       	and	r23, r23
 4a2:	21 f0       	breq	.+8      	; 0x4ac <__floatsisf+0x54>
 4a4:	9e e8       	ldi	r25, 0x8E	; 142
 4a6:	87 2f       	mov	r24, r23
 4a8:	76 2f       	mov	r23, r22
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__floatsisf+0x5e>
 4ac:	66 23       	and	r22, r22
 4ae:	71 f0       	breq	.+28     	; 0x4cc <__floatsisf+0x74>
 4b0:	96 e8       	ldi	r25, 0x86	; 134
 4b2:	86 2f       	mov	r24, r22
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	2a f0       	brmi	.+10     	; 0x4c4 <__floatsisf+0x6c>
 4ba:	9a 95       	dec	r25
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	88 1f       	adc	r24, r24
 4c2:	da f7       	brpl	.-10     	; 0x4ba <__floatsisf+0x62>
 4c4:	88 0f       	add	r24, r24
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	97 f9       	bld	r25, 7
 4cc:	08 95       	ret

000004ce <__fp_inf>:
 4ce:	97 f9       	bld	r25, 7
 4d0:	9f 67       	ori	r25, 0x7F	; 127
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	08 95       	ret

000004da <__fp_nan>:
 4da:	9f ef       	ldi	r25, 0xFF	; 255
 4dc:	80 ec       	ldi	r24, 0xC0	; 192
 4de:	08 95       	ret

000004e0 <__fp_pscA>:
 4e0:	00 24       	eor	r0, r0
 4e2:	0a 94       	dec	r0
 4e4:	16 16       	cp	r1, r22
 4e6:	17 06       	cpc	r1, r23
 4e8:	18 06       	cpc	r1, r24
 4ea:	09 06       	cpc	r0, r25
 4ec:	08 95       	ret

000004ee <__fp_pscB>:
 4ee:	00 24       	eor	r0, r0
 4f0:	0a 94       	dec	r0
 4f2:	12 16       	cp	r1, r18
 4f4:	13 06       	cpc	r1, r19
 4f6:	14 06       	cpc	r1, r20
 4f8:	05 06       	cpc	r0, r21
 4fa:	08 95       	ret

000004fc <__fp_round>:
 4fc:	09 2e       	mov	r0, r25
 4fe:	03 94       	inc	r0
 500:	00 0c       	add	r0, r0
 502:	11 f4       	brne	.+4      	; 0x508 <__fp_round+0xc>
 504:	88 23       	and	r24, r24
 506:	52 f0       	brmi	.+20     	; 0x51c <__fp_round+0x20>
 508:	bb 0f       	add	r27, r27
 50a:	40 f4       	brcc	.+16     	; 0x51c <__fp_round+0x20>
 50c:	bf 2b       	or	r27, r31
 50e:	11 f4       	brne	.+4      	; 0x514 <__fp_round+0x18>
 510:	60 ff       	sbrs	r22, 0
 512:	04 c0       	rjmp	.+8      	; 0x51c <__fp_round+0x20>
 514:	6f 5f       	subi	r22, 0xFF	; 255
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	8f 4f       	sbci	r24, 0xFF	; 255
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <__fp_split3>:
 51e:	57 fd       	sbrc	r21, 7
 520:	90 58       	subi	r25, 0x80	; 128
 522:	44 0f       	add	r20, r20
 524:	55 1f       	adc	r21, r21
 526:	59 f0       	breq	.+22     	; 0x53e <__fp_splitA+0x10>
 528:	5f 3f       	cpi	r21, 0xFF	; 255
 52a:	71 f0       	breq	.+28     	; 0x548 <__fp_splitA+0x1a>
 52c:	47 95       	ror	r20

0000052e <__fp_splitA>:
 52e:	88 0f       	add	r24, r24
 530:	97 fb       	bst	r25, 7
 532:	99 1f       	adc	r25, r25
 534:	61 f0       	breq	.+24     	; 0x54e <__fp_splitA+0x20>
 536:	9f 3f       	cpi	r25, 0xFF	; 255
 538:	79 f0       	breq	.+30     	; 0x558 <__fp_splitA+0x2a>
 53a:	87 95       	ror	r24
 53c:	08 95       	ret
 53e:	12 16       	cp	r1, r18
 540:	13 06       	cpc	r1, r19
 542:	14 06       	cpc	r1, r20
 544:	55 1f       	adc	r21, r21
 546:	f2 cf       	rjmp	.-28     	; 0x52c <__fp_split3+0xe>
 548:	46 95       	lsr	r20
 54a:	f1 df       	rcall	.-30     	; 0x52e <__fp_splitA>
 54c:	08 c0       	rjmp	.+16     	; 0x55e <__fp_splitA+0x30>
 54e:	16 16       	cp	r1, r22
 550:	17 06       	cpc	r1, r23
 552:	18 06       	cpc	r1, r24
 554:	99 1f       	adc	r25, r25
 556:	f1 cf       	rjmp	.-30     	; 0x53a <__fp_splitA+0xc>
 558:	86 95       	lsr	r24
 55a:	71 05       	cpc	r23, r1
 55c:	61 05       	cpc	r22, r1
 55e:	08 94       	sec
 560:	08 95       	ret

00000562 <__fp_zero>:
 562:	e8 94       	clt

00000564 <__fp_szero>:
 564:	bb 27       	eor	r27, r27
 566:	66 27       	eor	r22, r22
 568:	77 27       	eor	r23, r23
 56a:	cb 01       	movw	r24, r22
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__mulsf3>:
 570:	0b d0       	rcall	.+22     	; 0x588 <__mulsf3x>
 572:	c4 cf       	rjmp	.-120    	; 0x4fc <__fp_round>
 574:	b5 df       	rcall	.-150    	; 0x4e0 <__fp_pscA>
 576:	28 f0       	brcs	.+10     	; 0x582 <__mulsf3+0x12>
 578:	ba df       	rcall	.-140    	; 0x4ee <__fp_pscB>
 57a:	18 f0       	brcs	.+6      	; 0x582 <__mulsf3+0x12>
 57c:	95 23       	and	r25, r21
 57e:	09 f0       	breq	.+2      	; 0x582 <__mulsf3+0x12>
 580:	a6 cf       	rjmp	.-180    	; 0x4ce <__fp_inf>
 582:	ab cf       	rjmp	.-170    	; 0x4da <__fp_nan>
 584:	11 24       	eor	r1, r1
 586:	ee cf       	rjmp	.-36     	; 0x564 <__fp_szero>

00000588 <__mulsf3x>:
 588:	ca df       	rcall	.-108    	; 0x51e <__fp_split3>
 58a:	a0 f3       	brcs	.-24     	; 0x574 <__mulsf3+0x4>

0000058c <__mulsf3_pse>:
 58c:	95 9f       	mul	r25, r21
 58e:	d1 f3       	breq	.-12     	; 0x584 <__mulsf3+0x14>
 590:	95 0f       	add	r25, r21
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	55 1f       	adc	r21, r21
 596:	62 9f       	mul	r22, r18
 598:	f0 01       	movw	r30, r0
 59a:	72 9f       	mul	r23, r18
 59c:	bb 27       	eor	r27, r27
 59e:	f0 0d       	add	r31, r0
 5a0:	b1 1d       	adc	r27, r1
 5a2:	63 9f       	mul	r22, r19
 5a4:	aa 27       	eor	r26, r26
 5a6:	f0 0d       	add	r31, r0
 5a8:	b1 1d       	adc	r27, r1
 5aa:	aa 1f       	adc	r26, r26
 5ac:	64 9f       	mul	r22, r20
 5ae:	66 27       	eor	r22, r22
 5b0:	b0 0d       	add	r27, r0
 5b2:	a1 1d       	adc	r26, r1
 5b4:	66 1f       	adc	r22, r22
 5b6:	82 9f       	mul	r24, r18
 5b8:	22 27       	eor	r18, r18
 5ba:	b0 0d       	add	r27, r0
 5bc:	a1 1d       	adc	r26, r1
 5be:	62 1f       	adc	r22, r18
 5c0:	73 9f       	mul	r23, r19
 5c2:	b0 0d       	add	r27, r0
 5c4:	a1 1d       	adc	r26, r1
 5c6:	62 1f       	adc	r22, r18
 5c8:	83 9f       	mul	r24, r19
 5ca:	a0 0d       	add	r26, r0
 5cc:	61 1d       	adc	r22, r1
 5ce:	22 1f       	adc	r18, r18
 5d0:	74 9f       	mul	r23, r20
 5d2:	33 27       	eor	r19, r19
 5d4:	a0 0d       	add	r26, r0
 5d6:	61 1d       	adc	r22, r1
 5d8:	23 1f       	adc	r18, r19
 5da:	84 9f       	mul	r24, r20
 5dc:	60 0d       	add	r22, r0
 5de:	21 1d       	adc	r18, r1
 5e0:	82 2f       	mov	r24, r18
 5e2:	76 2f       	mov	r23, r22
 5e4:	6a 2f       	mov	r22, r26
 5e6:	11 24       	eor	r1, r1
 5e8:	9f 57       	subi	r25, 0x7F	; 127
 5ea:	50 40       	sbci	r21, 0x00	; 0
 5ec:	8a f0       	brmi	.+34     	; 0x610 <__mulsf3_pse+0x84>
 5ee:	e1 f0       	breq	.+56     	; 0x628 <__mulsf3_pse+0x9c>
 5f0:	88 23       	and	r24, r24
 5f2:	4a f0       	brmi	.+18     	; 0x606 <__mulsf3_pse+0x7a>
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31
 5f8:	bb 1f       	adc	r27, r27
 5fa:	66 1f       	adc	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	88 1f       	adc	r24, r24
 600:	91 50       	subi	r25, 0x01	; 1
 602:	50 40       	sbci	r21, 0x00	; 0
 604:	a9 f7       	brne	.-22     	; 0x5f0 <__mulsf3_pse+0x64>
 606:	9e 3f       	cpi	r25, 0xFE	; 254
 608:	51 05       	cpc	r21, r1
 60a:	70 f0       	brcs	.+28     	; 0x628 <__mulsf3_pse+0x9c>
 60c:	60 cf       	rjmp	.-320    	; 0x4ce <__fp_inf>
 60e:	aa cf       	rjmp	.-172    	; 0x564 <__fp_szero>
 610:	5f 3f       	cpi	r21, 0xFF	; 255
 612:	ec f3       	brlt	.-6      	; 0x60e <__mulsf3_pse+0x82>
 614:	98 3e       	cpi	r25, 0xE8	; 232
 616:	dc f3       	brlt	.-10     	; 0x60e <__mulsf3_pse+0x82>
 618:	86 95       	lsr	r24
 61a:	77 95       	ror	r23
 61c:	67 95       	ror	r22
 61e:	b7 95       	ror	r27
 620:	f7 95       	ror	r31
 622:	e7 95       	ror	r30
 624:	9f 5f       	subi	r25, 0xFF	; 255
 626:	c1 f7       	brne	.-16     	; 0x618 <__mulsf3_pse+0x8c>
 628:	fe 2b       	or	r31, r30
 62a:	88 0f       	add	r24, r24
 62c:	91 1d       	adc	r25, r1
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	97 f9       	bld	r25, 7
 634:	08 95       	ret

00000636 <_exit>:
 636:	f8 94       	cli

00000638 <__stop_program>:
 638:	ff cf       	rjmp	.-2      	; 0x638 <__stop_program>
