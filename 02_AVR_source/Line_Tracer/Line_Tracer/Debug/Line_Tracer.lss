
Line_Tracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000740  000007d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000740  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800110  00800110  000007e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000514  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000259  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059f  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000212  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ad  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	50 c0       	rjmp	.+160    	; 0xd6 <__bad_interrupt>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	af 00       	.word	0x00af	; ????
  8e:	bd 00       	.word	0x00bd	; ????
  90:	cb 00       	.word	0x00cb	; ????
  92:	d9 00       	.word	0x00d9	; ????
  94:	e7 00       	.word	0x00e7	; ????
  96:	f5 00       	.word	0x00f5	; ????
  98:	03 01       	movw	r0, r6
  9a:	11 01       	movw	r2, r2

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e1       	ldi	r29, 0x10	; 16
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e0 e4       	ldi	r30, 0x40	; 64
  b0:	f7 e0       	ldi	r31, 0x07	; 7
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a0 e1       	ldi	r26, 0x10	; 16
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a0 34       	cpi	r26, 0x40	; 64
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	8a d1       	rcall	.+788    	; 0x3e8 <main>
  d4:	33 c3       	rjmp	.+1638   	; 0x73c <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <init_ADC>:

	return 0;
}
*/
void init_ADC(void){
	DDRA = 0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0xFF;
  dc:	82 b9       	out	0x02, r24	; 2
	DDRF = 0x00;
  de:	10 92 61 00 	sts	0x0061, r1
	
	ADMUX = 0xC0;
  e2:	80 ec       	ldi	r24, 0xC0	; 192
  e4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87;
  e6:	87 e8       	ldi	r24, 0x87	; 135
  e8:	86 b9       	out	0x06, r24	; 6
  ea:	08 95       	ret

000000ec <ADC_GET>:
}

void ADC_GET(int *ADC_DATA) {
  ec:	8f 92       	push	r8
  ee:	9f 92       	push	r9
  f0:	af 92       	push	r10
  f2:	bf 92       	push	r11
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	4c 01       	movw	r8, r24
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_6---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 6 :
			PORTA = 0x40;
 10a:	68 94       	set
 10c:	dd 24       	eor	r13, r13
 10e:	d6 f8       	bld	r13, 6

			ADC_DATA[6] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC7; // prepare for ADC_7
 110:	0f 2e       	mov	r0, r31
 112:	f7 ec       	ldi	r31, 0xC7	; 199
 114:	ef 2e       	mov	r14, r31
 116:	f0 2d       	mov	r31, r0

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_5---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 5 :
			PORTA = 0x20;
 118:	68 94       	set
 11a:	ff 24       	eor	r15, r15
 11c:	f5 f8       	bld	r15, 5

			ADC_DATA[5] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC6; // prepare for ADC_6
 11e:	06 ec       	ldi	r16, 0xC6	; 198
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_4---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 4 :

			PORTA = 0x10;
 120:	10 e1       	ldi	r17, 0x10	; 16

			ADC_DATA[4] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC5; // prepare for ADC_5
 122:	d5 ec       	ldi	r29, 0xC5	; 197

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_3---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 3 :
			PORTA = 0x08;
 124:	c8 e0       	ldi	r28, 0x08	; 8

			ADC_DATA[3] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC4; // prepare for ADC_4
 126:	b4 ec       	ldi	r27, 0xC4	; 196

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_2---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 2 :
			PORTA = 0x04;
 128:	a4 e0       	ldi	r26, 0x04	; 4

			ADC_DATA[2] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC3; // prepare for ADC_3
 12a:	73 ec       	ldi	r23, 0xC3	; 195

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_1---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :
			PORTA = 0x02;
 12c:	62 e0       	ldi	r22, 0x02	; 2

			ADC_DATA[1] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC2; // prepare for ADC_2
 12e:	0f 2e       	mov	r0, r31
 130:	f2 ec       	ldi	r31, 0xC2	; 194
 132:	cf 2e       	mov	r12, r31
 134:	f0 2d       	mov	r31, r0
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_0---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 0 :		
			
			PORTA = 0x01;
 136:	bb 24       	eor	r11, r11
 138:	b3 94       	inc	r11

			ADC_DATA[0] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC1; // prepare for ADC_1
 13a:	0f 2e       	mov	r0, r31
 13c:	f1 ec       	ldi	r31, 0xC1	; 193
 13e:	af 2e       	mov	r10, r31
 140:	f0 2d       	mov	r31, r0
 142:	02 c0       	rjmp	.+4      	; 0x148 <ADC_GET+0x5c>
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	a9 01       	movw	r20, r18
 14a:	41 50       	subi	r20, 0x01	; 1
 14c:	51 09       	sbc	r21, r1
	
	int i=0;
		
	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		switch(i) {
 14e:	48 30       	cpi	r20, 0x08	; 8
 150:	51 05       	cpc	r21, r1
 152:	08 f0       	brcs	.+2      	; 0x156 <ADC_GET+0x6a>
 154:	76 c0       	rjmp	.+236    	; 0x242 <ADC_GET+0x156>
 156:	4a 5b       	subi	r20, 0xBA	; 186
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	fa 01       	movw	r30, r20
 15c:	e9 c2       	rjmp	.+1490   	; 0x730 <__tablejump2__>
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_0---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 0 :		
			
			PORTA = 0x01;
 15e:	bb ba       	out	0x1b, r11	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 160:	86 b1       	in	r24, 0x06	; 6
 162:	80 6c       	ori	r24, 0xC0	; 192
 164:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 166:	34 9b       	sbis	0x06, 4	; 6
 168:	fe cf       	rjmp	.-4      	; 0x166 <ADC_GET+0x7a>

			ADC_DATA[0] = ADC;
 16a:	84 b1       	in	r24, 0x04	; 4
 16c:	95 b1       	in	r25, 0x05	; 5
 16e:	f4 01       	movw	r30, r8
 170:	91 83       	std	Z+1, r25	; 0x01
 172:	80 83       	st	Z, r24
			
			PORTA = 0x00;
 174:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC1; // prepare for ADC_1
 176:	a7 b8       	out	0x07, r10	; 7

			break;
 178:	e5 cf       	rjmp	.-54     	; 0x144 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_1---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :
			PORTA = 0x02;
 17a:	6b bb       	out	0x1b, r22	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 17c:	86 b1       	in	r24, 0x06	; 6
 17e:	80 6c       	ori	r24, 0xC0	; 192
 180:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 182:	34 9b       	sbis	0x06, 4	; 6
 184:	fe cf       	rjmp	.-4      	; 0x182 <ADC_GET+0x96>

			ADC_DATA[1] = ADC;
 186:	84 b1       	in	r24, 0x04	; 4
 188:	95 b1       	in	r25, 0x05	; 5
 18a:	f4 01       	movw	r30, r8
 18c:	93 83       	std	Z+3, r25	; 0x03
 18e:	82 83       	std	Z+2, r24	; 0x02
			
			PORTA = 0x00;
 190:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC2; // prepare for ADC_2
 192:	c7 b8       	out	0x07, r12	; 7

			break;
 194:	d7 cf       	rjmp	.-82     	; 0x144 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_2---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 2 :
			PORTA = 0x04;
 196:	ab bb       	out	0x1b, r26	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 198:	86 b1       	in	r24, 0x06	; 6
 19a:	80 6c       	ori	r24, 0xC0	; 192
 19c:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 19e:	34 9b       	sbis	0x06, 4	; 6
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <ADC_GET+0xb2>

			ADC_DATA[2] = ADC;
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	95 b1       	in	r25, 0x05	; 5
 1a6:	f4 01       	movw	r30, r8
 1a8:	95 83       	std	Z+5, r25	; 0x05
 1aa:	84 83       	std	Z+4, r24	; 0x04
			
			PORTA = 0x00;
 1ac:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC3; // prepare for ADC_3
 1ae:	77 b9       	out	0x07, r23	; 7

			break;
 1b0:	c9 cf       	rjmp	.-110    	; 0x144 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_3---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 3 :
			PORTA = 0x08;
 1b2:	cb bb       	out	0x1b, r28	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1b4:	86 b1       	in	r24, 0x06	; 6
 1b6:	80 6c       	ori	r24, 0xC0	; 192
 1b8:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1ba:	34 9b       	sbis	0x06, 4	; 6
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <ADC_GET+0xce>

			ADC_DATA[3] = ADC;
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	95 b1       	in	r25, 0x05	; 5
 1c2:	f4 01       	movw	r30, r8
 1c4:	97 83       	std	Z+7, r25	; 0x07
 1c6:	86 83       	std	Z+6, r24	; 0x06
			
			PORTA = 0x00;
 1c8:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC4; // prepare for ADC_4
 1ca:	b7 b9       	out	0x07, r27	; 7

			break;
 1cc:	bb cf       	rjmp	.-138    	; 0x144 <ADC_GET+0x58>
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_4---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 4 :

			PORTA = 0x10;
 1ce:	1b bb       	out	0x1b, r17	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1d0:	86 b1       	in	r24, 0x06	; 6
 1d2:	80 6c       	ori	r24, 0xC0	; 192
 1d4:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1d6:	34 9b       	sbis	0x06, 4	; 6
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <ADC_GET+0xea>

			ADC_DATA[4] = ADC;
 1da:	84 b1       	in	r24, 0x04	; 4
 1dc:	95 b1       	in	r25, 0x05	; 5
 1de:	f4 01       	movw	r30, r8
 1e0:	91 87       	std	Z+9, r25	; 0x09
 1e2:	80 87       	std	Z+8, r24	; 0x08
			
			PORTA = 0x00;
 1e4:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC5; // prepare for ADC_5
 1e6:	d7 b9       	out	0x07, r29	; 7

			break;
 1e8:	ad cf       	rjmp	.-166    	; 0x144 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_5---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 5 :
			PORTA = 0x20;
 1ea:	fb ba       	out	0x1b, r15	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1ec:	86 b1       	in	r24, 0x06	; 6
 1ee:	80 6c       	ori	r24, 0xC0	; 192
 1f0:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1f2:	34 9b       	sbis	0x06, 4	; 6
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <ADC_GET+0x106>

			ADC_DATA[5] = ADC;
 1f6:	84 b1       	in	r24, 0x04	; 4
 1f8:	95 b1       	in	r25, 0x05	; 5
 1fa:	f4 01       	movw	r30, r8
 1fc:	93 87       	std	Z+11, r25	; 0x0b
 1fe:	82 87       	std	Z+10, r24	; 0x0a
			
			PORTA = 0x00;
 200:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC6; // prepare for ADC_6
 202:	07 b9       	out	0x07, r16	; 7

			break;
 204:	9f cf       	rjmp	.-194    	; 0x144 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_6---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 6 :
			PORTA = 0x40;
 206:	db ba       	out	0x1b, r13	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 208:	86 b1       	in	r24, 0x06	; 6
 20a:	80 6c       	ori	r24, 0xC0	; 192
 20c:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 20e:	34 9b       	sbis	0x06, 4	; 6
 210:	fe cf       	rjmp	.-4      	; 0x20e <ADC_GET+0x122>

			ADC_DATA[6] = ADC;
 212:	84 b1       	in	r24, 0x04	; 4
 214:	95 b1       	in	r25, 0x05	; 5
 216:	f4 01       	movw	r30, r8
 218:	95 87       	std	Z+13, r25	; 0x0d
 21a:	84 87       	std	Z+12, r24	; 0x0c
			
			PORTA = 0x00;
 21c:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC7; // prepare for ADC_7
 21e:	e7 b8       	out	0x07, r14	; 7

			break;
 220:	91 cf       	rjmp	.-222    	; 0x144 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_7---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 7 :
			PORTA = 0x80;
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	8b bb       	out	0x1b, r24	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 226:	86 b1       	in	r24, 0x06	; 6
 228:	80 6c       	ori	r24, 0xC0	; 192
 22a:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 22c:	34 9b       	sbis	0x06, 4	; 6
 22e:	fe cf       	rjmp	.-4      	; 0x22c <ADC_GET+0x140>

			ADC_DATA[7] = ADC;
 230:	84 b1       	in	r24, 0x04	; 4
 232:	95 b1       	in	r25, 0x05	; 5
 234:	f4 01       	movw	r30, r8
 236:	97 87       	std	Z+15, r25	; 0x0f
 238:	86 87       	std	Z+14, r24	; 0x0e
			
			PORTA = 0x00;
 23a:	1b ba       	out	0x1b, r1	; 27
			
			ADMUX = 0xC0; // prepare for ADC_0
 23c:	80 ec       	ldi	r24, 0xC0	; 192
 23e:	87 b9       	out	0x07, r24	; 7
 240:	04 c0       	rjmp	.+8      	; 0x24a <ADC_GET+0x15e>
	//------------IR order-----------//
	// 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 //
	
	int i=0;
		
	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 242:	28 30       	cpi	r18, 0x08	; 8
 244:	31 05       	cpc	r19, r1
 246:	0c f4       	brge	.+2      	; 0x24a <ADC_GET+0x15e>
 248:	7d cf       	rjmp	.-262    	; 0x144 <ADC_GET+0x58>

		}

	}

}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	df 90       	pop	r13
 258:	cf 90       	pop	r12
 25a:	bf 90       	pop	r11
 25c:	af 90       	pop	r10
 25e:	9f 90       	pop	r9
 260:	8f 90       	pop	r8
 262:	08 95       	ret

00000264 <ADC_MAX_MIN>:

// Get ADC max and min value from ADC_DATA[i]
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA) {
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
 26e:	06 2f       	mov	r16, r22
 270:	17 2f       	mov	r17, r23
 272:	e4 2f       	mov	r30, r20
 274:	f5 2f       	mov	r31, r21

	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	af 01       	movw	r20, r30
		
		if( ADC_MAX[i] < ADC_DATA[i] ) // ADC_MAX
 27c:	20 81       	ld	r18, Z
 27e:	31 81       	ldd	r19, Z+1	; 0x01
 280:	68 81       	ld	r22, Y
 282:	79 81       	ldd	r23, Y+1	; 0x01
 284:	62 17       	cp	r22, r18
 286:	73 07       	cpc	r23, r19
 288:	14 f4       	brge	.+4      	; 0x28e <ADC_MAX_MIN+0x2a>
		ADC_MAX[i] = ADC_DATA[i];
 28a:	39 83       	std	Y+1, r19	; 0x01
 28c:	28 83       	st	Y, r18
		
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
 28e:	da 01       	movw	r26, r20
 290:	2d 91       	ld	r18, X+
 292:	3c 91       	ld	r19, X
 294:	32 96       	adiw	r30, 0x02	; 2
 296:	d8 01       	movw	r26, r16
 298:	4d 91       	ld	r20, X+
 29a:	5c 91       	ld	r21, X
 29c:	11 97       	sbiw	r26, 0x01	; 1
 29e:	24 17       	cp	r18, r20
 2a0:	35 07       	cpc	r19, r21
 2a2:	14 f4       	brge	.+4      	; 0x2a8 <ADC_MAX_MIN+0x44>
		ADC_MIN[i] = ADC_DATA[i];
 2a4:	2d 93       	st	X+, r18
 2a6:	3c 93       	st	X, r19
// Get ADC max and min value from ADC_DATA[i]
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA) {

	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	22 96       	adiw	r28, 0x02	; 2
 2ac:	0e 5f       	subi	r16, 0xFE	; 254
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	88 30       	cpi	r24, 0x08	; 8
 2b2:	91 05       	cpc	r25, r1
 2b4:	11 f7       	brne	.-60     	; 0x27a <ADC_MAX_MIN+0x16>
		
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
		ADC_MIN[i] = ADC_DATA[i];
		
	}
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <ADC_NORMALIZE>:


// Get normalized ADC value (white base / black line / resolution=100)
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN) {
 2c0:	2f 92       	push	r2
 2c2:	3f 92       	push	r3
 2c4:	4f 92       	push	r4
 2c6:	5f 92       	push	r5
 2c8:	6f 92       	push	r6
 2ca:	7f 92       	push	r7
 2cc:	8f 92       	push	r8
 2ce:	9f 92       	push	r9
 2d0:	af 92       	push	r10
 2d2:	bf 92       	push	r11
 2d4:	cf 92       	push	r12
 2d6:	df 92       	push	r13
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	a4 2e       	mov	r10, r20
 2e6:	b5 2e       	mov	r11, r21
 2e8:	c6 2e       	mov	r12, r22
 2ea:	d7 2e       	mov	r13, r23
 2ec:	e2 2e       	mov	r14, r18
 2ee:	f3 2e       	mov	r15, r19
 2f0:	4c 01       	movw	r8, r24
	
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
 2f4:	d0 e0       	ldi	r29, 0x00	; 0

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
 2f6:	f5 01       	movw	r30, r10
 2f8:	01 91       	ld	r16, Z+
 2fa:	11 91       	ld	r17, Z+
 2fc:	5f 01       	movw	r10, r30
 2fe:	f6 01       	movw	r30, r12
 300:	81 91       	ld	r24, Z+
 302:	91 91       	ld	r25, Z+
 304:	6f 01       	movw	r12, r30
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
 306:	f7 01       	movw	r30, r14
 308:	21 90       	ld	r2, Z+
 30a:	31 90       	ld	r3, Z+
 30c:	7f 01       	movw	r14, r30
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
 30e:	b8 01       	movw	r22, r16
 310:	68 1b       	sub	r22, r24
 312:	79 0b       	sbc	r23, r25
 314:	88 27       	eor	r24, r24
 316:	77 fd       	sbrc	r23, 7
 318:	80 95       	com	r24
 31a:	98 2f       	mov	r25, r24
 31c:	1a d1       	rcall	.+564    	; 0x552 <__floatsisf>
		temp_2 = ADC_MAX[i] - ADC_MIN[i];

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	48 ec       	ldi	r20, 0xC8	; 200
 324:	52 e4       	ldi	r21, 0x42	; 66
 326:	a1 d1       	rcall	.+834    	; 0x66a <__mulsf3>
 328:	2b 01       	movw	r4, r22
 32a:	3c 01       	movw	r6, r24
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
 32c:	b8 01       	movw	r22, r16
 32e:	62 19       	sub	r22, r2
 330:	73 09       	sbc	r23, r3
 332:	88 27       	eor	r24, r24
 334:	77 fd       	sbrc	r23, 7
 336:	80 95       	com	r24
 338:	98 2f       	mov	r25, r24
 33a:	0b d1       	rcall	.+534    	; 0x552 <__floatsisf>
 33c:	9b 01       	movw	r18, r22
 33e:	ac 01       	movw	r20, r24

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
 340:	c3 01       	movw	r24, r6
 342:	b2 01       	movw	r22, r4
 344:	6b d0       	rcall	.+214    	; 0x41c <__divsf3>
 346:	d2 d0       	rcall	.+420    	; 0x4ec <__fixsfsi>
 348:	f4 01       	movw	r30, r8
 34a:	61 93       	st	Z+, r22
 34c:	71 93       	st	Z+, r23
 34e:	4f 01       	movw	r8, r30
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN) {
	
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 350:	21 96       	adiw	r28, 0x01	; 1
 352:	c8 30       	cpi	r28, 0x08	; 8
 354:	d1 05       	cpc	r29, r1
 356:	79 f6       	brne	.-98     	; 0x2f6 <ADC_NORMALIZE+0x36>

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);

	}

}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	df 90       	pop	r13
 366:	cf 90       	pop	r12
 368:	bf 90       	pop	r11
 36a:	af 90       	pop	r10
 36c:	9f 90       	pop	r9
 36e:	8f 90       	pop	r8
 370:	7f 90       	pop	r7
 372:	6f 90       	pop	r6
 374:	5f 90       	pop	r5
 376:	4f 90       	pop	r4
 378:	3f 90       	pop	r3
 37a:	2f 90       	pop	r2
 37c:	08 95       	ret

0000037e <init_MCU>:
#include "LineTracer_MOTER.h"
#include "linetracer_ADC.h"

void init_MCU(void)
{
	DDRC = 0xff;
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 382:	15 ba       	out	0x15, r1	; 21
	DDRD = 0xff;
 384:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x30;
 386:	80 e3       	ldi	r24, 0x30	; 48
 388:	82 bb       	out	0x12, r24	; 18
 38a:	08 95       	ret

0000038c <init_PWM>:
	
}

void init_PWM(void)
{
	DDRB = 0xFF;
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	87 bb       	out	0x17, r24	; 23
	TCCR0 = 0x6F;
 390:	9f e6       	ldi	r25, 0x6F	; 111
 392:	93 bf       	out	0x33, r25	; 51
	TCCR2 = 0x6D;
 394:	9d e6       	ldi	r25, 0x6D	; 109
 396:	95 bd       	out	0x25, r25	; 37
	TCNT0 = 0xff;
 398:	82 bf       	out	0x32, r24	; 50
	TCNT2 = 0xff;
 39a:	84 bd       	out	0x24, r24	; 36
	OCR0 = 0xff;
 39c:	81 bf       	out	0x31, r24	; 49
	OCR2 = 0xff;
 39e:	83 bd       	out	0x23, r24	; 35
 3a0:	08 95       	ret

000003a2 <MOTER_test>:
	
}

void MOTER_test(const int *NORM_DATA){
 3a2:	fc 01       	movw	r30, r24
		
	if(NORM_DATA[0]>=(int)(RESOLUTION*0.5)&&NORM_DATA[7]<=(int)(RESOLUTION*0.5)){
 3a4:	20 81       	ld	r18, Z
 3a6:	31 81       	ldd	r19, Z+1	; 0x01
 3a8:	22 33       	cpi	r18, 0x32	; 50
 3aa:	31 05       	cpc	r19, r1
 3ac:	3c f0       	brlt	.+14     	; 0x3bc <MOTER_test+0x1a>
 3ae:	86 85       	ldd	r24, Z+14	; 0x0e
 3b0:	97 85       	ldd	r25, Z+15	; 0x0f
 3b2:	c3 97       	sbiw	r24, 0x33	; 51
 3b4:	1c f4       	brge	.+6      	; 0x3bc <MOTER_test+0x1a>
		PORTC = 0x04;		
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	85 bb       	out	0x15, r24	; 21
 3ba:	08 95       	ret
	}
	else if(NORM_DATA[0]<=(int)(RESOLUTION*0.5)&&NORM_DATA[7]>=(int)(RESOLUTION*0.5)){
 3bc:	23 33       	cpi	r18, 0x33	; 51
 3be:	31 05       	cpc	r19, r1
 3c0:	3c f4       	brge	.+14     	; 0x3d0 <MOTER_test+0x2e>
 3c2:	86 85       	ldd	r24, Z+14	; 0x0e
 3c4:	97 85       	ldd	r25, Z+15	; 0x0f
 3c6:	c2 97       	sbiw	r24, 0x32	; 50
 3c8:	1c f0       	brlt	.+6      	; 0x3d0 <MOTER_test+0x2e>
		PORTC = 0x40;		
 3ca:	80 e4       	ldi	r24, 0x40	; 64
 3cc:	85 bb       	out	0x15, r24	; 21
 3ce:	08 95       	ret
	}
	else if(NORM_DATA[0]>=(int)(RESOLUTION*0.5)&&NORM_DATA[7]>=(int)(RESOLUTION*0.5)){
 3d0:	22 33       	cpi	r18, 0x32	; 50
 3d2:	31 05       	cpc	r19, r1
 3d4:	3c f0       	brlt	.+14     	; 0x3e4 <MOTER_test+0x42>
 3d6:	86 85       	ldd	r24, Z+14	; 0x0e
 3d8:	97 85       	ldd	r25, Z+15	; 0x0f
 3da:	c2 97       	sbiw	r24, 0x32	; 50
 3dc:	1c f0       	brlt	.+6      	; 0x3e4 <MOTER_test+0x42>
		PORTC = 0x44;		
 3de:	84 e4       	ldi	r24, 0x44	; 68
 3e0:	85 bb       	out	0x15, r24	; 21
 3e2:	08 95       	ret
	}
	else{
		PORTC = 0x00;	
 3e4:	15 ba       	out	0x15, r1	; 21
 3e6:	08 95       	ret

000003e8 <main>:
int ADC_MIN[8] = {1023,1023,1023,1023,1023,1023,1023,1023};
int NORM_DATA[8] = {0,};

int main(void)
{
	init_PWM();
 3e8:	d1 df       	rcall	.-94     	; 0x38c <init_PWM>
	init_MCU();
 3ea:	c9 df       	rcall	.-110    	; 0x37e <init_MCU>
	init_ADC();
 3ec:	75 de       	rcall	.-790    	; 0xd8 <init_ADC>
	
	while(1)
	{
		ADC_GET(ADC_DATA);
 3ee:	80 e3       	ldi	r24, 0x30	; 48
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	7c de       	rcall	.-776    	; 0xec <ADC_GET>
		ADC_MAX_MIN(ADC_MAX, ADC_MIN, ADC_DATA);
 3f4:	40 e3       	ldi	r20, 0x30	; 48
 3f6:	51 e0       	ldi	r21, 0x01	; 1
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	71 e0       	ldi	r23, 0x01	; 1
 3fc:	80 e2       	ldi	r24, 0x20	; 32
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	31 df       	rcall	.-414    	; 0x264 <ADC_MAX_MIN>
		ADC_NORMALIZE(NORM_DATA, ADC_DATA, ADC_MAX, ADC_MIN);
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	31 e0       	ldi	r19, 0x01	; 1
 406:	40 e2       	ldi	r20, 0x20	; 32
 408:	51 e0       	ldi	r21, 0x01	; 1
 40a:	60 e3       	ldi	r22, 0x30	; 48
 40c:	71 e0       	ldi	r23, 0x01	; 1
 40e:	80 e1       	ldi	r24, 0x10	; 16
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	56 df       	rcall	.-340    	; 0x2c0 <ADC_NORMALIZE>
		MOTER_test(NORM_DATA);			
 414:	80 e1       	ldi	r24, 0x10	; 16
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	c4 df       	rcall	.-120    	; 0x3a2 <MOTER_test>
 41a:	e9 cf       	rjmp	.-46     	; 0x3ee <main+0x6>

0000041c <__divsf3>:
 41c:	0c d0       	rcall	.+24     	; 0x436 <__divsf3x>
 41e:	eb c0       	rjmp	.+470    	; 0x5f6 <__fp_round>
 420:	e3 d0       	rcall	.+454    	; 0x5e8 <__fp_pscB>
 422:	40 f0       	brcs	.+16     	; 0x434 <__divsf3+0x18>
 424:	da d0       	rcall	.+436    	; 0x5da <__fp_pscA>
 426:	30 f0       	brcs	.+12     	; 0x434 <__divsf3+0x18>
 428:	21 f4       	brne	.+8      	; 0x432 <__divsf3+0x16>
 42a:	5f 3f       	cpi	r21, 0xFF	; 255
 42c:	19 f0       	breq	.+6      	; 0x434 <__divsf3+0x18>
 42e:	cc c0       	rjmp	.+408    	; 0x5c8 <__fp_inf>
 430:	51 11       	cpse	r21, r1
 432:	15 c1       	rjmp	.+554    	; 0x65e <__fp_szero>
 434:	cf c0       	rjmp	.+414    	; 0x5d4 <__fp_nan>

00000436 <__divsf3x>:
 436:	f0 d0       	rcall	.+480    	; 0x618 <__fp_split3>
 438:	98 f3       	brcs	.-26     	; 0x420 <__divsf3+0x4>

0000043a <__divsf3_pse>:
 43a:	99 23       	and	r25, r25
 43c:	c9 f3       	breq	.-14     	; 0x430 <__divsf3+0x14>
 43e:	55 23       	and	r21, r21
 440:	b1 f3       	breq	.-20     	; 0x42e <__divsf3+0x12>
 442:	95 1b       	sub	r25, r21
 444:	55 0b       	sbc	r21, r21
 446:	bb 27       	eor	r27, r27
 448:	aa 27       	eor	r26, r26
 44a:	62 17       	cp	r22, r18
 44c:	73 07       	cpc	r23, r19
 44e:	84 07       	cpc	r24, r20
 450:	38 f0       	brcs	.+14     	; 0x460 <__divsf3_pse+0x26>
 452:	9f 5f       	subi	r25, 0xFF	; 255
 454:	5f 4f       	sbci	r21, 0xFF	; 255
 456:	22 0f       	add	r18, r18
 458:	33 1f       	adc	r19, r19
 45a:	44 1f       	adc	r20, r20
 45c:	aa 1f       	adc	r26, r26
 45e:	a9 f3       	breq	.-22     	; 0x44a <__divsf3_pse+0x10>
 460:	33 d0       	rcall	.+102    	; 0x4c8 <__divsf3_pse+0x8e>
 462:	0e 2e       	mov	r0, r30
 464:	3a f0       	brmi	.+14     	; 0x474 <__divsf3_pse+0x3a>
 466:	e0 e8       	ldi	r30, 0x80	; 128
 468:	30 d0       	rcall	.+96     	; 0x4ca <__divsf3_pse+0x90>
 46a:	91 50       	subi	r25, 0x01	; 1
 46c:	50 40       	sbci	r21, 0x00	; 0
 46e:	e6 95       	lsr	r30
 470:	00 1c       	adc	r0, r0
 472:	ca f7       	brpl	.-14     	; 0x466 <__divsf3_pse+0x2c>
 474:	29 d0       	rcall	.+82     	; 0x4c8 <__divsf3_pse+0x8e>
 476:	fe 2f       	mov	r31, r30
 478:	27 d0       	rcall	.+78     	; 0x4c8 <__divsf3_pse+0x8e>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	88 1f       	adc	r24, r24
 480:	bb 1f       	adc	r27, r27
 482:	26 17       	cp	r18, r22
 484:	37 07       	cpc	r19, r23
 486:	48 07       	cpc	r20, r24
 488:	ab 07       	cpc	r26, r27
 48a:	b0 e8       	ldi	r27, 0x80	; 128
 48c:	09 f0       	breq	.+2      	; 0x490 <__divsf3_pse+0x56>
 48e:	bb 0b       	sbc	r27, r27
 490:	80 2d       	mov	r24, r0
 492:	bf 01       	movw	r22, r30
 494:	ff 27       	eor	r31, r31
 496:	93 58       	subi	r25, 0x83	; 131
 498:	5f 4f       	sbci	r21, 0xFF	; 255
 49a:	2a f0       	brmi	.+10     	; 0x4a6 <__divsf3_pse+0x6c>
 49c:	9e 3f       	cpi	r25, 0xFE	; 254
 49e:	51 05       	cpc	r21, r1
 4a0:	68 f0       	brcs	.+26     	; 0x4bc <__divsf3_pse+0x82>
 4a2:	92 c0       	rjmp	.+292    	; 0x5c8 <__fp_inf>
 4a4:	dc c0       	rjmp	.+440    	; 0x65e <__fp_szero>
 4a6:	5f 3f       	cpi	r21, 0xFF	; 255
 4a8:	ec f3       	brlt	.-6      	; 0x4a4 <__divsf3_pse+0x6a>
 4aa:	98 3e       	cpi	r25, 0xE8	; 232
 4ac:	dc f3       	brlt	.-10     	; 0x4a4 <__divsf3_pse+0x6a>
 4ae:	86 95       	lsr	r24
 4b0:	77 95       	ror	r23
 4b2:	67 95       	ror	r22
 4b4:	b7 95       	ror	r27
 4b6:	f7 95       	ror	r31
 4b8:	9f 5f       	subi	r25, 0xFF	; 255
 4ba:	c9 f7       	brne	.-14     	; 0x4ae <__divsf3_pse+0x74>
 4bc:	88 0f       	add	r24, r24
 4be:	91 1d       	adc	r25, r1
 4c0:	96 95       	lsr	r25
 4c2:	87 95       	ror	r24
 4c4:	97 f9       	bld	r25, 7
 4c6:	08 95       	ret
 4c8:	e1 e0       	ldi	r30, 0x01	; 1
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	88 1f       	adc	r24, r24
 4d0:	bb 1f       	adc	r27, r27
 4d2:	62 17       	cp	r22, r18
 4d4:	73 07       	cpc	r23, r19
 4d6:	84 07       	cpc	r24, r20
 4d8:	ba 07       	cpc	r27, r26
 4da:	20 f0       	brcs	.+8      	; 0x4e4 <__divsf3_pse+0xaa>
 4dc:	62 1b       	sub	r22, r18
 4de:	73 0b       	sbc	r23, r19
 4e0:	84 0b       	sbc	r24, r20
 4e2:	ba 0b       	sbc	r27, r26
 4e4:	ee 1f       	adc	r30, r30
 4e6:	88 f7       	brcc	.-30     	; 0x4ca <__divsf3_pse+0x90>
 4e8:	e0 95       	com	r30
 4ea:	08 95       	ret

000004ec <__fixsfsi>:
 4ec:	04 d0       	rcall	.+8      	; 0x4f6 <__fixunssfsi>
 4ee:	68 94       	set
 4f0:	b1 11       	cpse	r27, r1
 4f2:	b5 c0       	rjmp	.+362    	; 0x65e <__fp_szero>
 4f4:	08 95       	ret

000004f6 <__fixunssfsi>:
 4f6:	98 d0       	rcall	.+304    	; 0x628 <__fp_splitA>
 4f8:	88 f0       	brcs	.+34     	; 0x51c <__fixunssfsi+0x26>
 4fa:	9f 57       	subi	r25, 0x7F	; 127
 4fc:	90 f0       	brcs	.+36     	; 0x522 <__fixunssfsi+0x2c>
 4fe:	b9 2f       	mov	r27, r25
 500:	99 27       	eor	r25, r25
 502:	b7 51       	subi	r27, 0x17	; 23
 504:	a0 f0       	brcs	.+40     	; 0x52e <__fixunssfsi+0x38>
 506:	d1 f0       	breq	.+52     	; 0x53c <__fixunssfsi+0x46>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	1a f0       	brmi	.+6      	; 0x518 <__fixunssfsi+0x22>
 512:	ba 95       	dec	r27
 514:	c9 f7       	brne	.-14     	; 0x508 <__fixunssfsi+0x12>
 516:	12 c0       	rjmp	.+36     	; 0x53c <__fixunssfsi+0x46>
 518:	b1 30       	cpi	r27, 0x01	; 1
 51a:	81 f0       	breq	.+32     	; 0x53c <__fixunssfsi+0x46>
 51c:	9f d0       	rcall	.+318    	; 0x65c <__fp_zero>
 51e:	b1 e0       	ldi	r27, 0x01	; 1
 520:	08 95       	ret
 522:	9c c0       	rjmp	.+312    	; 0x65c <__fp_zero>
 524:	67 2f       	mov	r22, r23
 526:	78 2f       	mov	r23, r24
 528:	88 27       	eor	r24, r24
 52a:	b8 5f       	subi	r27, 0xF8	; 248
 52c:	39 f0       	breq	.+14     	; 0x53c <__fixunssfsi+0x46>
 52e:	b9 3f       	cpi	r27, 0xF9	; 249
 530:	cc f3       	brlt	.-14     	; 0x524 <__fixunssfsi+0x2e>
 532:	86 95       	lsr	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b3 95       	inc	r27
 53a:	d9 f7       	brne	.-10     	; 0x532 <__fixunssfsi+0x3c>
 53c:	3e f4       	brtc	.+14     	; 0x54c <__fixunssfsi+0x56>
 53e:	90 95       	com	r25
 540:	80 95       	com	r24
 542:	70 95       	com	r23
 544:	61 95       	neg	r22
 546:	7f 4f       	sbci	r23, 0xFF	; 255
 548:	8f 4f       	sbci	r24, 0xFF	; 255
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	08 95       	ret

0000054e <__floatunsisf>:
 54e:	e8 94       	clt
 550:	09 c0       	rjmp	.+18     	; 0x564 <__floatsisf+0x12>

00000552 <__floatsisf>:
 552:	97 fb       	bst	r25, 7
 554:	3e f4       	brtc	.+14     	; 0x564 <__floatsisf+0x12>
 556:	90 95       	com	r25
 558:	80 95       	com	r24
 55a:	70 95       	com	r23
 55c:	61 95       	neg	r22
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	8f 4f       	sbci	r24, 0xFF	; 255
 562:	9f 4f       	sbci	r25, 0xFF	; 255
 564:	99 23       	and	r25, r25
 566:	a9 f0       	breq	.+42     	; 0x592 <__floatsisf+0x40>
 568:	f9 2f       	mov	r31, r25
 56a:	96 e9       	ldi	r25, 0x96	; 150
 56c:	bb 27       	eor	r27, r27
 56e:	93 95       	inc	r25
 570:	f6 95       	lsr	r31
 572:	87 95       	ror	r24
 574:	77 95       	ror	r23
 576:	67 95       	ror	r22
 578:	b7 95       	ror	r27
 57a:	f1 11       	cpse	r31, r1
 57c:	f8 cf       	rjmp	.-16     	; 0x56e <__floatsisf+0x1c>
 57e:	fa f4       	brpl	.+62     	; 0x5be <__floatsisf+0x6c>
 580:	bb 0f       	add	r27, r27
 582:	11 f4       	brne	.+4      	; 0x588 <__floatsisf+0x36>
 584:	60 ff       	sbrs	r22, 0
 586:	1b c0       	rjmp	.+54     	; 0x5be <__floatsisf+0x6c>
 588:	6f 5f       	subi	r22, 0xFF	; 255
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	8f 4f       	sbci	r24, 0xFF	; 255
 58e:	9f 4f       	sbci	r25, 0xFF	; 255
 590:	16 c0       	rjmp	.+44     	; 0x5be <__floatsisf+0x6c>
 592:	88 23       	and	r24, r24
 594:	11 f0       	breq	.+4      	; 0x59a <__floatsisf+0x48>
 596:	96 e9       	ldi	r25, 0x96	; 150
 598:	11 c0       	rjmp	.+34     	; 0x5bc <__floatsisf+0x6a>
 59a:	77 23       	and	r23, r23
 59c:	21 f0       	breq	.+8      	; 0x5a6 <__floatsisf+0x54>
 59e:	9e e8       	ldi	r25, 0x8E	; 142
 5a0:	87 2f       	mov	r24, r23
 5a2:	76 2f       	mov	r23, r22
 5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <__floatsisf+0x5e>
 5a6:	66 23       	and	r22, r22
 5a8:	71 f0       	breq	.+28     	; 0x5c6 <__floatsisf+0x74>
 5aa:	96 e8       	ldi	r25, 0x86	; 134
 5ac:	86 2f       	mov	r24, r22
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	2a f0       	brmi	.+10     	; 0x5be <__floatsisf+0x6c>
 5b4:	9a 95       	dec	r25
 5b6:	66 0f       	add	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	da f7       	brpl	.-10     	; 0x5b4 <__floatsisf+0x62>
 5be:	88 0f       	add	r24, r24
 5c0:	96 95       	lsr	r25
 5c2:	87 95       	ror	r24
 5c4:	97 f9       	bld	r25, 7
 5c6:	08 95       	ret

000005c8 <__fp_inf>:
 5c8:	97 f9       	bld	r25, 7
 5ca:	9f 67       	ori	r25, 0x7F	; 127
 5cc:	80 e8       	ldi	r24, 0x80	; 128
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	08 95       	ret

000005d4 <__fp_nan>:
 5d4:	9f ef       	ldi	r25, 0xFF	; 255
 5d6:	80 ec       	ldi	r24, 0xC0	; 192
 5d8:	08 95       	ret

000005da <__fp_pscA>:
 5da:	00 24       	eor	r0, r0
 5dc:	0a 94       	dec	r0
 5de:	16 16       	cp	r1, r22
 5e0:	17 06       	cpc	r1, r23
 5e2:	18 06       	cpc	r1, r24
 5e4:	09 06       	cpc	r0, r25
 5e6:	08 95       	ret

000005e8 <__fp_pscB>:
 5e8:	00 24       	eor	r0, r0
 5ea:	0a 94       	dec	r0
 5ec:	12 16       	cp	r1, r18
 5ee:	13 06       	cpc	r1, r19
 5f0:	14 06       	cpc	r1, r20
 5f2:	05 06       	cpc	r0, r21
 5f4:	08 95       	ret

000005f6 <__fp_round>:
 5f6:	09 2e       	mov	r0, r25
 5f8:	03 94       	inc	r0
 5fa:	00 0c       	add	r0, r0
 5fc:	11 f4       	brne	.+4      	; 0x602 <__fp_round+0xc>
 5fe:	88 23       	and	r24, r24
 600:	52 f0       	brmi	.+20     	; 0x616 <__fp_round+0x20>
 602:	bb 0f       	add	r27, r27
 604:	40 f4       	brcc	.+16     	; 0x616 <__fp_round+0x20>
 606:	bf 2b       	or	r27, r31
 608:	11 f4       	brne	.+4      	; 0x60e <__fp_round+0x18>
 60a:	60 ff       	sbrs	r22, 0
 60c:	04 c0       	rjmp	.+8      	; 0x616 <__fp_round+0x20>
 60e:	6f 5f       	subi	r22, 0xFF	; 255
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	8f 4f       	sbci	r24, 0xFF	; 255
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	08 95       	ret

00000618 <__fp_split3>:
 618:	57 fd       	sbrc	r21, 7
 61a:	90 58       	subi	r25, 0x80	; 128
 61c:	44 0f       	add	r20, r20
 61e:	55 1f       	adc	r21, r21
 620:	59 f0       	breq	.+22     	; 0x638 <__fp_splitA+0x10>
 622:	5f 3f       	cpi	r21, 0xFF	; 255
 624:	71 f0       	breq	.+28     	; 0x642 <__fp_splitA+0x1a>
 626:	47 95       	ror	r20

00000628 <__fp_splitA>:
 628:	88 0f       	add	r24, r24
 62a:	97 fb       	bst	r25, 7
 62c:	99 1f       	adc	r25, r25
 62e:	61 f0       	breq	.+24     	; 0x648 <__fp_splitA+0x20>
 630:	9f 3f       	cpi	r25, 0xFF	; 255
 632:	79 f0       	breq	.+30     	; 0x652 <__fp_splitA+0x2a>
 634:	87 95       	ror	r24
 636:	08 95       	ret
 638:	12 16       	cp	r1, r18
 63a:	13 06       	cpc	r1, r19
 63c:	14 06       	cpc	r1, r20
 63e:	55 1f       	adc	r21, r21
 640:	f2 cf       	rjmp	.-28     	; 0x626 <__fp_split3+0xe>
 642:	46 95       	lsr	r20
 644:	f1 df       	rcall	.-30     	; 0x628 <__fp_splitA>
 646:	08 c0       	rjmp	.+16     	; 0x658 <__fp_splitA+0x30>
 648:	16 16       	cp	r1, r22
 64a:	17 06       	cpc	r1, r23
 64c:	18 06       	cpc	r1, r24
 64e:	99 1f       	adc	r25, r25
 650:	f1 cf       	rjmp	.-30     	; 0x634 <__fp_splitA+0xc>
 652:	86 95       	lsr	r24
 654:	71 05       	cpc	r23, r1
 656:	61 05       	cpc	r22, r1
 658:	08 94       	sec
 65a:	08 95       	ret

0000065c <__fp_zero>:
 65c:	e8 94       	clt

0000065e <__fp_szero>:
 65e:	bb 27       	eor	r27, r27
 660:	66 27       	eor	r22, r22
 662:	77 27       	eor	r23, r23
 664:	cb 01       	movw	r24, r22
 666:	97 f9       	bld	r25, 7
 668:	08 95       	ret

0000066a <__mulsf3>:
 66a:	0b d0       	rcall	.+22     	; 0x682 <__mulsf3x>
 66c:	c4 cf       	rjmp	.-120    	; 0x5f6 <__fp_round>
 66e:	b5 df       	rcall	.-150    	; 0x5da <__fp_pscA>
 670:	28 f0       	brcs	.+10     	; 0x67c <__mulsf3+0x12>
 672:	ba df       	rcall	.-140    	; 0x5e8 <__fp_pscB>
 674:	18 f0       	brcs	.+6      	; 0x67c <__mulsf3+0x12>
 676:	95 23       	and	r25, r21
 678:	09 f0       	breq	.+2      	; 0x67c <__mulsf3+0x12>
 67a:	a6 cf       	rjmp	.-180    	; 0x5c8 <__fp_inf>
 67c:	ab cf       	rjmp	.-170    	; 0x5d4 <__fp_nan>
 67e:	11 24       	eor	r1, r1
 680:	ee cf       	rjmp	.-36     	; 0x65e <__fp_szero>

00000682 <__mulsf3x>:
 682:	ca df       	rcall	.-108    	; 0x618 <__fp_split3>
 684:	a0 f3       	brcs	.-24     	; 0x66e <__mulsf3+0x4>

00000686 <__mulsf3_pse>:
 686:	95 9f       	mul	r25, r21
 688:	d1 f3       	breq	.-12     	; 0x67e <__mulsf3+0x14>
 68a:	95 0f       	add	r25, r21
 68c:	50 e0       	ldi	r21, 0x00	; 0
 68e:	55 1f       	adc	r21, r21
 690:	62 9f       	mul	r22, r18
 692:	f0 01       	movw	r30, r0
 694:	72 9f       	mul	r23, r18
 696:	bb 27       	eor	r27, r27
 698:	f0 0d       	add	r31, r0
 69a:	b1 1d       	adc	r27, r1
 69c:	63 9f       	mul	r22, r19
 69e:	aa 27       	eor	r26, r26
 6a0:	f0 0d       	add	r31, r0
 6a2:	b1 1d       	adc	r27, r1
 6a4:	aa 1f       	adc	r26, r26
 6a6:	64 9f       	mul	r22, r20
 6a8:	66 27       	eor	r22, r22
 6aa:	b0 0d       	add	r27, r0
 6ac:	a1 1d       	adc	r26, r1
 6ae:	66 1f       	adc	r22, r22
 6b0:	82 9f       	mul	r24, r18
 6b2:	22 27       	eor	r18, r18
 6b4:	b0 0d       	add	r27, r0
 6b6:	a1 1d       	adc	r26, r1
 6b8:	62 1f       	adc	r22, r18
 6ba:	73 9f       	mul	r23, r19
 6bc:	b0 0d       	add	r27, r0
 6be:	a1 1d       	adc	r26, r1
 6c0:	62 1f       	adc	r22, r18
 6c2:	83 9f       	mul	r24, r19
 6c4:	a0 0d       	add	r26, r0
 6c6:	61 1d       	adc	r22, r1
 6c8:	22 1f       	adc	r18, r18
 6ca:	74 9f       	mul	r23, r20
 6cc:	33 27       	eor	r19, r19
 6ce:	a0 0d       	add	r26, r0
 6d0:	61 1d       	adc	r22, r1
 6d2:	23 1f       	adc	r18, r19
 6d4:	84 9f       	mul	r24, r20
 6d6:	60 0d       	add	r22, r0
 6d8:	21 1d       	adc	r18, r1
 6da:	82 2f       	mov	r24, r18
 6dc:	76 2f       	mov	r23, r22
 6de:	6a 2f       	mov	r22, r26
 6e0:	11 24       	eor	r1, r1
 6e2:	9f 57       	subi	r25, 0x7F	; 127
 6e4:	50 40       	sbci	r21, 0x00	; 0
 6e6:	8a f0       	brmi	.+34     	; 0x70a <__mulsf3_pse+0x84>
 6e8:	e1 f0       	breq	.+56     	; 0x722 <__mulsf3_pse+0x9c>
 6ea:	88 23       	and	r24, r24
 6ec:	4a f0       	brmi	.+18     	; 0x700 <__mulsf3_pse+0x7a>
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	bb 1f       	adc	r27, r27
 6f4:	66 1f       	adc	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	88 1f       	adc	r24, r24
 6fa:	91 50       	subi	r25, 0x01	; 1
 6fc:	50 40       	sbci	r21, 0x00	; 0
 6fe:	a9 f7       	brne	.-22     	; 0x6ea <__mulsf3_pse+0x64>
 700:	9e 3f       	cpi	r25, 0xFE	; 254
 702:	51 05       	cpc	r21, r1
 704:	70 f0       	brcs	.+28     	; 0x722 <__mulsf3_pse+0x9c>
 706:	60 cf       	rjmp	.-320    	; 0x5c8 <__fp_inf>
 708:	aa cf       	rjmp	.-172    	; 0x65e <__fp_szero>
 70a:	5f 3f       	cpi	r21, 0xFF	; 255
 70c:	ec f3       	brlt	.-6      	; 0x708 <__mulsf3_pse+0x82>
 70e:	98 3e       	cpi	r25, 0xE8	; 232
 710:	dc f3       	brlt	.-10     	; 0x708 <__mulsf3_pse+0x82>
 712:	86 95       	lsr	r24
 714:	77 95       	ror	r23
 716:	67 95       	ror	r22
 718:	b7 95       	ror	r27
 71a:	f7 95       	ror	r31
 71c:	e7 95       	ror	r30
 71e:	9f 5f       	subi	r25, 0xFF	; 255
 720:	c1 f7       	brne	.-16     	; 0x712 <__mulsf3_pse+0x8c>
 722:	fe 2b       	or	r31, r30
 724:	88 0f       	add	r24, r24
 726:	91 1d       	adc	r25, r1
 728:	96 95       	lsr	r25
 72a:	87 95       	ror	r24
 72c:	97 f9       	bld	r25, 7
 72e:	08 95       	ret

00000730 <__tablejump2__>:
 730:	ee 0f       	add	r30, r30
 732:	ff 1f       	adc	r31, r31

00000734 <__tablejump__>:
 734:	05 90       	lpm	r0, Z+
 736:	f4 91       	lpm	r31, Z
 738:	e0 2d       	mov	r30, r0
 73a:	09 94       	ijmp

0000073c <_exit>:
 73c:	f8 94       	cli

0000073e <__stop_program>:
 73e:	ff cf       	rjmp	.-2      	; 0x73e <__stop_program>
