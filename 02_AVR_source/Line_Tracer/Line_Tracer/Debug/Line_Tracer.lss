
Line_Tracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000092c  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800122  00800122  000009e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d2  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a3  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000753  00000000  00000000  0000153f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002af  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000755  00000000  00000000  0000214b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	b9 c2       	rjmp	.+1394   	; 0x578 <__vector_1>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	50 c0       	rjmp	.+160    	; 0xd6 <__bad_interrupt>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	a5 00       	.word	0x00a5	; ????
  8e:	b3 00       	.word	0x00b3	; ????
  90:	c1 00       	.word	0x00c1	; ????
  92:	cf 00       	.word	0x00cf	; ????
  94:	dd 00       	.word	0x00dd	; ????
  96:	eb 00       	.word	0x00eb	; ????
  98:	f9 00       	.word	0x00f9	; ????
  9a:	07 01       	movw	r0, r14

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e1       	ldi	r29, 0x10	; 16
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	ec e2       	ldi	r30, 0x2C	; 44
  b0:	f9 e0       	ldi	r31, 0x09	; 9
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a2 e2       	ldi	r26, 0x22	; 34
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a8 36       	cpi	r26, 0x68	; 104
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	07 d2       	rcall	.+1038   	; 0x4e2 <main>
  d4:	29 c4       	rjmp	.+2130   	; 0x928 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <ADC_GET>:
#include "linetracer_ADC.h"

// Get ADC from IR sensor
void ADC_GET(int *ADC_DATA) {
  d8:	8f 92       	push	r8
  da:	9f 92       	push	r9
  dc:	af 92       	push	r10
  de:	bf 92       	push	r11
  e0:	cf 92       	push	r12
  e2:	df 92       	push	r13
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	4c 01       	movw	r8, r24
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_6---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 6 :
			PORTA = 0x40;
  f6:	68 94       	set
  f8:	dd 24       	eor	r13, r13
  fa:	d6 f8       	bld	r13, 6

			ADC_DATA[6] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC7; // prepare for ADC_7
  fc:	0f 2e       	mov	r0, r31
  fe:	f7 ec       	ldi	r31, 0xC7	; 199
 100:	ef 2e       	mov	r14, r31
 102:	f0 2d       	mov	r31, r0

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_5---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 5 :
			PORTA = 0x20;
 104:	68 94       	set
 106:	ff 24       	eor	r15, r15
 108:	f5 f8       	bld	r15, 5

			ADC_DATA[5] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC6; // prepare for ADC_6
 10a:	06 ec       	ldi	r16, 0xC6	; 198
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_4---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 4 :

			PORTA = 0x10;
 10c:	10 e1       	ldi	r17, 0x10	; 16

			ADC_DATA[4] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC5; // prepare for ADC_5
 10e:	d5 ec       	ldi	r29, 0xC5	; 197

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_3---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 3 :
			PORTA = 0x08;
 110:	c8 e0       	ldi	r28, 0x08	; 8

			ADC_DATA[3] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC4; // prepare for ADC_4
 112:	b4 ec       	ldi	r27, 0xC4	; 196

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_2---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 2 :
			PORTA = 0x04;
 114:	a4 e0       	ldi	r26, 0x04	; 4

			ADC_DATA[2] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC3; // prepare for ADC_3
 116:	73 ec       	ldi	r23, 0xC3	; 195

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_1---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :
			PORTA = 0x02;
 118:	62 e0       	ldi	r22, 0x02	; 2

			ADC_DATA[1] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC2; // prepare for ADC_2
 11a:	0f 2e       	mov	r0, r31
 11c:	f2 ec       	ldi	r31, 0xC2	; 194
 11e:	cf 2e       	mov	r12, r31
 120:	f0 2d       	mov	r31, r0
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_0---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 0 :		
			
			PORTA = 0x01;
 122:	bb 24       	eor	r11, r11
 124:	b3 94       	inc	r11

			ADC_DATA[0] = ADC;
			
			PORTA = 0x00;

			ADMUX = 0xC1; // prepare for ADC_1
 126:	0f 2e       	mov	r0, r31
 128:	f1 ec       	ldi	r31, 0xC1	; 193
 12a:	af 2e       	mov	r10, r31
 12c:	f0 2d       	mov	r31, r0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <ADC_GET+0x5c>
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	a9 01       	movw	r20, r18
 136:	41 50       	subi	r20, 0x01	; 1
 138:	51 09       	sbc	r21, r1
	
	int i=0;
		
	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		switch(i) {
 13a:	48 30       	cpi	r20, 0x08	; 8
 13c:	51 05       	cpc	r21, r1
 13e:	08 f0       	brcs	.+2      	; 0x142 <ADC_GET+0x6a>
 140:	76 c0       	rjmp	.+236    	; 0x22e <ADC_GET+0x156>
 142:	4a 5b       	subi	r20, 0xBA	; 186
 144:	5f 4f       	sbci	r21, 0xFF	; 255
 146:	fa 01       	movw	r30, r20
 148:	d5 c3       	rjmp	.+1962   	; 0x8f4 <__tablejump2__>
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_0---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 0 :		
			
			PORTA = 0x01;
 14a:	bb ba       	out	0x1b, r11	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 14c:	86 b1       	in	r24, 0x06	; 6
 14e:	80 6c       	ori	r24, 0xC0	; 192
 150:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 152:	34 9b       	sbis	0x06, 4	; 6
 154:	fe cf       	rjmp	.-4      	; 0x152 <ADC_GET+0x7a>

			ADC_DATA[0] = ADC;
 156:	84 b1       	in	r24, 0x04	; 4
 158:	95 b1       	in	r25, 0x05	; 5
 15a:	f4 01       	movw	r30, r8
 15c:	91 83       	std	Z+1, r25	; 0x01
 15e:	80 83       	st	Z, r24
			
			PORTA = 0x00;
 160:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC1; // prepare for ADC_1
 162:	a7 b8       	out	0x07, r10	; 7

			break;
 164:	e5 cf       	rjmp	.-54     	; 0x130 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_1---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :
			PORTA = 0x02;
 166:	6b bb       	out	0x1b, r22	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 168:	86 b1       	in	r24, 0x06	; 6
 16a:	80 6c       	ori	r24, 0xC0	; 192
 16c:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 16e:	34 9b       	sbis	0x06, 4	; 6
 170:	fe cf       	rjmp	.-4      	; 0x16e <ADC_GET+0x96>

			ADC_DATA[1] = ADC;
 172:	84 b1       	in	r24, 0x04	; 4
 174:	95 b1       	in	r25, 0x05	; 5
 176:	f4 01       	movw	r30, r8
 178:	93 83       	std	Z+3, r25	; 0x03
 17a:	82 83       	std	Z+2, r24	; 0x02
			
			PORTA = 0x00;
 17c:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC2; // prepare for ADC_2
 17e:	c7 b8       	out	0x07, r12	; 7

			break;
 180:	d7 cf       	rjmp	.-82     	; 0x130 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_2---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 2 :
			PORTA = 0x04;
 182:	ab bb       	out	0x1b, r26	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 184:	86 b1       	in	r24, 0x06	; 6
 186:	80 6c       	ori	r24, 0xC0	; 192
 188:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 18a:	34 9b       	sbis	0x06, 4	; 6
 18c:	fe cf       	rjmp	.-4      	; 0x18a <ADC_GET+0xb2>

			ADC_DATA[2] = ADC;
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	95 b1       	in	r25, 0x05	; 5
 192:	f4 01       	movw	r30, r8
 194:	95 83       	std	Z+5, r25	; 0x05
 196:	84 83       	std	Z+4, r24	; 0x04
			
			PORTA = 0x00;
 198:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC3; // prepare for ADC_3
 19a:	77 b9       	out	0x07, r23	; 7

			break;
 19c:	c9 cf       	rjmp	.-110    	; 0x130 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_3---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 3 :
			PORTA = 0x08;
 19e:	cb bb       	out	0x1b, r28	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1a0:	86 b1       	in	r24, 0x06	; 6
 1a2:	80 6c       	ori	r24, 0xC0	; 192
 1a4:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1a6:	34 9b       	sbis	0x06, 4	; 6
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <ADC_GET+0xce>

			ADC_DATA[3] = ADC;
 1aa:	84 b1       	in	r24, 0x04	; 4
 1ac:	95 b1       	in	r25, 0x05	; 5
 1ae:	f4 01       	movw	r30, r8
 1b0:	97 83       	std	Z+7, r25	; 0x07
 1b2:	86 83       	std	Z+6, r24	; 0x06
			
			PORTA = 0x00;
 1b4:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC4; // prepare for ADC_4
 1b6:	b7 b9       	out	0x07, r27	; 7

			break;
 1b8:	bb cf       	rjmp	.-138    	; 0x130 <ADC_GET+0x58>
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_4---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 4 :

			PORTA = 0x10;
 1ba:	1b bb       	out	0x1b, r17	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1bc:	86 b1       	in	r24, 0x06	; 6
 1be:	80 6c       	ori	r24, 0xC0	; 192
 1c0:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1c2:	34 9b       	sbis	0x06, 4	; 6
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <ADC_GET+0xea>

			ADC_DATA[4] = ADC;
 1c6:	84 b1       	in	r24, 0x04	; 4
 1c8:	95 b1       	in	r25, 0x05	; 5
 1ca:	f4 01       	movw	r30, r8
 1cc:	91 87       	std	Z+9, r25	; 0x09
 1ce:	80 87       	std	Z+8, r24	; 0x08
			
			PORTA = 0x00;
 1d0:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC5; // prepare for ADC_5
 1d2:	d7 b9       	out	0x07, r29	; 7

			break;
 1d4:	ad cf       	rjmp	.-166    	; 0x130 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_5---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 5 :
			PORTA = 0x20;
 1d6:	fb ba       	out	0x1b, r15	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1d8:	86 b1       	in	r24, 0x06	; 6
 1da:	80 6c       	ori	r24, 0xC0	; 192
 1dc:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1de:	34 9b       	sbis	0x06, 4	; 6
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <ADC_GET+0x106>

			ADC_DATA[5] = ADC;
 1e2:	84 b1       	in	r24, 0x04	; 4
 1e4:	95 b1       	in	r25, 0x05	; 5
 1e6:	f4 01       	movw	r30, r8
 1e8:	93 87       	std	Z+11, r25	; 0x0b
 1ea:	82 87       	std	Z+10, r24	; 0x0a
			
			PORTA = 0x00;
 1ec:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC6; // prepare for ADC_6
 1ee:	07 b9       	out	0x07, r16	; 7

			break;
 1f0:	9f cf       	rjmp	.-194    	; 0x130 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_6---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 6 :
			PORTA = 0x40;
 1f2:	db ba       	out	0x1b, r13	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1f4:	86 b1       	in	r24, 0x06	; 6
 1f6:	80 6c       	ori	r24, 0xC0	; 192
 1f8:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1fa:	34 9b       	sbis	0x06, 4	; 6
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <ADC_GET+0x122>

			ADC_DATA[6] = ADC;
 1fe:	84 b1       	in	r24, 0x04	; 4
 200:	95 b1       	in	r25, 0x05	; 5
 202:	f4 01       	movw	r30, r8
 204:	95 87       	std	Z+13, r25	; 0x0d
 206:	84 87       	std	Z+12, r24	; 0x0c
			
			PORTA = 0x00;
 208:	1b ba       	out	0x1b, r1	; 27

			ADMUX = 0xC7; // prepare for ADC_7
 20a:	e7 b8       	out	0x07, r14	; 7

			break;
 20c:	91 cf       	rjmp	.-222    	; 0x130 <ADC_GET+0x58>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_7---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 7 :
			PORTA = 0x80;
 20e:	80 e8       	ldi	r24, 0x80	; 128
 210:	8b bb       	out	0x1b, r24	; 27

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 212:	86 b1       	in	r24, 0x06	; 6
 214:	80 6c       	ori	r24, 0xC0	; 192
 216:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 218:	34 9b       	sbis	0x06, 4	; 6
 21a:	fe cf       	rjmp	.-4      	; 0x218 <ADC_GET+0x140>

			ADC_DATA[7] = ADC;
 21c:	84 b1       	in	r24, 0x04	; 4
 21e:	95 b1       	in	r25, 0x05	; 5
 220:	f4 01       	movw	r30, r8
 222:	97 87       	std	Z+15, r25	; 0x0f
 224:	86 87       	std	Z+14, r24	; 0x0e
			
			PORTA = 0x00;
 226:	1b ba       	out	0x1b, r1	; 27
			
			ADMUX = 0xC0; // prepare for ADC_0
 228:	80 ec       	ldi	r24, 0xC0	; 192
 22a:	87 b9       	out	0x07, r24	; 7
 22c:	04 c0       	rjmp	.+8      	; 0x236 <ADC_GET+0x15e>
	//------------IR order-----------//
	// 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 //
	
	int i=0;
		
	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 22e:	28 30       	cpi	r18, 0x08	; 8
 230:	31 05       	cpc	r19, r1
 232:	0c f4       	brge	.+2      	; 0x236 <ADC_GET+0x15e>
 234:	7d cf       	rjmp	.-262    	; 0x130 <ADC_GET+0x58>

		}

	}

}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	bf 90       	pop	r11
 248:	af 90       	pop	r10
 24a:	9f 90       	pop	r9
 24c:	8f 90       	pop	r8
 24e:	08 95       	ret

00000250 <ADC_MAX_MIN>:

// Get ADC max and min value from ADC_DATA[i]
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA) {
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	ec 01       	movw	r28, r24
 25a:	06 2f       	mov	r16, r22
 25c:	17 2f       	mov	r17, r23
 25e:	e4 2f       	mov	r30, r20
 260:	f5 2f       	mov	r31, r21

	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	af 01       	movw	r20, r30
		
		if( ADC_MAX[i] < ADC_DATA[i] ) // ADC_MAX
 268:	20 81       	ld	r18, Z
 26a:	31 81       	ldd	r19, Z+1	; 0x01
 26c:	68 81       	ld	r22, Y
 26e:	79 81       	ldd	r23, Y+1	; 0x01
 270:	62 17       	cp	r22, r18
 272:	73 07       	cpc	r23, r19
 274:	14 f4       	brge	.+4      	; 0x27a <ADC_MAX_MIN+0x2a>
		ADC_MAX[i] = ADC_DATA[i];
 276:	39 83       	std	Y+1, r19	; 0x01
 278:	28 83       	st	Y, r18
		
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
 27a:	da 01       	movw	r26, r20
 27c:	2d 91       	ld	r18, X+
 27e:	3c 91       	ld	r19, X
 280:	32 96       	adiw	r30, 0x02	; 2
 282:	d8 01       	movw	r26, r16
 284:	4d 91       	ld	r20, X+
 286:	5c 91       	ld	r21, X
 288:	11 97       	sbiw	r26, 0x01	; 1
 28a:	24 17       	cp	r18, r20
 28c:	35 07       	cpc	r19, r21
 28e:	14 f4       	brge	.+4      	; 0x294 <ADC_MAX_MIN+0x44>
		ADC_MIN[i] = ADC_DATA[i];
 290:	2d 93       	st	X+, r18
 292:	3c 93       	st	X, r19
// Get ADC max and min value from ADC_DATA[i]
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA) {

	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	22 96       	adiw	r28, 0x02	; 2
 298:	0e 5f       	subi	r16, 0xFE	; 254
 29a:	1f 4f       	sbci	r17, 0xFF	; 255
 29c:	88 30       	cpi	r24, 0x08	; 8
 29e:	91 05       	cpc	r25, r1
 2a0:	11 f7       	brne	.-60     	; 0x266 <ADC_MAX_MIN+0x16>
		
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
		ADC_MIN[i] = ADC_DATA[i];
		
	}
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <ADC_NORMALIZE>:


// Get normalized ADC value (white base / black line / resolution=100)
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN) {
 2ac:	2f 92       	push	r2
 2ae:	3f 92       	push	r3
 2b0:	4f 92       	push	r4
 2b2:	5f 92       	push	r5
 2b4:	6f 92       	push	r6
 2b6:	7f 92       	push	r7
 2b8:	8f 92       	push	r8
 2ba:	9f 92       	push	r9
 2bc:	af 92       	push	r10
 2be:	bf 92       	push	r11
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	a4 2e       	mov	r10, r20
 2d2:	b5 2e       	mov	r11, r21
 2d4:	c6 2e       	mov	r12, r22
 2d6:	d7 2e       	mov	r13, r23
 2d8:	e2 2e       	mov	r14, r18
 2da:	f3 2e       	mov	r15, r19
 2dc:	4c 01       	movw	r8, r24
	
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
 2e2:	f5 01       	movw	r30, r10
 2e4:	01 91       	ld	r16, Z+
 2e6:	11 91       	ld	r17, Z+
 2e8:	5f 01       	movw	r10, r30
 2ea:	f6 01       	movw	r30, r12
 2ec:	81 91       	ld	r24, Z+
 2ee:	91 91       	ld	r25, Z+
 2f0:	6f 01       	movw	r12, r30
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
 2f2:	f7 01       	movw	r30, r14
 2f4:	21 90       	ld	r2, Z+
 2f6:	31 90       	ld	r3, Z+
 2f8:	7f 01       	movw	r14, r30
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
 2fa:	b8 01       	movw	r22, r16
 2fc:	68 1b       	sub	r22, r24
 2fe:	79 0b       	sbc	r23, r25
 300:	88 27       	eor	r24, r24
 302:	77 fd       	sbrc	r23, 7
 304:	80 95       	com	r24
 306:	98 2f       	mov	r25, r24
 308:	f3 d1       	rcall	.+998    	; 0x6f0 <__floatsisf>
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
		
		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	48 ec       	ldi	r20, 0xC8	; 200
 310:	52 e4       	ldi	r21, 0x42	; 66
 312:	7a d2       	rcall	.+1268   	; 0x808 <__mulsf3>
 314:	2b 01       	movw	r4, r22
 316:	3c 01       	movw	r6, r24
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
 318:	b8 01       	movw	r22, r16
 31a:	62 19       	sub	r22, r2
 31c:	73 09       	sbc	r23, r3
 31e:	88 27       	eor	r24, r24
 320:	77 fd       	sbrc	r23, 7
 322:	80 95       	com	r24
 324:	98 2f       	mov	r25, r24
 326:	e4 d1       	rcall	.+968    	; 0x6f0 <__floatsisf>
 328:	9b 01       	movw	r18, r22
 32a:	ac 01       	movw	r20, r24
		
		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
 32c:	c3 01       	movw	r24, r6
 32e:	b2 01       	movw	r22, r4
 330:	44 d1       	rcall	.+648    	; 0x5ba <__divsf3>
 332:	ab d1       	rcall	.+854    	; 0x68a <__fixsfsi>
 334:	f4 01       	movw	r30, r8
 336:	61 93       	st	Z+, r22
 338:	71 93       	st	Z+, r23
 33a:	4f 01       	movw	r8, r30
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN) {
	
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 33c:	21 96       	adiw	r28, 0x01	; 1
 33e:	c8 30       	cpi	r28, 0x08	; 8
 340:	d1 05       	cpc	r29, r1
 342:	79 f6       	brne	.-98     	; 0x2e2 <ADC_NORMALIZE+0x36>
		
		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);

	}

}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
 354:	bf 90       	pop	r11
 356:	af 90       	pop	r10
 358:	9f 90       	pop	r9
 35a:	8f 90       	pop	r8
 35c:	7f 90       	pop	r7
 35e:	6f 90       	pop	r6
 360:	5f 90       	pop	r5
 362:	4f 90       	pop	r4
 364:	3f 90       	pop	r3
 366:	2f 90       	pop	r2
 368:	08 95       	ret

0000036a <ADC_WEIGHT>:

// Get Weighted value for normalize data(NORM_DATA[i])
void ADC_WEIGHT(int *WEIGHT_DATA, const int *NORM_DATA) {
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	60 97       	sbiw	r28, 0x10	; 16
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
	
	int i;

	int weight[8] = {-55, -50, -10, 0, 0, 10, 50, 55};
 37e:	20 e1       	ldi	r18, 0x10	; 16
 380:	e2 e1       	ldi	r30, 0x12	; 18
 382:	f1 e0       	ldi	r31, 0x01	; 1
 384:	de 01       	movw	r26, r28
 386:	11 96       	adiw	r26, 0x01	; 1
 388:	01 90       	ld	r0, Z+
 38a:	0d 92       	st	X+, r0
 38c:	2a 95       	dec	r18
 38e:	e1 f7       	brne	.-8      	; 0x388 <ADC_WEIGHT+0x1e>
 390:	fe 01       	movw	r30, r28
 392:	31 96       	adiw	r30, 0x01	; 1
 394:	dc 01       	movw	r26, r24
 396:	9e 01       	movw	r18, r28
 398:	21 5f       	subi	r18, 0xF1	; 241
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {

		WEIGHT_DATA[i] = weight[i];
 39c:	81 91       	ld	r24, Z+
 39e:	91 91       	ld	r25, Z+
 3a0:	8d 93       	st	X+, r24
 3a2:	9d 93       	st	X+, r25
	
	int i;

	int weight[8] = {-55, -50, -10, 0, 0, 10, 50, 55};
	
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
 3a4:	e2 17       	cp	r30, r18
 3a6:	f3 07       	cpc	r31, r19
 3a8:	c9 f7       	brne	.-14     	; 0x39c <ADC_WEIGHT+0x32>

		WEIGHT_DATA[i] = weight[i];
		
	}

}
 3aa:	60 96       	adiw	r28, 0x10	; 16
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <ADC_SENCERDATA>:

// Get sensor_data from weighted data(WEIGHT_DATA[i])
void ADC_SENCERDATA(double *SENSOR_DATA, const int *WEIGHT_DATA, const int *NORM_DATA) {
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	8c 01       	movw	r16, r24
 3c6:	e4 2f       	mov	r30, r20
 3c8:	f5 2f       	mov	r31, r21
 3ca:	87 e0       	ldi	r24, 0x07	; 7
 3cc:	90 e0       	ldi	r25, 0x00	; 0

	int count_sensor=0, temp=0;
 3ce:	a0 e0       	ldi	r26, 0x00	; 0
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
	int i=0;
	
	// count the number of sensor determined that it is sensed
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
		
		if(NORM_DATA[i] > 50) count_sensor++;
 3d2:	21 91       	ld	r18, Z+
 3d4:	31 91       	ld	r19, Z+
 3d6:	23 33       	cpi	r18, 0x33	; 51
 3d8:	31 05       	cpc	r19, r1
 3da:	0c f0       	brlt	.+2      	; 0x3de <ADC_SENCERDATA+0x22>
 3dc:	11 96       	adiw	r26, 0x01	; 1
 3de:	01 97       	sbiw	r24, 0x01	; 1

	int count_sensor=0, temp=0;
	int i=0;
	
	// count the number of sensor determined that it is sensed
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
 3e0:	00 97       	sbiw	r24, 0x00	; 0
 3e2:	b9 f7       	brne	.-18     	; 0x3d2 <ADC_SENCERDATA+0x16>
 3e4:	e4 2f       	mov	r30, r20
 3e6:	f5 2f       	mov	r31, r21
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
	}


	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
		
		if(NORM_DATA[i] > 50) {
 3f0:	41 91       	ld	r20, Z+
 3f2:	51 91       	ld	r21, Z+
 3f4:	43 33       	cpi	r20, 0x33	; 51
 3f6:	51 05       	cpc	r21, r1
 3f8:	44 f0       	brlt	.+16     	; 0x40a <ADC_SENCERDATA+0x4e>
 3fa:	ab 01       	movw	r20, r22
 3fc:	42 0f       	add	r20, r18
 3fe:	53 1f       	adc	r21, r19
			temp += WEIGHT_DATA[i]; // the sum of weighted data for finding error
 400:	ea 01       	movw	r28, r20
 402:	48 81       	ld	r20, Y
 404:	59 81       	ldd	r21, Y+1	; 0x01
 406:	84 0f       	add	r24, r20
 408:	95 1f       	adc	r25, r21
 40a:	2e 5f       	subi	r18, 0xFE	; 254
 40c:	3f 4f       	sbci	r19, 0xFF	; 255
		// 50 is a min value that can be thought that it is sensed

	}


	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
 40e:	2e 30       	cpi	r18, 0x0E	; 14
 410:	31 05       	cpc	r19, r1
 412:	71 f7       	brne	.-36     	; 0x3f0 <ADC_SENCERDATA+0x34>
			temp += WEIGHT_DATA[i]; // the sum of weighted data for finding error
		}

	}

	if(count_sensor == 0)
 414:	10 97       	sbiw	r26, 0x00	; 0
 416:	31 f4       	brne	.+12     	; 0x424 <ADC_SENCERDATA+0x68>
		SENSOR_DATA[0] = 0;
 418:	f8 01       	movw	r30, r16
 41a:	10 82       	st	Z, r1
 41c:	11 82       	std	Z+1, r1	; 0x01
 41e:	12 82       	std	Z+2, r1	; 0x02
 420:	13 82       	std	Z+3, r1	; 0x03
 422:	0c c0       	rjmp	.+24     	; 0x43c <ADC_SENCERDATA+0x80>
	else
		SENSOR_DATA[0] = (float)(temp / count_sensor);
 424:	bd 01       	movw	r22, r26
 426:	53 d2       	rcall	.+1190   	; 0x8ce <__divmodhi4>
 428:	88 27       	eor	r24, r24
 42a:	77 fd       	sbrc	r23, 7
 42c:	80 95       	com	r24
 42e:	98 2f       	mov	r25, r24
 430:	5f d1       	rcall	.+702    	; 0x6f0 <__floatsisf>
 432:	e8 01       	movw	r28, r16
 434:	68 83       	st	Y, r22
 436:	79 83       	std	Y+1, r23	; 0x01
 438:	8a 83       	std	Y+2, r24	; 0x02
 43a:	9b 83       	std	Y+3, r25	; 0x03

} 
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	08 95       	ret

00000446 <MOTOR_speed>:
	PORTC = 0x01;
	
	
}

void MOTOR_speed(int speed, const double *SENSOR_DATA) {
 446:	cf 93       	push	r28
 448:	c8 2f       	mov	r28, r24
	
	int temp = SENSOR_DATA[0]*5;
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 ea       	ldi	r20, 0xA0	; 160
 450:	50 e4       	ldi	r21, 0x40	; 64
 452:	fb 01       	movw	r30, r22
 454:	60 81       	ld	r22, Z
 456:	71 81       	ldd	r23, Z+1	; 0x01
 458:	82 81       	ldd	r24, Z+2	; 0x02
 45a:	93 81       	ldd	r25, Z+3	; 0x03
 45c:	d5 d1       	rcall	.+938    	; 0x808 <__mulsf3>
 45e:	15 d1       	rcall	.+554    	; 0x68a <__fixsfsi>
 460:	26 2f       	mov	r18, r22
 462:	37 2f       	mov	r19, r23
	if(temp > 0) {
 464:	12 16       	cp	r1, r18
 466:	13 06       	cpc	r1, r19
 468:	44 f4       	brge	.+16     	; 0x47a <MOTOR_speed+0x34>
		cbi(PORTC, PORTC6);
 46a:	ae 98       	cbi	0x15, 6	; 21
		cbi(PORTC, PORTC2);
 46c:	aa 98       	cbi	0x15, 2	; 21
		OCR0 = speed-temp;
 46e:	8c 2f       	mov	r24, r28
 470:	86 1b       	sub	r24, r22
 472:	81 bf       	out	0x31, r24	; 49
		OCR2 = speed+temp;
 474:	6c 0f       	add	r22, r28
 476:	63 bd       	out	0x23, r22	; 35
 478:	09 c0       	rjmp	.+18     	; 0x48c <MOTOR_speed+0x46>
	}
	else if(temp < 0) {
 47a:	33 23       	and	r19, r19
 47c:	3c f4       	brge	.+14     	; 0x48c <MOTOR_speed+0x46>
		cbi(PORTC, PORTC6);
 47e:	ae 98       	cbi	0x15, 6	; 21
		cbi(PORTC, PORTC2);
 480:	aa 98       	cbi	0x15, 2	; 21
		OCR0 = speed-temp;
 482:	8c 2f       	mov	r24, r28
 484:	86 1b       	sub	r24, r22
 486:	81 bf       	out	0x31, r24	; 49
		OCR2 = speed+temp;
 488:	6c 0f       	add	r22, r28
 48a:	63 bd       	out	0x23, r22	; 35
	}


	
}
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <MOTOR_control>:

void MOTOR_control(const double *SENSOR_DATA, const int Cruze_speed) {
 490:	9c 01       	movw	r18, r24
 492:	cb 01       	movw	r24, r22
		//int temp = SENSOR_DATA[0];
		MOTOR_speed(Cruze_speed,SENSOR_DATA);			
 494:	b9 01       	movw	r22, r18
 496:	d7 cf       	rjmp	.-82     	; 0x446 <MOTOR_speed>
 498:	08 95       	ret

0000049a <init_MCU>:
#ifndef _LINETRACER_MCU_H_
#define _LINETRACER_MCU_H_

/* PORTA initialize*/
void init_MCU(void) {
	DDRA = 0xFF; // 발광부
 49a:	8f ef       	ldi	r24, 0xFF	; 255
 49c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF; // PB4(OC0) = PWM_R , PB7(OC2) = PWM_L
 49e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF; // PC0 = Direction_R (1) , PC2 = Break_R (0) , PC4 = Direction_L (0) , PC6 = Break_L (0)
 4a0:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFE; // PD0 = SW , PD4 = LED0, PD5 = LED1
 4a2:	8e ef       	ldi	r24, 0xFE	; 254
 4a4:	81 bb       	out	0x11, r24	; 17
	
	/* DDRE = 0x0E; // USART RxD0=PE0, TxD0=PE1
				 // encoder_l_A(INT4)=PE6 encoder_l_B(INT5)=PE7, encoder_r_A(INT6)=PE4, encoder_r_B(INT7)=PE5 */
	
	DDRF = 0x00; // 수광부
 4a6:	10 92 61 00 	sts	0x0061, r1
	
	PORTA = 0x00; // IR_sense emitter off
 4aa:	1b ba       	out	0x1b, r1	; 27
	PORTD = 0x00; // LED0,1 off
 4ac:	12 ba       	out	0x12, r1	; 18
	PORTC = 0x45; 
 4ae:	85 e4       	ldi	r24, 0x45	; 69
 4b0:	85 bb       	out	0x15, r24	; 21
 4b2:	08 95       	ret

000004b4 <init_EX_INTERRUPT>:
}

/* external interrupt initialize */
void init_EX_INTERRUPT(void) {
	
	EICRA	= (0<<ISC31) |(0<<ISC30) |(0<<ISC21) |(0<<ISC20) |(0<<ISC11) |(0<<ISC10) |(1<<ISC01) |(0<<ISC00);
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	80 93 6a 00 	sts	0x006A, r24
	EICRB	= (0<<ISC71) |(0<<ISC70) |(0<<ISC61) |(0<<ISC60) |(0<<ISC51) |(0<<ISC50) |(0<<ISC41) |(0<<ISC40);
 4ba:	1a be       	out	0x3a, r1	; 58
	EIMSK	= (0<<INT7 ) |(0<<INT6 ) |(0<<INT5 ) |(0<<INT4 ) |(0<<INT3 ) |(0<<INT2 ) |(0<<INT1 ) |(1<<INT0 );
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	89 bf       	out	0x39, r24	; 57
 4c0:	08 95       	ret

000004c2 <init_ADC>:
void init_ADC(void) {
	
	//ADMUX  = (1<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX4)|(0<<MUX3)|(0<<MUX2) |(0<<MUX1) |(0<<MUX0);
	//ADCSRA = (1<<ADEN) |(0<<ADSC) |(0<<ADFR) |(0<<ADFR)|(0<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0);

	ADMUX = 0xC0; // internal 2.56 voltage reference
 4c2:	80 ec       	ldi	r24, 0xC0	; 192
 4c4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87; // prescaler : 2 division factor
 4c6:	87 e8       	ldi	r24, 0x87	; 135
 4c8:	86 b9       	out	0x06, r24	; 6
 4ca:	08 95       	ret

000004cc <init_PWM>:
}


/* timer counter initialize */
void init_PWM(void) {	
	TCCR0 = 0x6F;
 4cc:	8f e6       	ldi	r24, 0x6F	; 111
 4ce:	83 bf       	out	0x33, r24	; 51
	TCCR2 = 0x6D;
 4d0:	8d e6       	ldi	r24, 0x6D	; 109
 4d2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x00;
 4d4:	12 be       	out	0x32, r1	; 50
	TCNT2 = 0x00;
 4d6:	14 bc       	out	0x24, r1	; 36
	OCR0 = 0xff; //R
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	81 bf       	out	0x31, r24	; 49
	OCR2 = 0xff; //L	
 4dc:	83 bd       	out	0x23, r24	; 35
	TIMSK = 0x00;
 4de:	17 be       	out	0x37, r1	; 55
 4e0:	08 95       	ret

000004e2 <main>:
int RM_speed = 0;
int Cruze_speed = 0x3f;

int main(void)
{
	init_PWM();
 4e2:	f4 df       	rcall	.-24     	; 0x4cc <init_PWM>
	init_MCU();
 4e4:	da df       	rcall	.-76     	; 0x49a <init_MCU>
	init_ADC();
 4e6:	ed df       	rcall	.-38     	; 0x4c2 <init_ADC>
	init_EX_INTERRUPT();
 4e8:	e5 df       	rcall	.-54     	; 0x4b4 <init_EX_INTERRUPT>
	
	sei();
 4ea:	78 94       	sei
			
					////////////////////////////////////////////////////////////////////////////////////
					//-------------------------------------NORM---------------------------------------//
					////////////////////////////////////////////////////////////////////////////////////
					case NORM :
						PORTD = 0x10; // NORM state check
 4ec:	10 e1       	ldi	r17, 0x10	; 16
			
					////////////////////////////////////////////////////////////////////////////////////
					//-------------------------------------WAIT---------------------------------------//
					////////////////////////////////////////////////////////////////////////////////////
					case WAIT :
						PORTD = 0x20; // WAIT check
 4ee:	d0 e2       	ldi	r29, 0x20	; 32
			
					////////////////////////////////////////////////////////////////////////////////////
					//-------------------------------------RUN----------------------------------------//
					////////////////////////////////////////////////////////////////////////////////////
					case RUN :
						PORTD = 0x30; // RUN check						
 4f0:	c0 e3       	ldi	r28, 0x30	; 48
	sei();
	
	while(1)
	{
		
		switch(state) {
 4f2:	80 91 22 01 	lds	r24, 0x0122
 4f6:	90 91 23 01 	lds	r25, 0x0123
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	91 05       	cpc	r25, r1
 4fe:	69 f0       	breq	.+26     	; 0x51a <main+0x38>
 500:	1c f4       	brge	.+6      	; 0x508 <main+0x26>
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	41 f0       	breq	.+16     	; 0x516 <main+0x34>
 506:	f9 cf       	rjmp	.-14     	; 0x4fa <main+0x18>
 508:	82 30       	cpi	r24, 0x02	; 2
 50a:	91 05       	cpc	r25, r1
 50c:	91 f0       	breq	.+36     	; 0x532 <main+0x50>
 50e:	83 30       	cpi	r24, 0x03	; 3
 510:	91 05       	cpc	r25, r1
 512:	89 f0       	breq	.+34     	; 0x536 <main+0x54>
 514:	f2 cf       	rjmp	.-28     	; 0x4fa <main+0x18>
					////////////////////////////////////////////////////////////////////////////////////
					//-------------------------------------IDLE---------------------------------------//
					////////////////////////////////////////////////////////////////////////////////////
					case IDLE :
						PORTD = 0x00; // IDLE state check
 516:	12 ba       	out	0x12, r1	; 18
					break;
 518:	ec cf       	rjmp	.-40     	; 0x4f2 <main+0x10>
			
					////////////////////////////////////////////////////////////////////////////////////
					//-------------------------------------NORM---------------------------------------//
					////////////////////////////////////////////////////////////////////////////////////
					case NORM :
						PORTD = 0x10; // NORM state check
 51a:	12 bb       	out	0x12, r17	; 18
						ADC_GET(ADC_DATA);
 51c:	88 e5       	ldi	r24, 0x58	; 88
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	db dd       	rcall	.-1098   	; 0xd8 <ADC_GET>
						ADC_MAX_MIN(ADC_MAX, ADC_MIN, ADC_DATA);		
 522:	48 e5       	ldi	r20, 0x58	; 88
 524:	51 e0       	ldi	r21, 0x01	; 1
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	71 e0       	ldi	r23, 0x01	; 1
 52a:	88 e4       	ldi	r24, 0x48	; 72
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	90 de       	rcall	.-736    	; 0x250 <ADC_MAX_MIN>

					break;
 530:	e0 cf       	rjmp	.-64     	; 0x4f2 <main+0x10>
			
					////////////////////////////////////////////////////////////////////////////////////
					//-------------------------------------WAIT---------------------------------------//
					////////////////////////////////////////////////////////////////////////////////////
					case WAIT :
						PORTD = 0x20; // WAIT check
 532:	d2 bb       	out	0x12, r29	; 18

					break;	
 534:	de cf       	rjmp	.-68     	; 0x4f2 <main+0x10>
			
					////////////////////////////////////////////////////////////////////////////////////
					//-------------------------------------RUN----------------------------------------//
					////////////////////////////////////////////////////////////////////////////////////
					case RUN :
						PORTD = 0x30; // RUN check						
 536:	c2 bb       	out	0x12, r28	; 18

						ADC_GET(ADC_DATA);
 538:	88 e5       	ldi	r24, 0x58	; 88
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	cd dd       	rcall	.-1126   	; 0xd8 <ADC_GET>
						ADC_NORMALIZE(NORM_DATA, ADC_DATA, ADC_MAX, ADC_MIN);
 53e:	22 e0       	ldi	r18, 0x02	; 2
 540:	31 e0       	ldi	r19, 0x01	; 1
 542:	48 e4       	ldi	r20, 0x48	; 72
 544:	51 e0       	ldi	r21, 0x01	; 1
 546:	68 e5       	ldi	r22, 0x58	; 88
 548:	71 e0       	ldi	r23, 0x01	; 1
 54a:	88 e3       	ldi	r24, 0x38	; 56
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	ae de       	rcall	.-676    	; 0x2ac <ADC_NORMALIZE>
						//MOTER_test(NORM_DATA);
						ADC_WEIGHT(WEIGHT_DATA, NORM_DATA);
 550:	68 e3       	ldi	r22, 0x38	; 56
 552:	71 e0       	ldi	r23, 0x01	; 1
 554:	88 e2       	ldi	r24, 0x28	; 40
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	08 df       	rcall	.-496    	; 0x36a <ADC_WEIGHT>
						ADC_SENCERDATA(SENSOR_DATA, WEIGHT_DATA, NORM_DATA);
 55a:	48 e3       	ldi	r20, 0x38	; 56
 55c:	51 e0       	ldi	r21, 0x01	; 1
 55e:	68 e2       	ldi	r22, 0x28	; 40
 560:	71 e0       	ldi	r23, 0x01	; 1
 562:	84 e2       	ldi	r24, 0x24	; 36
 564:	91 e0       	ldi	r25, 0x01	; 1
 566:	2a df       	rcall	.-428    	; 0x3bc <ADC_SENCERDATA>
						MOTOR_control(SENSOR_DATA, Cruze_speed);						
 568:	60 91 00 01 	lds	r22, 0x0100
 56c:	70 91 01 01 	lds	r23, 0x0101
 570:	84 e2       	ldi	r24, 0x24	; 36
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	8d df       	rcall	.-230    	; 0x490 <MOTOR_control>
				
					break;
 576:	bd cf       	rjmp	.-134    	; 0x4f2 <main+0x10>

00000578 <__vector_1>:
	}
	
}

// State switch
SIGNAL(INT0_vect) {
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	8f 93       	push	r24
 584:	9f 93       	push	r25

	state++;
 586:	80 91 22 01 	lds	r24, 0x0122
 58a:	90 91 23 01 	lds	r25, 0x0123
 58e:	01 96       	adiw	r24, 0x01	; 1
	if(state>3) state = 3;
 590:	84 30       	cpi	r24, 0x04	; 4
 592:	91 05       	cpc	r25, r1
 594:	2c f4       	brge	.+10     	; 0x5a0 <__vector_1+0x28>
}

// State switch
SIGNAL(INT0_vect) {

	state++;
 596:	90 93 23 01 	sts	0x0123, r25
 59a:	80 93 22 01 	sts	0x0122, r24
 59e:	06 c0       	rjmp	.+12     	; 0x5ac <__vector_1+0x34>
	if(state>3) state = 3;
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	90 93 23 01 	sts	0x0123, r25
 5a8:	80 93 22 01 	sts	0x0122, r24
	
}
 5ac:	9f 91       	pop	r25
 5ae:	8f 91       	pop	r24
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <__divsf3>:
 5ba:	0c d0       	rcall	.+24     	; 0x5d4 <__divsf3x>
 5bc:	eb c0       	rjmp	.+470    	; 0x794 <__fp_round>
 5be:	e3 d0       	rcall	.+454    	; 0x786 <__fp_pscB>
 5c0:	40 f0       	brcs	.+16     	; 0x5d2 <__divsf3+0x18>
 5c2:	da d0       	rcall	.+436    	; 0x778 <__fp_pscA>
 5c4:	30 f0       	brcs	.+12     	; 0x5d2 <__divsf3+0x18>
 5c6:	21 f4       	brne	.+8      	; 0x5d0 <__divsf3+0x16>
 5c8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ca:	19 f0       	breq	.+6      	; 0x5d2 <__divsf3+0x18>
 5cc:	cc c0       	rjmp	.+408    	; 0x766 <__fp_inf>
 5ce:	51 11       	cpse	r21, r1
 5d0:	15 c1       	rjmp	.+554    	; 0x7fc <__fp_szero>
 5d2:	cf c0       	rjmp	.+414    	; 0x772 <__fp_nan>

000005d4 <__divsf3x>:
 5d4:	f0 d0       	rcall	.+480    	; 0x7b6 <__fp_split3>
 5d6:	98 f3       	brcs	.-26     	; 0x5be <__divsf3+0x4>

000005d8 <__divsf3_pse>:
 5d8:	99 23       	and	r25, r25
 5da:	c9 f3       	breq	.-14     	; 0x5ce <__divsf3+0x14>
 5dc:	55 23       	and	r21, r21
 5de:	b1 f3       	breq	.-20     	; 0x5cc <__divsf3+0x12>
 5e0:	95 1b       	sub	r25, r21
 5e2:	55 0b       	sbc	r21, r21
 5e4:	bb 27       	eor	r27, r27
 5e6:	aa 27       	eor	r26, r26
 5e8:	62 17       	cp	r22, r18
 5ea:	73 07       	cpc	r23, r19
 5ec:	84 07       	cpc	r24, r20
 5ee:	38 f0       	brcs	.+14     	; 0x5fe <__divsf3_pse+0x26>
 5f0:	9f 5f       	subi	r25, 0xFF	; 255
 5f2:	5f 4f       	sbci	r21, 0xFF	; 255
 5f4:	22 0f       	add	r18, r18
 5f6:	33 1f       	adc	r19, r19
 5f8:	44 1f       	adc	r20, r20
 5fa:	aa 1f       	adc	r26, r26
 5fc:	a9 f3       	breq	.-22     	; 0x5e8 <__divsf3_pse+0x10>
 5fe:	33 d0       	rcall	.+102    	; 0x666 <__divsf3_pse+0x8e>
 600:	0e 2e       	mov	r0, r30
 602:	3a f0       	brmi	.+14     	; 0x612 <__divsf3_pse+0x3a>
 604:	e0 e8       	ldi	r30, 0x80	; 128
 606:	30 d0       	rcall	.+96     	; 0x668 <__divsf3_pse+0x90>
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	e6 95       	lsr	r30
 60e:	00 1c       	adc	r0, r0
 610:	ca f7       	brpl	.-14     	; 0x604 <__divsf3_pse+0x2c>
 612:	29 d0       	rcall	.+82     	; 0x666 <__divsf3_pse+0x8e>
 614:	fe 2f       	mov	r31, r30
 616:	27 d0       	rcall	.+78     	; 0x666 <__divsf3_pse+0x8e>
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	bb 1f       	adc	r27, r27
 620:	26 17       	cp	r18, r22
 622:	37 07       	cpc	r19, r23
 624:	48 07       	cpc	r20, r24
 626:	ab 07       	cpc	r26, r27
 628:	b0 e8       	ldi	r27, 0x80	; 128
 62a:	09 f0       	breq	.+2      	; 0x62e <__divsf3_pse+0x56>
 62c:	bb 0b       	sbc	r27, r27
 62e:	80 2d       	mov	r24, r0
 630:	bf 01       	movw	r22, r30
 632:	ff 27       	eor	r31, r31
 634:	93 58       	subi	r25, 0x83	; 131
 636:	5f 4f       	sbci	r21, 0xFF	; 255
 638:	2a f0       	brmi	.+10     	; 0x644 <__divsf3_pse+0x6c>
 63a:	9e 3f       	cpi	r25, 0xFE	; 254
 63c:	51 05       	cpc	r21, r1
 63e:	68 f0       	brcs	.+26     	; 0x65a <__divsf3_pse+0x82>
 640:	92 c0       	rjmp	.+292    	; 0x766 <__fp_inf>
 642:	dc c0       	rjmp	.+440    	; 0x7fc <__fp_szero>
 644:	5f 3f       	cpi	r21, 0xFF	; 255
 646:	ec f3       	brlt	.-6      	; 0x642 <__divsf3_pse+0x6a>
 648:	98 3e       	cpi	r25, 0xE8	; 232
 64a:	dc f3       	brlt	.-10     	; 0x642 <__divsf3_pse+0x6a>
 64c:	86 95       	lsr	r24
 64e:	77 95       	ror	r23
 650:	67 95       	ror	r22
 652:	b7 95       	ror	r27
 654:	f7 95       	ror	r31
 656:	9f 5f       	subi	r25, 0xFF	; 255
 658:	c9 f7       	brne	.-14     	; 0x64c <__divsf3_pse+0x74>
 65a:	88 0f       	add	r24, r24
 65c:	91 1d       	adc	r25, r1
 65e:	96 95       	lsr	r25
 660:	87 95       	ror	r24
 662:	97 f9       	bld	r25, 7
 664:	08 95       	ret
 666:	e1 e0       	ldi	r30, 0x01	; 1
 668:	66 0f       	add	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	bb 1f       	adc	r27, r27
 670:	62 17       	cp	r22, r18
 672:	73 07       	cpc	r23, r19
 674:	84 07       	cpc	r24, r20
 676:	ba 07       	cpc	r27, r26
 678:	20 f0       	brcs	.+8      	; 0x682 <__divsf3_pse+0xaa>
 67a:	62 1b       	sub	r22, r18
 67c:	73 0b       	sbc	r23, r19
 67e:	84 0b       	sbc	r24, r20
 680:	ba 0b       	sbc	r27, r26
 682:	ee 1f       	adc	r30, r30
 684:	88 f7       	brcc	.-30     	; 0x668 <__divsf3_pse+0x90>
 686:	e0 95       	com	r30
 688:	08 95       	ret

0000068a <__fixsfsi>:
 68a:	04 d0       	rcall	.+8      	; 0x694 <__fixunssfsi>
 68c:	68 94       	set
 68e:	b1 11       	cpse	r27, r1
 690:	b5 c0       	rjmp	.+362    	; 0x7fc <__fp_szero>
 692:	08 95       	ret

00000694 <__fixunssfsi>:
 694:	98 d0       	rcall	.+304    	; 0x7c6 <__fp_splitA>
 696:	88 f0       	brcs	.+34     	; 0x6ba <__fixunssfsi+0x26>
 698:	9f 57       	subi	r25, 0x7F	; 127
 69a:	90 f0       	brcs	.+36     	; 0x6c0 <__fixunssfsi+0x2c>
 69c:	b9 2f       	mov	r27, r25
 69e:	99 27       	eor	r25, r25
 6a0:	b7 51       	subi	r27, 0x17	; 23
 6a2:	a0 f0       	brcs	.+40     	; 0x6cc <__fixunssfsi+0x38>
 6a4:	d1 f0       	breq	.+52     	; 0x6da <__fixunssfsi+0x46>
 6a6:	66 0f       	add	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	88 1f       	adc	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	1a f0       	brmi	.+6      	; 0x6b6 <__fixunssfsi+0x22>
 6b0:	ba 95       	dec	r27
 6b2:	c9 f7       	brne	.-14     	; 0x6a6 <__fixunssfsi+0x12>
 6b4:	12 c0       	rjmp	.+36     	; 0x6da <__fixunssfsi+0x46>
 6b6:	b1 30       	cpi	r27, 0x01	; 1
 6b8:	81 f0       	breq	.+32     	; 0x6da <__fixunssfsi+0x46>
 6ba:	9f d0       	rcall	.+318    	; 0x7fa <__fp_zero>
 6bc:	b1 e0       	ldi	r27, 0x01	; 1
 6be:	08 95       	ret
 6c0:	9c c0       	rjmp	.+312    	; 0x7fa <__fp_zero>
 6c2:	67 2f       	mov	r22, r23
 6c4:	78 2f       	mov	r23, r24
 6c6:	88 27       	eor	r24, r24
 6c8:	b8 5f       	subi	r27, 0xF8	; 248
 6ca:	39 f0       	breq	.+14     	; 0x6da <__fixunssfsi+0x46>
 6cc:	b9 3f       	cpi	r27, 0xF9	; 249
 6ce:	cc f3       	brlt	.-14     	; 0x6c2 <__fixunssfsi+0x2e>
 6d0:	86 95       	lsr	r24
 6d2:	77 95       	ror	r23
 6d4:	67 95       	ror	r22
 6d6:	b3 95       	inc	r27
 6d8:	d9 f7       	brne	.-10     	; 0x6d0 <__fixunssfsi+0x3c>
 6da:	3e f4       	brtc	.+14     	; 0x6ea <__fixunssfsi+0x56>
 6dc:	90 95       	com	r25
 6de:	80 95       	com	r24
 6e0:	70 95       	com	r23
 6e2:	61 95       	neg	r22
 6e4:	7f 4f       	sbci	r23, 0xFF	; 255
 6e6:	8f 4f       	sbci	r24, 0xFF	; 255
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	08 95       	ret

000006ec <__floatunsisf>:
 6ec:	e8 94       	clt
 6ee:	09 c0       	rjmp	.+18     	; 0x702 <__floatsisf+0x12>

000006f0 <__floatsisf>:
 6f0:	97 fb       	bst	r25, 7
 6f2:	3e f4       	brtc	.+14     	; 0x702 <__floatsisf+0x12>
 6f4:	90 95       	com	r25
 6f6:	80 95       	com	r24
 6f8:	70 95       	com	r23
 6fa:	61 95       	neg	r22
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	99 23       	and	r25, r25
 704:	a9 f0       	breq	.+42     	; 0x730 <__floatsisf+0x40>
 706:	f9 2f       	mov	r31, r25
 708:	96 e9       	ldi	r25, 0x96	; 150
 70a:	bb 27       	eor	r27, r27
 70c:	93 95       	inc	r25
 70e:	f6 95       	lsr	r31
 710:	87 95       	ror	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	b7 95       	ror	r27
 718:	f1 11       	cpse	r31, r1
 71a:	f8 cf       	rjmp	.-16     	; 0x70c <__floatsisf+0x1c>
 71c:	fa f4       	brpl	.+62     	; 0x75c <__floatsisf+0x6c>
 71e:	bb 0f       	add	r27, r27
 720:	11 f4       	brne	.+4      	; 0x726 <__floatsisf+0x36>
 722:	60 ff       	sbrs	r22, 0
 724:	1b c0       	rjmp	.+54     	; 0x75c <__floatsisf+0x6c>
 726:	6f 5f       	subi	r22, 0xFF	; 255
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	8f 4f       	sbci	r24, 0xFF	; 255
 72c:	9f 4f       	sbci	r25, 0xFF	; 255
 72e:	16 c0       	rjmp	.+44     	; 0x75c <__floatsisf+0x6c>
 730:	88 23       	and	r24, r24
 732:	11 f0       	breq	.+4      	; 0x738 <__floatsisf+0x48>
 734:	96 e9       	ldi	r25, 0x96	; 150
 736:	11 c0       	rjmp	.+34     	; 0x75a <__floatsisf+0x6a>
 738:	77 23       	and	r23, r23
 73a:	21 f0       	breq	.+8      	; 0x744 <__floatsisf+0x54>
 73c:	9e e8       	ldi	r25, 0x8E	; 142
 73e:	87 2f       	mov	r24, r23
 740:	76 2f       	mov	r23, r22
 742:	05 c0       	rjmp	.+10     	; 0x74e <__floatsisf+0x5e>
 744:	66 23       	and	r22, r22
 746:	71 f0       	breq	.+28     	; 0x764 <__floatsisf+0x74>
 748:	96 e8       	ldi	r25, 0x86	; 134
 74a:	86 2f       	mov	r24, r22
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	2a f0       	brmi	.+10     	; 0x75c <__floatsisf+0x6c>
 752:	9a 95       	dec	r25
 754:	66 0f       	add	r22, r22
 756:	77 1f       	adc	r23, r23
 758:	88 1f       	adc	r24, r24
 75a:	da f7       	brpl	.-10     	; 0x752 <__floatsisf+0x62>
 75c:	88 0f       	add	r24, r24
 75e:	96 95       	lsr	r25
 760:	87 95       	ror	r24
 762:	97 f9       	bld	r25, 7
 764:	08 95       	ret

00000766 <__fp_inf>:
 766:	97 f9       	bld	r25, 7
 768:	9f 67       	ori	r25, 0x7F	; 127
 76a:	80 e8       	ldi	r24, 0x80	; 128
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	08 95       	ret

00000772 <__fp_nan>:
 772:	9f ef       	ldi	r25, 0xFF	; 255
 774:	80 ec       	ldi	r24, 0xC0	; 192
 776:	08 95       	ret

00000778 <__fp_pscA>:
 778:	00 24       	eor	r0, r0
 77a:	0a 94       	dec	r0
 77c:	16 16       	cp	r1, r22
 77e:	17 06       	cpc	r1, r23
 780:	18 06       	cpc	r1, r24
 782:	09 06       	cpc	r0, r25
 784:	08 95       	ret

00000786 <__fp_pscB>:
 786:	00 24       	eor	r0, r0
 788:	0a 94       	dec	r0
 78a:	12 16       	cp	r1, r18
 78c:	13 06       	cpc	r1, r19
 78e:	14 06       	cpc	r1, r20
 790:	05 06       	cpc	r0, r21
 792:	08 95       	ret

00000794 <__fp_round>:
 794:	09 2e       	mov	r0, r25
 796:	03 94       	inc	r0
 798:	00 0c       	add	r0, r0
 79a:	11 f4       	brne	.+4      	; 0x7a0 <__fp_round+0xc>
 79c:	88 23       	and	r24, r24
 79e:	52 f0       	brmi	.+20     	; 0x7b4 <__fp_round+0x20>
 7a0:	bb 0f       	add	r27, r27
 7a2:	40 f4       	brcc	.+16     	; 0x7b4 <__fp_round+0x20>
 7a4:	bf 2b       	or	r27, r31
 7a6:	11 f4       	brne	.+4      	; 0x7ac <__fp_round+0x18>
 7a8:	60 ff       	sbrs	r22, 0
 7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__fp_round+0x20>
 7ac:	6f 5f       	subi	r22, 0xFF	; 255
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	8f 4f       	sbci	r24, 0xFF	; 255
 7b2:	9f 4f       	sbci	r25, 0xFF	; 255
 7b4:	08 95       	ret

000007b6 <__fp_split3>:
 7b6:	57 fd       	sbrc	r21, 7
 7b8:	90 58       	subi	r25, 0x80	; 128
 7ba:	44 0f       	add	r20, r20
 7bc:	55 1f       	adc	r21, r21
 7be:	59 f0       	breq	.+22     	; 0x7d6 <__fp_splitA+0x10>
 7c0:	5f 3f       	cpi	r21, 0xFF	; 255
 7c2:	71 f0       	breq	.+28     	; 0x7e0 <__fp_splitA+0x1a>
 7c4:	47 95       	ror	r20

000007c6 <__fp_splitA>:
 7c6:	88 0f       	add	r24, r24
 7c8:	97 fb       	bst	r25, 7
 7ca:	99 1f       	adc	r25, r25
 7cc:	61 f0       	breq	.+24     	; 0x7e6 <__fp_splitA+0x20>
 7ce:	9f 3f       	cpi	r25, 0xFF	; 255
 7d0:	79 f0       	breq	.+30     	; 0x7f0 <__fp_splitA+0x2a>
 7d2:	87 95       	ror	r24
 7d4:	08 95       	ret
 7d6:	12 16       	cp	r1, r18
 7d8:	13 06       	cpc	r1, r19
 7da:	14 06       	cpc	r1, r20
 7dc:	55 1f       	adc	r21, r21
 7de:	f2 cf       	rjmp	.-28     	; 0x7c4 <__fp_split3+0xe>
 7e0:	46 95       	lsr	r20
 7e2:	f1 df       	rcall	.-30     	; 0x7c6 <__fp_splitA>
 7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <__fp_splitA+0x30>
 7e6:	16 16       	cp	r1, r22
 7e8:	17 06       	cpc	r1, r23
 7ea:	18 06       	cpc	r1, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	f1 cf       	rjmp	.-30     	; 0x7d2 <__fp_splitA+0xc>
 7f0:	86 95       	lsr	r24
 7f2:	71 05       	cpc	r23, r1
 7f4:	61 05       	cpc	r22, r1
 7f6:	08 94       	sec
 7f8:	08 95       	ret

000007fa <__fp_zero>:
 7fa:	e8 94       	clt

000007fc <__fp_szero>:
 7fc:	bb 27       	eor	r27, r27
 7fe:	66 27       	eor	r22, r22
 800:	77 27       	eor	r23, r23
 802:	cb 01       	movw	r24, r22
 804:	97 f9       	bld	r25, 7
 806:	08 95       	ret

00000808 <__mulsf3>:
 808:	0b d0       	rcall	.+22     	; 0x820 <__mulsf3x>
 80a:	c4 cf       	rjmp	.-120    	; 0x794 <__fp_round>
 80c:	b5 df       	rcall	.-150    	; 0x778 <__fp_pscA>
 80e:	28 f0       	brcs	.+10     	; 0x81a <__mulsf3+0x12>
 810:	ba df       	rcall	.-140    	; 0x786 <__fp_pscB>
 812:	18 f0       	brcs	.+6      	; 0x81a <__mulsf3+0x12>
 814:	95 23       	and	r25, r21
 816:	09 f0       	breq	.+2      	; 0x81a <__mulsf3+0x12>
 818:	a6 cf       	rjmp	.-180    	; 0x766 <__fp_inf>
 81a:	ab cf       	rjmp	.-170    	; 0x772 <__fp_nan>
 81c:	11 24       	eor	r1, r1
 81e:	ee cf       	rjmp	.-36     	; 0x7fc <__fp_szero>

00000820 <__mulsf3x>:
 820:	ca df       	rcall	.-108    	; 0x7b6 <__fp_split3>
 822:	a0 f3       	brcs	.-24     	; 0x80c <__mulsf3+0x4>

00000824 <__mulsf3_pse>:
 824:	95 9f       	mul	r25, r21
 826:	d1 f3       	breq	.-12     	; 0x81c <__mulsf3+0x14>
 828:	95 0f       	add	r25, r21
 82a:	50 e0       	ldi	r21, 0x00	; 0
 82c:	55 1f       	adc	r21, r21
 82e:	62 9f       	mul	r22, r18
 830:	f0 01       	movw	r30, r0
 832:	72 9f       	mul	r23, r18
 834:	bb 27       	eor	r27, r27
 836:	f0 0d       	add	r31, r0
 838:	b1 1d       	adc	r27, r1
 83a:	63 9f       	mul	r22, r19
 83c:	aa 27       	eor	r26, r26
 83e:	f0 0d       	add	r31, r0
 840:	b1 1d       	adc	r27, r1
 842:	aa 1f       	adc	r26, r26
 844:	64 9f       	mul	r22, r20
 846:	66 27       	eor	r22, r22
 848:	b0 0d       	add	r27, r0
 84a:	a1 1d       	adc	r26, r1
 84c:	66 1f       	adc	r22, r22
 84e:	82 9f       	mul	r24, r18
 850:	22 27       	eor	r18, r18
 852:	b0 0d       	add	r27, r0
 854:	a1 1d       	adc	r26, r1
 856:	62 1f       	adc	r22, r18
 858:	73 9f       	mul	r23, r19
 85a:	b0 0d       	add	r27, r0
 85c:	a1 1d       	adc	r26, r1
 85e:	62 1f       	adc	r22, r18
 860:	83 9f       	mul	r24, r19
 862:	a0 0d       	add	r26, r0
 864:	61 1d       	adc	r22, r1
 866:	22 1f       	adc	r18, r18
 868:	74 9f       	mul	r23, r20
 86a:	33 27       	eor	r19, r19
 86c:	a0 0d       	add	r26, r0
 86e:	61 1d       	adc	r22, r1
 870:	23 1f       	adc	r18, r19
 872:	84 9f       	mul	r24, r20
 874:	60 0d       	add	r22, r0
 876:	21 1d       	adc	r18, r1
 878:	82 2f       	mov	r24, r18
 87a:	76 2f       	mov	r23, r22
 87c:	6a 2f       	mov	r22, r26
 87e:	11 24       	eor	r1, r1
 880:	9f 57       	subi	r25, 0x7F	; 127
 882:	50 40       	sbci	r21, 0x00	; 0
 884:	8a f0       	brmi	.+34     	; 0x8a8 <__mulsf3_pse+0x84>
 886:	e1 f0       	breq	.+56     	; 0x8c0 <__mulsf3_pse+0x9c>
 888:	88 23       	and	r24, r24
 88a:	4a f0       	brmi	.+18     	; 0x89e <__mulsf3_pse+0x7a>
 88c:	ee 0f       	add	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	bb 1f       	adc	r27, r27
 892:	66 1f       	adc	r22, r22
 894:	77 1f       	adc	r23, r23
 896:	88 1f       	adc	r24, r24
 898:	91 50       	subi	r25, 0x01	; 1
 89a:	50 40       	sbci	r21, 0x00	; 0
 89c:	a9 f7       	brne	.-22     	; 0x888 <__mulsf3_pse+0x64>
 89e:	9e 3f       	cpi	r25, 0xFE	; 254
 8a0:	51 05       	cpc	r21, r1
 8a2:	70 f0       	brcs	.+28     	; 0x8c0 <__mulsf3_pse+0x9c>
 8a4:	60 cf       	rjmp	.-320    	; 0x766 <__fp_inf>
 8a6:	aa cf       	rjmp	.-172    	; 0x7fc <__fp_szero>
 8a8:	5f 3f       	cpi	r21, 0xFF	; 255
 8aa:	ec f3       	brlt	.-6      	; 0x8a6 <__mulsf3_pse+0x82>
 8ac:	98 3e       	cpi	r25, 0xE8	; 232
 8ae:	dc f3       	brlt	.-10     	; 0x8a6 <__mulsf3_pse+0x82>
 8b0:	86 95       	lsr	r24
 8b2:	77 95       	ror	r23
 8b4:	67 95       	ror	r22
 8b6:	b7 95       	ror	r27
 8b8:	f7 95       	ror	r31
 8ba:	e7 95       	ror	r30
 8bc:	9f 5f       	subi	r25, 0xFF	; 255
 8be:	c1 f7       	brne	.-16     	; 0x8b0 <__mulsf3_pse+0x8c>
 8c0:	fe 2b       	or	r31, r30
 8c2:	88 0f       	add	r24, r24
 8c4:	91 1d       	adc	r25, r1
 8c6:	96 95       	lsr	r25
 8c8:	87 95       	ror	r24
 8ca:	97 f9       	bld	r25, 7
 8cc:	08 95       	ret

000008ce <__divmodhi4>:
 8ce:	97 fb       	bst	r25, 7
 8d0:	07 2e       	mov	r0, r23
 8d2:	16 f4       	brtc	.+4      	; 0x8d8 <__divmodhi4+0xa>
 8d4:	00 94       	com	r0
 8d6:	06 d0       	rcall	.+12     	; 0x8e4 <__divmodhi4_neg1>
 8d8:	77 fd       	sbrc	r23, 7
 8da:	08 d0       	rcall	.+16     	; 0x8ec <__divmodhi4_neg2>
 8dc:	11 d0       	rcall	.+34     	; 0x900 <__udivmodhi4>
 8de:	07 fc       	sbrc	r0, 7
 8e0:	05 d0       	rcall	.+10     	; 0x8ec <__divmodhi4_neg2>
 8e2:	3e f4       	brtc	.+14     	; 0x8f2 <__divmodhi4_exit>

000008e4 <__divmodhi4_neg1>:
 8e4:	90 95       	com	r25
 8e6:	81 95       	neg	r24
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	08 95       	ret

000008ec <__divmodhi4_neg2>:
 8ec:	70 95       	com	r23
 8ee:	61 95       	neg	r22
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255

000008f2 <__divmodhi4_exit>:
 8f2:	08 95       	ret

000008f4 <__tablejump2__>:
 8f4:	ee 0f       	add	r30, r30
 8f6:	ff 1f       	adc	r31, r31

000008f8 <__tablejump__>:
 8f8:	05 90       	lpm	r0, Z+
 8fa:	f4 91       	lpm	r31, Z
 8fc:	e0 2d       	mov	r30, r0
 8fe:	09 94       	ijmp

00000900 <__udivmodhi4>:
 900:	aa 1b       	sub	r26, r26
 902:	bb 1b       	sub	r27, r27
 904:	51 e1       	ldi	r21, 0x11	; 17
 906:	07 c0       	rjmp	.+14     	; 0x916 <__udivmodhi4_ep>

00000908 <__udivmodhi4_loop>:
 908:	aa 1f       	adc	r26, r26
 90a:	bb 1f       	adc	r27, r27
 90c:	a6 17       	cp	r26, r22
 90e:	b7 07       	cpc	r27, r23
 910:	10 f0       	brcs	.+4      	; 0x916 <__udivmodhi4_ep>
 912:	a6 1b       	sub	r26, r22
 914:	b7 0b       	sbc	r27, r23

00000916 <__udivmodhi4_ep>:
 916:	88 1f       	adc	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	5a 95       	dec	r21
 91c:	a9 f7       	brne	.-22     	; 0x908 <__udivmodhi4_loop>
 91e:	80 95       	com	r24
 920:	90 95       	com	r25
 922:	bc 01       	movw	r22, r24
 924:	cd 01       	movw	r24, r26
 926:	08 95       	ret

00000928 <_exit>:
 928:	f8 94       	cli

0000092a <__stop_program>:
 92a:	ff cf       	rjmp	.-2      	; 0x92a <__stop_program>
