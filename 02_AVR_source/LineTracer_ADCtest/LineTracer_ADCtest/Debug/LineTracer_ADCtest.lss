
LineTracer_ADCtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000006ea  0000077e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800110  00800110  0000078e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000323  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000136  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b4  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d2  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000045e  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	50 c0       	rjmp	.+160    	; 0xd6 <__bad_interrupt>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	98 00       	.word	0x0098	; ????
  8e:	a6 00       	.word	0x00a6	; ????
  90:	b4 00       	.word	0x00b4	; ????
  92:	c2 00       	.word	0x00c2	; ????
  94:	d0 00       	.word	0x00d0	; ????
  96:	de 00       	.word	0x00de	; ????
  98:	ec 00       	.word	0x00ec	; ????
  9a:	fa 00       	.word	0x00fa	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e1       	ldi	r29, 0x10	; 16
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	ea ee       	ldi	r30, 0xEA	; 234
  b0:	f6 e0       	ldi	r31, 0x06	; 6
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a0 e1       	ldi	r26, 0x10	; 16
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a0 34       	cpi	r26, 0x40	; 64
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	59 d1       	rcall	.+690    	; 0x386 <main>
  d4:	08 c3       	rjmp	.+1552   	; 0x6e6 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <ADC_GET>:
	}

	return 0;
}

void ADC_GET(int *ADC_DATA) {
  d8:	af 92       	push	r10
  da:	bf 92       	push	r11
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	5c 01       	movw	r10, r24
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_6---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 6 :
			PORTE = 0x40;
  f0:	68 94       	set
  f2:	dd 24       	eor	r13, r13
  f4:	d6 f8       	bld	r13, 6

			ADC_DATA[6] = ADC;
			
			PORTE = 0x00;

			ADMUX = 0x07; // prepare for ADC_7
  f6:	0f 2e       	mov	r0, r31
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	ef 2e       	mov	r14, r31
  fc:	f0 2d       	mov	r31, r0

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_5---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 5 :
			PORTE = 0x20;
  fe:	68 94       	set
 100:	ff 24       	eor	r15, r15
 102:	f5 f8       	bld	r15, 5

			ADC_DATA[5] = ADC;
			
			PORTE = 0x00;

			ADMUX = 0x06; // prepare for ADC_6
 104:	06 e0       	ldi	r16, 0x06	; 6
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_4---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 4 :

			PORTE = 0x10;
 106:	10 e1       	ldi	r17, 0x10	; 16

			ADC_DATA[4] = ADC;
			
			PORTE = 0x00;

			ADMUX = 0x05; // prepare for ADC_5
 108:	d5 e0       	ldi	r29, 0x05	; 5

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_3---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 3 :
			PORTE = 0x08;
 10a:	c8 e0       	ldi	r28, 0x08	; 8

			ADC_DATA[3] = ADC;
			
			PORTE = 0x00;

			ADMUX = 0x04; // prepare for ADC_4
 10c:	a4 e0       	ldi	r26, 0x04	; 4

			ADC_DATA[2] = ADC;
			
			PORTE = 0x00;

			ADMUX = 0x03; // prepare for ADC_3
 10e:	b3 e0       	ldi	r27, 0x03	; 3

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_1---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :
			PORTE = 0x02;
 110:	72 e0       	ldi	r23, 0x02	; 2
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_0---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 0 :		
			
			PORTE = 0x01;
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	02 c0       	rjmp	.+4      	; 0x11a <ADC_GET+0x42>
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	a9 01       	movw	r20, r18
 11c:	41 50       	subi	r20, 0x01	; 1
 11e:	51 09       	sbc	r21, r1
	
	int i=0;
		
	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		switch(i) {
 120:	48 30       	cpi	r20, 0x08	; 8
 122:	51 05       	cpc	r21, r1
 124:	08 f0       	brcs	.+2      	; 0x128 <ADC_GET+0x50>
 126:	75 c0       	rjmp	.+234    	; 0x212 <ADC_GET+0x13a>
 128:	4a 5b       	subi	r20, 0xBA	; 186
 12a:	5f 4f       	sbci	r21, 0xFF	; 255
 12c:	fa 01       	movw	r30, r20
 12e:	d5 c2       	rjmp	.+1450   	; 0x6da <__tablejump2__>
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_0---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 0 :		
			
			PORTE = 0x01;
 130:	63 b9       	out	0x03, r22	; 3

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 132:	86 b1       	in	r24, 0x06	; 6
 134:	80 6c       	ori	r24, 0xC0	; 192
 136:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 138:	34 9b       	sbis	0x06, 4	; 6
 13a:	fe cf       	rjmp	.-4      	; 0x138 <ADC_GET+0x60>

			ADC_DATA[0] = ADC;
 13c:	84 b1       	in	r24, 0x04	; 4
 13e:	95 b1       	in	r25, 0x05	; 5
 140:	f5 01       	movw	r30, r10
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
			
			PORTE = 0x00;
 146:	13 b8       	out	0x03, r1	; 3

			ADMUX = 0x01; // prepare for ADC_1
 148:	67 b9       	out	0x07, r22	; 7

			break;
 14a:	e5 cf       	rjmp	.-54     	; 0x116 <ADC_GET+0x3e>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_1---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :
			PORTE = 0x02;
 14c:	73 b9       	out	0x03, r23	; 3

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 14e:	86 b1       	in	r24, 0x06	; 6
 150:	80 6c       	ori	r24, 0xC0	; 192
 152:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 154:	34 9b       	sbis	0x06, 4	; 6
 156:	fe cf       	rjmp	.-4      	; 0x154 <ADC_GET+0x7c>

			ADC_DATA[1] = ADC;
 158:	84 b1       	in	r24, 0x04	; 4
 15a:	95 b1       	in	r25, 0x05	; 5
 15c:	f5 01       	movw	r30, r10
 15e:	93 83       	std	Z+3, r25	; 0x03
 160:	82 83       	std	Z+2, r24	; 0x02
			
			PORTE = 0x00;
 162:	13 b8       	out	0x03, r1	; 3

			ADMUX = 0x02; // prepare for ADC_2
 164:	77 b9       	out	0x07, r23	; 7

			break;
 166:	d7 cf       	rjmp	.-82     	; 0x116 <ADC_GET+0x3e>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_2---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 2 :
			PORTE = 0x04;
 168:	a3 b9       	out	0x03, r26	; 3

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 16a:	86 b1       	in	r24, 0x06	; 6
 16c:	80 6c       	ori	r24, 0xC0	; 192
 16e:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 170:	34 9b       	sbis	0x06, 4	; 6
 172:	fe cf       	rjmp	.-4      	; 0x170 <ADC_GET+0x98>

			ADC_DATA[2] = ADC;
 174:	84 b1       	in	r24, 0x04	; 4
 176:	95 b1       	in	r25, 0x05	; 5
 178:	f5 01       	movw	r30, r10
 17a:	95 83       	std	Z+5, r25	; 0x05
 17c:	84 83       	std	Z+4, r24	; 0x04
			
			PORTE = 0x00;
 17e:	13 b8       	out	0x03, r1	; 3

			ADMUX = 0x03; // prepare for ADC_3
 180:	b7 b9       	out	0x07, r27	; 7

			break;
 182:	c9 cf       	rjmp	.-110    	; 0x116 <ADC_GET+0x3e>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_3---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 3 :
			PORTE = 0x08;
 184:	c3 b9       	out	0x03, r28	; 3

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 186:	86 b1       	in	r24, 0x06	; 6
 188:	80 6c       	ori	r24, 0xC0	; 192
 18a:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 18c:	34 9b       	sbis	0x06, 4	; 6
 18e:	fe cf       	rjmp	.-4      	; 0x18c <ADC_GET+0xb4>

			ADC_DATA[3] = ADC;
 190:	84 b1       	in	r24, 0x04	; 4
 192:	95 b1       	in	r25, 0x05	; 5
 194:	f5 01       	movw	r30, r10
 196:	97 83       	std	Z+7, r25	; 0x07
 198:	86 83       	std	Z+6, r24	; 0x06
			
			PORTE = 0x00;
 19a:	13 b8       	out	0x03, r1	; 3

			ADMUX = 0x04; // prepare for ADC_4
 19c:	a7 b9       	out	0x07, r26	; 7

			break;
 19e:	bb cf       	rjmp	.-138    	; 0x116 <ADC_GET+0x3e>
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_4---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 4 :

			PORTE = 0x10;
 1a0:	13 b9       	out	0x03, r17	; 3

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1a2:	86 b1       	in	r24, 0x06	; 6
 1a4:	80 6c       	ori	r24, 0xC0	; 192
 1a6:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1a8:	34 9b       	sbis	0x06, 4	; 6
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <ADC_GET+0xd0>

			ADC_DATA[4] = ADC;
 1ac:	84 b1       	in	r24, 0x04	; 4
 1ae:	95 b1       	in	r25, 0x05	; 5
 1b0:	f5 01       	movw	r30, r10
 1b2:	91 87       	std	Z+9, r25	; 0x09
 1b4:	80 87       	std	Z+8, r24	; 0x08
			
			PORTE = 0x00;
 1b6:	13 b8       	out	0x03, r1	; 3

			ADMUX = 0x05; // prepare for ADC_5
 1b8:	d7 b9       	out	0x07, r29	; 7

			break;
 1ba:	ad cf       	rjmp	.-166    	; 0x116 <ADC_GET+0x3e>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_5---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 5 :
			PORTE = 0x20;
 1bc:	f3 b8       	out	0x03, r15	; 3

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1be:	86 b1       	in	r24, 0x06	; 6
 1c0:	80 6c       	ori	r24, 0xC0	; 192
 1c2:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1c4:	34 9b       	sbis	0x06, 4	; 6
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <ADC_GET+0xec>

			ADC_DATA[5] = ADC;
 1c8:	84 b1       	in	r24, 0x04	; 4
 1ca:	95 b1       	in	r25, 0x05	; 5
 1cc:	f5 01       	movw	r30, r10
 1ce:	93 87       	std	Z+11, r25	; 0x0b
 1d0:	82 87       	std	Z+10, r24	; 0x0a
			
			PORTE = 0x00;
 1d2:	13 b8       	out	0x03, r1	; 3

			ADMUX = 0x06; // prepare for ADC_6
 1d4:	07 b9       	out	0x07, r16	; 7

			break;
 1d6:	9f cf       	rjmp	.-194    	; 0x116 <ADC_GET+0x3e>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_6---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 6 :
			PORTE = 0x40;
 1d8:	d3 b8       	out	0x03, r13	; 3

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1da:	86 b1       	in	r24, 0x06	; 6
 1dc:	80 6c       	ori	r24, 0xC0	; 192
 1de:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1e0:	34 9b       	sbis	0x06, 4	; 6
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <ADC_GET+0x108>

			ADC_DATA[6] = ADC;
 1e4:	84 b1       	in	r24, 0x04	; 4
 1e6:	95 b1       	in	r25, 0x05	; 5
 1e8:	f5 01       	movw	r30, r10
 1ea:	95 87       	std	Z+13, r25	; 0x0d
 1ec:	84 87       	std	Z+12, r24	; 0x0c
			
			PORTE = 0x00;
 1ee:	13 b8       	out	0x03, r1	; 3

			ADMUX = 0x07; // prepare for ADC_7
 1f0:	e7 b8       	out	0x07, r14	; 7

			break;
 1f2:	91 cf       	rjmp	.-222    	; 0x116 <ADC_GET+0x3e>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_7---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 7 :
			PORTE = 0x80;
 1f4:	80 e8       	ldi	r24, 0x80	; 128
 1f6:	83 b9       	out	0x03, r24	; 3

			ADCSRA |= 0xC0; // ADEN=1, ADSC=1
 1f8:	86 b1       	in	r24, 0x06	; 6
 1fa:	80 6c       	ori	r24, 0xC0	; 192
 1fc:	86 b9       	out	0x06, r24	; 6
			while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
 1fe:	34 9b       	sbis	0x06, 4	; 6
 200:	fe cf       	rjmp	.-4      	; 0x1fe <ADC_GET+0x126>

			ADC_DATA[7] = ADC;
 202:	84 b1       	in	r24, 0x04	; 4
 204:	95 b1       	in	r25, 0x05	; 5
 206:	f5 01       	movw	r30, r10
 208:	97 87       	std	Z+15, r25	; 0x0f
 20a:	86 87       	std	Z+14, r24	; 0x0e
			
			PORTE = 0x00;
 20c:	13 b8       	out	0x03, r1	; 3
			
			ADMUX = 0x00; // prepare for ADC_0
 20e:	17 b8       	out	0x07, r1	; 7
 210:	04 c0       	rjmp	.+8      	; 0x21a <ADC_GET+0x142>
	//------------IR order-----------//
	// 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 //
	
	int i=0;
		
	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 212:	28 30       	cpi	r18, 0x08	; 8
 214:	31 05       	cpc	r19, r1
 216:	0c f4       	brge	.+2      	; 0x21a <ADC_GET+0x142>
 218:	7e cf       	rjmp	.-260    	; 0x116 <ADC_GET+0x3e>

		}

	}

}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	df 90       	pop	r13
 228:	bf 90       	pop	r11
 22a:	af 90       	pop	r10
 22c:	08 95       	ret

0000022e <ADC_MAX_MIN>:

// Get ADC max and min value from ADC_DATA[i]
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA) {
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
 238:	06 2f       	mov	r16, r22
 23a:	17 2f       	mov	r17, r23
 23c:	e4 2f       	mov	r30, r20
 23e:	f5 2f       	mov	r31, r21

	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	af 01       	movw	r20, r30
		
		if( ADC_MAX[i] < ADC_DATA[i] ) // ADC_MAX
 246:	20 81       	ld	r18, Z
 248:	31 81       	ldd	r19, Z+1	; 0x01
 24a:	68 81       	ld	r22, Y
 24c:	79 81       	ldd	r23, Y+1	; 0x01
 24e:	62 17       	cp	r22, r18
 250:	73 07       	cpc	r23, r19
 252:	14 f4       	brge	.+4      	; 0x258 <ADC_MAX_MIN+0x2a>
		ADC_MAX[i] = ADC_DATA[i];
 254:	39 83       	std	Y+1, r19	; 0x01
 256:	28 83       	st	Y, r18
		
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
 258:	da 01       	movw	r26, r20
 25a:	2d 91       	ld	r18, X+
 25c:	3c 91       	ld	r19, X
 25e:	32 96       	adiw	r30, 0x02	; 2
 260:	d8 01       	movw	r26, r16
 262:	4d 91       	ld	r20, X+
 264:	5c 91       	ld	r21, X
 266:	11 97       	sbiw	r26, 0x01	; 1
 268:	24 17       	cp	r18, r20
 26a:	35 07       	cpc	r19, r21
 26c:	14 f4       	brge	.+4      	; 0x272 <ADC_MAX_MIN+0x44>
		ADC_MIN[i] = ADC_DATA[i];
 26e:	2d 93       	st	X+, r18
 270:	3c 93       	st	X, r19
// Get ADC max and min value from ADC_DATA[i]
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA) {

	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	22 96       	adiw	r28, 0x02	; 2
 276:	0e 5f       	subi	r16, 0xFE	; 254
 278:	1f 4f       	sbci	r17, 0xFF	; 255
 27a:	88 30       	cpi	r24, 0x08	; 8
 27c:	91 05       	cpc	r25, r1
 27e:	11 f7       	brne	.-60     	; 0x244 <ADC_MAX_MIN+0x16>
		
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
		ADC_MIN[i] = ADC_DATA[i];
		
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <ADC_NORMALIZE>:


// Get normalized ADC value (white base / black line / resolution=100)
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN) {
 28a:	2f 92       	push	r2
 28c:	3f 92       	push	r3
 28e:	4f 92       	push	r4
 290:	5f 92       	push	r5
 292:	6f 92       	push	r6
 294:	7f 92       	push	r7
 296:	8f 92       	push	r8
 298:	9f 92       	push	r9
 29a:	af 92       	push	r10
 29c:	bf 92       	push	r11
 29e:	cf 92       	push	r12
 2a0:	df 92       	push	r13
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	a4 2e       	mov	r10, r20
 2b0:	b5 2e       	mov	r11, r21
 2b2:	c6 2e       	mov	r12, r22
 2b4:	d7 2e       	mov	r13, r23
 2b6:	e2 2e       	mov	r14, r18
 2b8:	f3 2e       	mov	r15, r19
 2ba:	4c 01       	movw	r8, r24
	
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
 2be:	d0 e0       	ldi	r29, 0x00	; 0

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
 2c0:	f5 01       	movw	r30, r10
 2c2:	01 91       	ld	r16, Z+
 2c4:	11 91       	ld	r17, Z+
 2c6:	5f 01       	movw	r10, r30
 2c8:	f6 01       	movw	r30, r12
 2ca:	81 91       	ld	r24, Z+
 2cc:	91 91       	ld	r25, Z+
 2ce:	6f 01       	movw	r12, r30
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
 2d0:	f7 01       	movw	r30, r14
 2d2:	21 90       	ld	r2, Z+
 2d4:	31 90       	ld	r3, Z+
 2d6:	7f 01       	movw	r14, r30
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
 2d8:	b8 01       	movw	r22, r16
 2da:	68 1b       	sub	r22, r24
 2dc:	79 0b       	sbc	r23, r25
 2de:	88 27       	eor	r24, r24
 2e0:	77 fd       	sbrc	r23, 7
 2e2:	80 95       	com	r24
 2e4:	98 2f       	mov	r25, r24
 2e6:	0a d1       	rcall	.+532    	; 0x4fc <__floatsisf>
		temp_2 = ADC_MAX[i] - ADC_MIN[i];

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	48 ec       	ldi	r20, 0xC8	; 200
 2ee:	52 e4       	ldi	r21, 0x42	; 66
 2f0:	91 d1       	rcall	.+802    	; 0x614 <__mulsf3>
 2f2:	2b 01       	movw	r4, r22
 2f4:	3c 01       	movw	r6, r24
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
 2f6:	b8 01       	movw	r22, r16
 2f8:	62 19       	sub	r22, r2
 2fa:	73 09       	sbc	r23, r3
 2fc:	88 27       	eor	r24, r24
 2fe:	77 fd       	sbrc	r23, 7
 300:	80 95       	com	r24
 302:	98 2f       	mov	r25, r24
 304:	fb d0       	rcall	.+502    	; 0x4fc <__floatsisf>
 306:	9b 01       	movw	r18, r22
 308:	ac 01       	movw	r20, r24

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
 30a:	c3 01       	movw	r24, r6
 30c:	b2 01       	movw	r22, r4
 30e:	5b d0       	rcall	.+182    	; 0x3c6 <__divsf3>
 310:	c2 d0       	rcall	.+388    	; 0x496 <__fixsfsi>
 312:	f4 01       	movw	r30, r8
 314:	61 93       	st	Z+, r22
 316:	71 93       	st	Z+, r23
 318:	4f 01       	movw	r8, r30
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN) {
	
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 31a:	21 96       	adiw	r28, 0x01	; 1
 31c:	c8 30       	cpi	r28, 0x08	; 8
 31e:	d1 05       	cpc	r29, r1
 320:	79 f6       	brne	.-98     	; 0x2c0 <ADC_NORMALIZE+0x36>

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);

	}

}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	cf 90       	pop	r12
 332:	bf 90       	pop	r11
 334:	af 90       	pop	r10
 336:	9f 90       	pop	r9
 338:	8f 90       	pop	r8
 33a:	7f 90       	pop	r7
 33c:	6f 90       	pop	r6
 33e:	5f 90       	pop	r5
 340:	4f 90       	pop	r4
 342:	3f 90       	pop	r3
 344:	2f 90       	pop	r2
 346:	08 95       	ret

00000348 <DATA_OUT>:

void DATA_OUT(const int *NORM_DATA) {
 348:	fc 01       	movw	r30, r24

	int i=0;
	int k=0x01;
	int p=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	30 e0       	ldi	r19, 0x00	; 0
		
		p=k<<i;
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	cb 01       	movw	r24, r22
 354:	02 2e       	mov	r0, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <DATA_OUT+0x14>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DATA_OUT+0x10>

		if(NORM_DATA[i]>=(int)(RESOLUTION*0.5)) {
 360:	41 91       	ld	r20, Z+
 362:	51 91       	ld	r21, Z+
 364:	42 33       	cpi	r20, 0x32	; 50
 366:	51 05       	cpc	r21, r1
 368:	2c f0       	brlt	.+10     	; 0x374 <DATA_OUT+0x2c>
			PORTA = PORTA&(~p);
 36a:	9b b3       	in	r25, 0x1b	; 27
 36c:	80 95       	com	r24
 36e:	89 23       	and	r24, r25
 370:	8b bb       	out	0x1b, r24	; 27
 372:	03 c0       	rjmp	.+6      	; 0x37a <DATA_OUT+0x32>
		}
		else {
			PORTA = PORTA|p;
 374:	9b b3       	in	r25, 0x1b	; 27
 376:	89 2b       	or	r24, r25
 378:	8b bb       	out	0x1b, r24	; 27

	int i=0;
	int k=0x01;
	int p=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
 37a:	2f 5f       	subi	r18, 0xFF	; 255
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
 37e:	28 30       	cpi	r18, 0x08	; 8
 380:	31 05       	cpc	r19, r1
 382:	39 f7       	brne	.-50     	; 0x352 <DATA_OUT+0xa>
		else {
			PORTA = PORTA|p;
		}

	}
}
 384:	08 95       	ret

00000386 <main>:
int ADC_MIN[8] = {1023,1023,1023,1023,1023,1023,1023,1023};
int NORM_DATA[8] = {0,};

int main(void) {
	
	DDRA = 0xFF;  
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0xFF;  
 38a:	82 b9       	out	0x02, r24	; 2
	DDRF = 0x00;
 38c:	10 92 61 00 	sts	0x0061, r1
	
	PORTA = 0x00;  
 390:	1b ba       	out	0x1b, r1	; 27
		
	ADMUX = 0x00;
 392:	17 b8       	out	0x07, r1	; 7
	
	ADCSRA = 0x87;
 394:	87 e8       	ldi	r24, 0x87	; 135
 396:	86 b9       	out	0x06, r24	; 6
	
	while(1) {
		
		ADC_GET(ADC_DATA);
 398:	80 e3       	ldi	r24, 0x30	; 48
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	9d de       	rcall	.-710    	; 0xd8 <ADC_GET>
		ADC_MAX_MIN(ADC_MAX, ADC_MIN, ADC_DATA);
 39e:	40 e3       	ldi	r20, 0x30	; 48
 3a0:	51 e0       	ldi	r21, 0x01	; 1
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	71 e0       	ldi	r23, 0x01	; 1
 3a6:	80 e2       	ldi	r24, 0x20	; 32
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	41 df       	rcall	.-382    	; 0x22e <ADC_MAX_MIN>
		ADC_NORMALIZE(NORM_DATA, ADC_DATA, ADC_MAX, ADC_MIN);
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	31 e0       	ldi	r19, 0x01	; 1
 3b0:	40 e2       	ldi	r20, 0x20	; 32
 3b2:	51 e0       	ldi	r21, 0x01	; 1
 3b4:	60 e3       	ldi	r22, 0x30	; 48
 3b6:	71 e0       	ldi	r23, 0x01	; 1
 3b8:	80 e1       	ldi	r24, 0x10	; 16
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	66 df       	rcall	.-308    	; 0x28a <ADC_NORMALIZE>
		DATA_OUT(NORM_DATA);	
 3be:	80 e1       	ldi	r24, 0x10	; 16
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	c2 df       	rcall	.-124    	; 0x348 <DATA_OUT>
 3c4:	e9 cf       	rjmp	.-46     	; 0x398 <main+0x12>

000003c6 <__divsf3>:
 3c6:	0c d0       	rcall	.+24     	; 0x3e0 <__divsf3x>
 3c8:	eb c0       	rjmp	.+470    	; 0x5a0 <__fp_round>
 3ca:	e3 d0       	rcall	.+454    	; 0x592 <__fp_pscB>
 3cc:	40 f0       	brcs	.+16     	; 0x3de <__divsf3+0x18>
 3ce:	da d0       	rcall	.+436    	; 0x584 <__fp_pscA>
 3d0:	30 f0       	brcs	.+12     	; 0x3de <__divsf3+0x18>
 3d2:	21 f4       	brne	.+8      	; 0x3dc <__divsf3+0x16>
 3d4:	5f 3f       	cpi	r21, 0xFF	; 255
 3d6:	19 f0       	breq	.+6      	; 0x3de <__divsf3+0x18>
 3d8:	cc c0       	rjmp	.+408    	; 0x572 <__fp_inf>
 3da:	51 11       	cpse	r21, r1
 3dc:	15 c1       	rjmp	.+554    	; 0x608 <__fp_szero>
 3de:	cf c0       	rjmp	.+414    	; 0x57e <__fp_nan>

000003e0 <__divsf3x>:
 3e0:	f0 d0       	rcall	.+480    	; 0x5c2 <__fp_split3>
 3e2:	98 f3       	brcs	.-26     	; 0x3ca <__divsf3+0x4>

000003e4 <__divsf3_pse>:
 3e4:	99 23       	and	r25, r25
 3e6:	c9 f3       	breq	.-14     	; 0x3da <__divsf3+0x14>
 3e8:	55 23       	and	r21, r21
 3ea:	b1 f3       	breq	.-20     	; 0x3d8 <__divsf3+0x12>
 3ec:	95 1b       	sub	r25, r21
 3ee:	55 0b       	sbc	r21, r21
 3f0:	bb 27       	eor	r27, r27
 3f2:	aa 27       	eor	r26, r26
 3f4:	62 17       	cp	r22, r18
 3f6:	73 07       	cpc	r23, r19
 3f8:	84 07       	cpc	r24, r20
 3fa:	38 f0       	brcs	.+14     	; 0x40a <__divsf3_pse+0x26>
 3fc:	9f 5f       	subi	r25, 0xFF	; 255
 3fe:	5f 4f       	sbci	r21, 0xFF	; 255
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	44 1f       	adc	r20, r20
 406:	aa 1f       	adc	r26, r26
 408:	a9 f3       	breq	.-22     	; 0x3f4 <__divsf3_pse+0x10>
 40a:	33 d0       	rcall	.+102    	; 0x472 <__divsf3_pse+0x8e>
 40c:	0e 2e       	mov	r0, r30
 40e:	3a f0       	brmi	.+14     	; 0x41e <__divsf3_pse+0x3a>
 410:	e0 e8       	ldi	r30, 0x80	; 128
 412:	30 d0       	rcall	.+96     	; 0x474 <__divsf3_pse+0x90>
 414:	91 50       	subi	r25, 0x01	; 1
 416:	50 40       	sbci	r21, 0x00	; 0
 418:	e6 95       	lsr	r30
 41a:	00 1c       	adc	r0, r0
 41c:	ca f7       	brpl	.-14     	; 0x410 <__divsf3_pse+0x2c>
 41e:	29 d0       	rcall	.+82     	; 0x472 <__divsf3_pse+0x8e>
 420:	fe 2f       	mov	r31, r30
 422:	27 d0       	rcall	.+78     	; 0x472 <__divsf3_pse+0x8e>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	bb 1f       	adc	r27, r27
 42c:	26 17       	cp	r18, r22
 42e:	37 07       	cpc	r19, r23
 430:	48 07       	cpc	r20, r24
 432:	ab 07       	cpc	r26, r27
 434:	b0 e8       	ldi	r27, 0x80	; 128
 436:	09 f0       	breq	.+2      	; 0x43a <__divsf3_pse+0x56>
 438:	bb 0b       	sbc	r27, r27
 43a:	80 2d       	mov	r24, r0
 43c:	bf 01       	movw	r22, r30
 43e:	ff 27       	eor	r31, r31
 440:	93 58       	subi	r25, 0x83	; 131
 442:	5f 4f       	sbci	r21, 0xFF	; 255
 444:	2a f0       	brmi	.+10     	; 0x450 <__divsf3_pse+0x6c>
 446:	9e 3f       	cpi	r25, 0xFE	; 254
 448:	51 05       	cpc	r21, r1
 44a:	68 f0       	brcs	.+26     	; 0x466 <__divsf3_pse+0x82>
 44c:	92 c0       	rjmp	.+292    	; 0x572 <__fp_inf>
 44e:	dc c0       	rjmp	.+440    	; 0x608 <__fp_szero>
 450:	5f 3f       	cpi	r21, 0xFF	; 255
 452:	ec f3       	brlt	.-6      	; 0x44e <__divsf3_pse+0x6a>
 454:	98 3e       	cpi	r25, 0xE8	; 232
 456:	dc f3       	brlt	.-10     	; 0x44e <__divsf3_pse+0x6a>
 458:	86 95       	lsr	r24
 45a:	77 95       	ror	r23
 45c:	67 95       	ror	r22
 45e:	b7 95       	ror	r27
 460:	f7 95       	ror	r31
 462:	9f 5f       	subi	r25, 0xFF	; 255
 464:	c9 f7       	brne	.-14     	; 0x458 <__divsf3_pse+0x74>
 466:	88 0f       	add	r24, r24
 468:	91 1d       	adc	r25, r1
 46a:	96 95       	lsr	r25
 46c:	87 95       	ror	r24
 46e:	97 f9       	bld	r25, 7
 470:	08 95       	ret
 472:	e1 e0       	ldi	r30, 0x01	; 1
 474:	66 0f       	add	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	bb 1f       	adc	r27, r27
 47c:	62 17       	cp	r22, r18
 47e:	73 07       	cpc	r23, r19
 480:	84 07       	cpc	r24, r20
 482:	ba 07       	cpc	r27, r26
 484:	20 f0       	brcs	.+8      	; 0x48e <__divsf3_pse+0xaa>
 486:	62 1b       	sub	r22, r18
 488:	73 0b       	sbc	r23, r19
 48a:	84 0b       	sbc	r24, r20
 48c:	ba 0b       	sbc	r27, r26
 48e:	ee 1f       	adc	r30, r30
 490:	88 f7       	brcc	.-30     	; 0x474 <__divsf3_pse+0x90>
 492:	e0 95       	com	r30
 494:	08 95       	ret

00000496 <__fixsfsi>:
 496:	04 d0       	rcall	.+8      	; 0x4a0 <__fixunssfsi>
 498:	68 94       	set
 49a:	b1 11       	cpse	r27, r1
 49c:	b5 c0       	rjmp	.+362    	; 0x608 <__fp_szero>
 49e:	08 95       	ret

000004a0 <__fixunssfsi>:
 4a0:	98 d0       	rcall	.+304    	; 0x5d2 <__fp_splitA>
 4a2:	88 f0       	brcs	.+34     	; 0x4c6 <__fixunssfsi+0x26>
 4a4:	9f 57       	subi	r25, 0x7F	; 127
 4a6:	90 f0       	brcs	.+36     	; 0x4cc <__fixunssfsi+0x2c>
 4a8:	b9 2f       	mov	r27, r25
 4aa:	99 27       	eor	r25, r25
 4ac:	b7 51       	subi	r27, 0x17	; 23
 4ae:	a0 f0       	brcs	.+40     	; 0x4d8 <__fixunssfsi+0x38>
 4b0:	d1 f0       	breq	.+52     	; 0x4e6 <__fixunssfsi+0x46>
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	1a f0       	brmi	.+6      	; 0x4c2 <__fixunssfsi+0x22>
 4bc:	ba 95       	dec	r27
 4be:	c9 f7       	brne	.-14     	; 0x4b2 <__fixunssfsi+0x12>
 4c0:	12 c0       	rjmp	.+36     	; 0x4e6 <__fixunssfsi+0x46>
 4c2:	b1 30       	cpi	r27, 0x01	; 1
 4c4:	81 f0       	breq	.+32     	; 0x4e6 <__fixunssfsi+0x46>
 4c6:	9f d0       	rcall	.+318    	; 0x606 <__fp_zero>
 4c8:	b1 e0       	ldi	r27, 0x01	; 1
 4ca:	08 95       	ret
 4cc:	9c c0       	rjmp	.+312    	; 0x606 <__fp_zero>
 4ce:	67 2f       	mov	r22, r23
 4d0:	78 2f       	mov	r23, r24
 4d2:	88 27       	eor	r24, r24
 4d4:	b8 5f       	subi	r27, 0xF8	; 248
 4d6:	39 f0       	breq	.+14     	; 0x4e6 <__fixunssfsi+0x46>
 4d8:	b9 3f       	cpi	r27, 0xF9	; 249
 4da:	cc f3       	brlt	.-14     	; 0x4ce <__fixunssfsi+0x2e>
 4dc:	86 95       	lsr	r24
 4de:	77 95       	ror	r23
 4e0:	67 95       	ror	r22
 4e2:	b3 95       	inc	r27
 4e4:	d9 f7       	brne	.-10     	; 0x4dc <__fixunssfsi+0x3c>
 4e6:	3e f4       	brtc	.+14     	; 0x4f6 <__fixunssfsi+0x56>
 4e8:	90 95       	com	r25
 4ea:	80 95       	com	r24
 4ec:	70 95       	com	r23
 4ee:	61 95       	neg	r22
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	08 95       	ret

000004f8 <__floatunsisf>:
 4f8:	e8 94       	clt
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <__floatsisf+0x12>

000004fc <__floatsisf>:
 4fc:	97 fb       	bst	r25, 7
 4fe:	3e f4       	brtc	.+14     	; 0x50e <__floatsisf+0x12>
 500:	90 95       	com	r25
 502:	80 95       	com	r24
 504:	70 95       	com	r23
 506:	61 95       	neg	r22
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	8f 4f       	sbci	r24, 0xFF	; 255
 50c:	9f 4f       	sbci	r25, 0xFF	; 255
 50e:	99 23       	and	r25, r25
 510:	a9 f0       	breq	.+42     	; 0x53c <__floatsisf+0x40>
 512:	f9 2f       	mov	r31, r25
 514:	96 e9       	ldi	r25, 0x96	; 150
 516:	bb 27       	eor	r27, r27
 518:	93 95       	inc	r25
 51a:	f6 95       	lsr	r31
 51c:	87 95       	ror	r24
 51e:	77 95       	ror	r23
 520:	67 95       	ror	r22
 522:	b7 95       	ror	r27
 524:	f1 11       	cpse	r31, r1
 526:	f8 cf       	rjmp	.-16     	; 0x518 <__floatsisf+0x1c>
 528:	fa f4       	brpl	.+62     	; 0x568 <__floatsisf+0x6c>
 52a:	bb 0f       	add	r27, r27
 52c:	11 f4       	brne	.+4      	; 0x532 <__floatsisf+0x36>
 52e:	60 ff       	sbrs	r22, 0
 530:	1b c0       	rjmp	.+54     	; 0x568 <__floatsisf+0x6c>
 532:	6f 5f       	subi	r22, 0xFF	; 255
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	8f 4f       	sbci	r24, 0xFF	; 255
 538:	9f 4f       	sbci	r25, 0xFF	; 255
 53a:	16 c0       	rjmp	.+44     	; 0x568 <__floatsisf+0x6c>
 53c:	88 23       	and	r24, r24
 53e:	11 f0       	breq	.+4      	; 0x544 <__floatsisf+0x48>
 540:	96 e9       	ldi	r25, 0x96	; 150
 542:	11 c0       	rjmp	.+34     	; 0x566 <__floatsisf+0x6a>
 544:	77 23       	and	r23, r23
 546:	21 f0       	breq	.+8      	; 0x550 <__floatsisf+0x54>
 548:	9e e8       	ldi	r25, 0x8E	; 142
 54a:	87 2f       	mov	r24, r23
 54c:	76 2f       	mov	r23, r22
 54e:	05 c0       	rjmp	.+10     	; 0x55a <__floatsisf+0x5e>
 550:	66 23       	and	r22, r22
 552:	71 f0       	breq	.+28     	; 0x570 <__floatsisf+0x74>
 554:	96 e8       	ldi	r25, 0x86	; 134
 556:	86 2f       	mov	r24, r22
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	2a f0       	brmi	.+10     	; 0x568 <__floatsisf+0x6c>
 55e:	9a 95       	dec	r25
 560:	66 0f       	add	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	da f7       	brpl	.-10     	; 0x55e <__floatsisf+0x62>
 568:	88 0f       	add	r24, r24
 56a:	96 95       	lsr	r25
 56c:	87 95       	ror	r24
 56e:	97 f9       	bld	r25, 7
 570:	08 95       	ret

00000572 <__fp_inf>:
 572:	97 f9       	bld	r25, 7
 574:	9f 67       	ori	r25, 0x7F	; 127
 576:	80 e8       	ldi	r24, 0x80	; 128
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	08 95       	ret

0000057e <__fp_nan>:
 57e:	9f ef       	ldi	r25, 0xFF	; 255
 580:	80 ec       	ldi	r24, 0xC0	; 192
 582:	08 95       	ret

00000584 <__fp_pscA>:
 584:	00 24       	eor	r0, r0
 586:	0a 94       	dec	r0
 588:	16 16       	cp	r1, r22
 58a:	17 06       	cpc	r1, r23
 58c:	18 06       	cpc	r1, r24
 58e:	09 06       	cpc	r0, r25
 590:	08 95       	ret

00000592 <__fp_pscB>:
 592:	00 24       	eor	r0, r0
 594:	0a 94       	dec	r0
 596:	12 16       	cp	r1, r18
 598:	13 06       	cpc	r1, r19
 59a:	14 06       	cpc	r1, r20
 59c:	05 06       	cpc	r0, r21
 59e:	08 95       	ret

000005a0 <__fp_round>:
 5a0:	09 2e       	mov	r0, r25
 5a2:	03 94       	inc	r0
 5a4:	00 0c       	add	r0, r0
 5a6:	11 f4       	brne	.+4      	; 0x5ac <__fp_round+0xc>
 5a8:	88 23       	and	r24, r24
 5aa:	52 f0       	brmi	.+20     	; 0x5c0 <__fp_round+0x20>
 5ac:	bb 0f       	add	r27, r27
 5ae:	40 f4       	brcc	.+16     	; 0x5c0 <__fp_round+0x20>
 5b0:	bf 2b       	or	r27, r31
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <__fp_round+0x18>
 5b4:	60 ff       	sbrs	r22, 0
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__fp_round+0x20>
 5b8:	6f 5f       	subi	r22, 0xFF	; 255
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	08 95       	ret

000005c2 <__fp_split3>:
 5c2:	57 fd       	sbrc	r21, 7
 5c4:	90 58       	subi	r25, 0x80	; 128
 5c6:	44 0f       	add	r20, r20
 5c8:	55 1f       	adc	r21, r21
 5ca:	59 f0       	breq	.+22     	; 0x5e2 <__fp_splitA+0x10>
 5cc:	5f 3f       	cpi	r21, 0xFF	; 255
 5ce:	71 f0       	breq	.+28     	; 0x5ec <__fp_splitA+0x1a>
 5d0:	47 95       	ror	r20

000005d2 <__fp_splitA>:
 5d2:	88 0f       	add	r24, r24
 5d4:	97 fb       	bst	r25, 7
 5d6:	99 1f       	adc	r25, r25
 5d8:	61 f0       	breq	.+24     	; 0x5f2 <__fp_splitA+0x20>
 5da:	9f 3f       	cpi	r25, 0xFF	; 255
 5dc:	79 f0       	breq	.+30     	; 0x5fc <__fp_splitA+0x2a>
 5de:	87 95       	ror	r24
 5e0:	08 95       	ret
 5e2:	12 16       	cp	r1, r18
 5e4:	13 06       	cpc	r1, r19
 5e6:	14 06       	cpc	r1, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	f2 cf       	rjmp	.-28     	; 0x5d0 <__fp_split3+0xe>
 5ec:	46 95       	lsr	r20
 5ee:	f1 df       	rcall	.-30     	; 0x5d2 <__fp_splitA>
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <__fp_splitA+0x30>
 5f2:	16 16       	cp	r1, r22
 5f4:	17 06       	cpc	r1, r23
 5f6:	18 06       	cpc	r1, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	f1 cf       	rjmp	.-30     	; 0x5de <__fp_splitA+0xc>
 5fc:	86 95       	lsr	r24
 5fe:	71 05       	cpc	r23, r1
 600:	61 05       	cpc	r22, r1
 602:	08 94       	sec
 604:	08 95       	ret

00000606 <__fp_zero>:
 606:	e8 94       	clt

00000608 <__fp_szero>:
 608:	bb 27       	eor	r27, r27
 60a:	66 27       	eor	r22, r22
 60c:	77 27       	eor	r23, r23
 60e:	cb 01       	movw	r24, r22
 610:	97 f9       	bld	r25, 7
 612:	08 95       	ret

00000614 <__mulsf3>:
 614:	0b d0       	rcall	.+22     	; 0x62c <__mulsf3x>
 616:	c4 cf       	rjmp	.-120    	; 0x5a0 <__fp_round>
 618:	b5 df       	rcall	.-150    	; 0x584 <__fp_pscA>
 61a:	28 f0       	brcs	.+10     	; 0x626 <__mulsf3+0x12>
 61c:	ba df       	rcall	.-140    	; 0x592 <__fp_pscB>
 61e:	18 f0       	brcs	.+6      	; 0x626 <__mulsf3+0x12>
 620:	95 23       	and	r25, r21
 622:	09 f0       	breq	.+2      	; 0x626 <__mulsf3+0x12>
 624:	a6 cf       	rjmp	.-180    	; 0x572 <__fp_inf>
 626:	ab cf       	rjmp	.-170    	; 0x57e <__fp_nan>
 628:	11 24       	eor	r1, r1
 62a:	ee cf       	rjmp	.-36     	; 0x608 <__fp_szero>

0000062c <__mulsf3x>:
 62c:	ca df       	rcall	.-108    	; 0x5c2 <__fp_split3>
 62e:	a0 f3       	brcs	.-24     	; 0x618 <__mulsf3+0x4>

00000630 <__mulsf3_pse>:
 630:	95 9f       	mul	r25, r21
 632:	d1 f3       	breq	.-12     	; 0x628 <__mulsf3+0x14>
 634:	95 0f       	add	r25, r21
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	55 1f       	adc	r21, r21
 63a:	62 9f       	mul	r22, r18
 63c:	f0 01       	movw	r30, r0
 63e:	72 9f       	mul	r23, r18
 640:	bb 27       	eor	r27, r27
 642:	f0 0d       	add	r31, r0
 644:	b1 1d       	adc	r27, r1
 646:	63 9f       	mul	r22, r19
 648:	aa 27       	eor	r26, r26
 64a:	f0 0d       	add	r31, r0
 64c:	b1 1d       	adc	r27, r1
 64e:	aa 1f       	adc	r26, r26
 650:	64 9f       	mul	r22, r20
 652:	66 27       	eor	r22, r22
 654:	b0 0d       	add	r27, r0
 656:	a1 1d       	adc	r26, r1
 658:	66 1f       	adc	r22, r22
 65a:	82 9f       	mul	r24, r18
 65c:	22 27       	eor	r18, r18
 65e:	b0 0d       	add	r27, r0
 660:	a1 1d       	adc	r26, r1
 662:	62 1f       	adc	r22, r18
 664:	73 9f       	mul	r23, r19
 666:	b0 0d       	add	r27, r0
 668:	a1 1d       	adc	r26, r1
 66a:	62 1f       	adc	r22, r18
 66c:	83 9f       	mul	r24, r19
 66e:	a0 0d       	add	r26, r0
 670:	61 1d       	adc	r22, r1
 672:	22 1f       	adc	r18, r18
 674:	74 9f       	mul	r23, r20
 676:	33 27       	eor	r19, r19
 678:	a0 0d       	add	r26, r0
 67a:	61 1d       	adc	r22, r1
 67c:	23 1f       	adc	r18, r19
 67e:	84 9f       	mul	r24, r20
 680:	60 0d       	add	r22, r0
 682:	21 1d       	adc	r18, r1
 684:	82 2f       	mov	r24, r18
 686:	76 2f       	mov	r23, r22
 688:	6a 2f       	mov	r22, r26
 68a:	11 24       	eor	r1, r1
 68c:	9f 57       	subi	r25, 0x7F	; 127
 68e:	50 40       	sbci	r21, 0x00	; 0
 690:	8a f0       	brmi	.+34     	; 0x6b4 <__mulsf3_pse+0x84>
 692:	e1 f0       	breq	.+56     	; 0x6cc <__mulsf3_pse+0x9c>
 694:	88 23       	and	r24, r24
 696:	4a f0       	brmi	.+18     	; 0x6aa <__mulsf3_pse+0x7a>
 698:	ee 0f       	add	r30, r30
 69a:	ff 1f       	adc	r31, r31
 69c:	bb 1f       	adc	r27, r27
 69e:	66 1f       	adc	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	91 50       	subi	r25, 0x01	; 1
 6a6:	50 40       	sbci	r21, 0x00	; 0
 6a8:	a9 f7       	brne	.-22     	; 0x694 <__mulsf3_pse+0x64>
 6aa:	9e 3f       	cpi	r25, 0xFE	; 254
 6ac:	51 05       	cpc	r21, r1
 6ae:	70 f0       	brcs	.+28     	; 0x6cc <__mulsf3_pse+0x9c>
 6b0:	60 cf       	rjmp	.-320    	; 0x572 <__fp_inf>
 6b2:	aa cf       	rjmp	.-172    	; 0x608 <__fp_szero>
 6b4:	5f 3f       	cpi	r21, 0xFF	; 255
 6b6:	ec f3       	brlt	.-6      	; 0x6b2 <__mulsf3_pse+0x82>
 6b8:	98 3e       	cpi	r25, 0xE8	; 232
 6ba:	dc f3       	brlt	.-10     	; 0x6b2 <__mulsf3_pse+0x82>
 6bc:	86 95       	lsr	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b7 95       	ror	r27
 6c4:	f7 95       	ror	r31
 6c6:	e7 95       	ror	r30
 6c8:	9f 5f       	subi	r25, 0xFF	; 255
 6ca:	c1 f7       	brne	.-16     	; 0x6bc <__mulsf3_pse+0x8c>
 6cc:	fe 2b       	or	r31, r30
 6ce:	88 0f       	add	r24, r24
 6d0:	91 1d       	adc	r25, r1
 6d2:	96 95       	lsr	r25
 6d4:	87 95       	ror	r24
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <__tablejump2__>:
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31

000006de <__tablejump__>:
 6de:	05 90       	lpm	r0, Z+
 6e0:	f4 91       	lpm	r31, Z
 6e2:	e0 2d       	mov	r30, r0
 6e4:	09 94       	ijmp

000006e6 <_exit>:
 6e6:	f8 94       	cli

000006e8 <__stop_program>:
 6e8:	ff cf       	rjmp	.-2      	; 0x6e8 <__stop_program>
