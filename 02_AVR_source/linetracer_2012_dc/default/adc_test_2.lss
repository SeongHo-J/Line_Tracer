
adc_test_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00000a52  00000ae6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080020e  0080020e  00000bf4  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c7  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001808  00000000  00000000  00000e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b81  00000000  00000000  000026a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000df1  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00004018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  00004198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000609  00000000  00000000  0000450b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  c6:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_LCD>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	38 ed       	ldi	r19, 0xD8	; 216
  d2:	c9 01       	movw	r24, r18
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <init_LCD+0x6>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
  d8:	e5 e6       	ldi	r30, 0x65	; 101
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
  e0:	68 e3       	ldi	r22, 0x38	; 56
  e2:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
  e4:	80 81       	ld	r24, Z
  e6:	89 27       	eor	r24, r25
  e8:	80 83       	st	Z, r24
  ea:	49 e9       	ldi	r20, 0x99	; 153
  ec:	55 e1       	ldi	r21, 0x15	; 21
  ee:	da 01       	movw	r26, r20
  f0:	11 97       	sbiw	r26, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <init_LCD+0x22>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
  f4:	d9 01       	movw	r26, r18
  f6:	11 97       	sbiw	r26, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <init_LCD+0x28>
  fa:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
  fc:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
  fe:	80 81       	ld	r24, Z
 100:	89 27       	eor	r24, r25
 102:	80 83       	st	Z, r24
 104:	da 01       	movw	r26, r20
 106:	11 97       	sbiw	r26, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <init_LCD+0x38>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 10a:	d9 01       	movw	r26, r18
 10c:	11 97       	sbiw	r26, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <init_LCD+0x3e>
 110:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 112:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 114:	80 81       	ld	r24, Z
 116:	89 27       	eor	r24, r25
 118:	80 83       	st	Z, r24
 11a:	da 01       	movw	r26, r20
 11c:	11 97       	sbiw	r26, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <init_LCD+0x4e>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 120:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 122:	9b bb       	out	0x1b, r25	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 124:	80 81       	ld	r24, Z
 126:	89 27       	eor	r24, r25
 128:	80 83       	st	Z, r24
 12a:	da 01       	movw	r26, r20
 12c:	11 97       	sbiw	r26, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <init_LCD+0x5e>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 130:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 132:	8c e0       	ldi	r24, 0x0C	; 12
 134:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 136:	80 81       	ld	r24, Z
 138:	89 27       	eor	r24, r25
 13a:	80 83       	st	Z, r24
 13c:	da 01       	movw	r26, r20
 13e:	11 97       	sbiw	r26, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <init_LCD+0x70>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 142:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 148:	80 81       	ld	r24, Z
 14a:	89 27       	eor	r24, r25
 14c:	80 83       	st	Z, r24
 14e:	ca 01       	movw	r24, r20
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <init_LCD+0x82>
	_delay_ms(20);
	LCD_wr_cmd(0x38);
	LCD_wr_cmd(0x04); //엔트리모드셋
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}
 154:	08 95       	ret

00000156 <LCD_wr_cmd>:

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 156:	e5 e6       	ldi	r30, 0x65	; 101
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 15e:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 160:	80 81       	ld	r24, Z
 162:	89 27       	eor	r24, r25
 164:	80 83       	st	Z, r24
 166:	89 e9       	ldi	r24, 0x99	; 153
 168:	95 e1       	ldi	r25, 0x15	; 21
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_wr_cmd+0x14>
	_delay_ms(2); //LCD 내부동작 시간
}
 16e:	08 95       	ret

00000170 <LCD_wr_data>:

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 170:	e5 e6       	ldi	r30, 0x65	; 101
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	95 e0       	ldi	r25, 0x05	; 5
 176:	90 83       	st	Z, r25
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
 178:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 17a:	80 81       	ld	r24, Z
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	89 27       	eor	r24, r25
 180:	80 83       	st	Z, r24
 182:	89 e9       	ldi	r24, 0x99	; 153
 184:	95 e1       	ldi	r25, 0x15	; 21
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_wr_data+0x16>
	_delay_ms(2); 
}
 18a:	08 95       	ret

0000018c <LCD_wr_string>:

void LCD_wr_string(char d_line, char *lcd_str) {
 18c:	fb 01       	movw	r30, r22
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 18e:	94 e0       	ldi	r25, 0x04	; 4
 190:	90 93 65 00 	sts	0x0065, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 194:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 196:	80 91 65 00 	lds	r24, 0x0065
 19a:	89 27       	eor	r24, r25
 19c:	80 93 65 00 	sts	0x0065, r24
 1a0:	89 e9       	ldi	r24, 0x99	; 153
 1a2:	95 e1       	ldi	r25, 0x15	; 21
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_wr_string+0x18>
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 1a8:	55 e0       	ldi	r21, 0x05	; 5
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 1aa:	44 e0       	ldi	r20, 0x04	; 4
 1ac:	29 e9       	ldi	r18, 0x99	; 153
 1ae:	35 e1       	ldi	r19, 0x15	; 21
 1b0:	0c c0       	rjmp	.+24     	; 0x1ca <LCD_wr_string+0x3e>
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 1b2:	50 93 65 00 	sts	0x0065, r21
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
 1b6:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 1b8:	80 91 65 00 	lds	r24, 0x0065
 1bc:	84 27       	eor	r24, r20
 1be:	80 93 65 00 	sts	0x0065, r24
 1c2:	c9 01       	movw	r24, r18
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_wr_string+0x38>
void LCD_wr_string(char d_line, char *lcd_str) {
	LCD_wr_cmd(d_line);
	
	while(*lcd_str != '\0') {
		LCD_wr_data(*lcd_str);
		lcd_str++;
 1c8:	31 96       	adiw	r30, 0x01	; 1
}

void LCD_wr_string(char d_line, char *lcd_str) {
	LCD_wr_cmd(d_line);
	
	while(*lcd_str != '\0') {
 1ca:	80 81       	ld	r24, Z
 1cc:	88 23       	and	r24, r24
 1ce:	89 f7       	brne	.-30     	; 0x1b2 <LCD_wr_string+0x26>
		LCD_wr_data(*lcd_str);
		lcd_str++;
	}
}
 1d0:	08 95       	ret

000001d2 <main>:

int count=0;

int ir = 0;

int main(void) {
 1d2:	bf 92       	push	r11
 1d4:	cf 92       	push	r12
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
	
	DDRA = 0xFF; // CLCD
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	9a bb       	out	0x1a, r25	; 26
	DDRD = 0xFF; // LED
 1e8:	91 bb       	out	0x11, r25	; 17
	DDRE = 0xFE;
 1ea:	8e ef       	ldi	r24, 0xFE	; 254
 1ec:	82 b9       	out	0x02, r24	; 2
	DDRG = 0xFF; // CLCD LCD_EN, LCD_RW, LCD_RS
 1ee:	90 93 64 00 	sts	0x0064, r25
	
	PORTD = 0x00;
 1f2:	12 ba       	out	0x12, r1	; 18

	init_LCD();
 1f4:	0e 94 67 00 	call	0xce	; 0xce <init_LCD>
		lcd_str++;
	}
}

void init_ADC(void) {
	DDRF = 0x00;
 1f8:	10 92 61 00 	sts	0x0061, r1
	
	ADMUX = 0xC0;
 1fc:	80 ec       	ldi	r24, 0xC0	; 192
 1fe:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0xA7;
 200:	87 ea       	ldi	r24, 0xA7	; 167
 202:	86 b9       	out	0x06, r24	; 6

		return ir;
}

void init_timer(void) {
	TCCR2 = 0x05;
 204:	85 e0       	ldi	r24, 0x05	; 5
 206:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;
 208:	14 bc       	out	0x24, r1	; 36
	TIMSK = 0x40;
 20a:	80 e4       	ldi	r24, 0x40	; 64
 20c:	87 bf       	out	0x37, r24	; 55
}

void init_usart(void) {
	
	UBRR0H = 0;
 20e:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 71;
 212:	87 e4       	ldi	r24, 0x47	; 71
 214:	89 b9       	out	0x09, r24	; 9
	UCSR0B = 0x18;
 216:	88 e1       	ldi	r24, 0x18	; 24
 218:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	80 93 95 00 	sts	0x0095, r24

	char *string1 = "ADC=";
	//int ir[10] = {0,};
	int ten=0, one=0;

	sei();
 220:	78 94       	sei
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 222:	35 e0       	ldi	r19, 0x05	; 5
 224:	c3 2e       	mov	r12, r19
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 226:	24 e0       	ldi	r18, 0x04	; 4
 228:	d2 2e       	mov	r13, r18
 22a:	c9 e9       	ldi	r28, 0x99	; 153
 22c:	d5 e1       	ldi	r29, 0x15	; 21
}

void USART_Transmit( unsigned char data ) {

	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
	UDR0 = data; /* Put data into buffer, sends the data */
 22e:	91 e3       	ldi	r25, 0x31	; 49
 230:	b9 2e       	mov	r11, r25
 232:	e1 2c       	mov	r14, r1
 234:	8c e6       	ldi	r24, 0x6C	; 108
 236:	f8 2e       	mov	r15, r24
	while(1) {
		

			//ir[i] = ir_sense();

			ten = ir/10 + 0x30;
 238:	00 91 10 02 	lds	r16, 0x0210
 23c:	10 91 11 02 	lds	r17, 0x0211
			one = ir%10 + 0x30;

			LCD_wr_string(0x80, string1);
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	71 e0       	ldi	r23, 0x01	; 1
 246:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_wr_string>
			LCD_wr_data(ten);
 24a:	c8 01       	movw	r24, r16
 24c:	6a e0       	ldi	r22, 0x0A	; 10
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	0e 94 c9 04 	call	0x992	; 0x992 <__divmodhi4>
 254:	60 5d       	subi	r22, 0xD0	; 208
 256:	7f 4f       	sbci	r23, 0xFF	; 255
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 258:	c0 92 65 00 	sts	0x0065, r12
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
 25c:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 25e:	80 91 65 00 	lds	r24, 0x0065
 262:	8d 25       	eor	r24, r13
 264:	80 93 65 00 	sts	0x0065, r24
 268:	ce 01       	movw	r24, r28
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <main+0x98>
			ten = ir/10 + 0x30;
			one = ir%10 + 0x30;

			LCD_wr_string(0x80, string1);
			LCD_wr_data(ten);
			LCD_wr_data(one);
 26e:	c8 01       	movw	r24, r16
 270:	6a e0       	ldi	r22, 0x0A	; 10
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	0e 94 c9 04 	call	0x992	; 0x992 <__divmodhi4>
 278:	c0 96       	adiw	r24, 0x30	; 48
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 27a:	c0 92 65 00 	sts	0x0065, r12
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
 27e:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 280:	80 91 65 00 	lds	r24, 0x0065
 284:	8d 25       	eor	r24, r13
 286:	80 93 65 00 	sts	0x0065, r24
 28a:	ce 01       	movw	r24, r28
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0xba>
	}
}

void USART_Transmit( unsigned char data ) {

	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
 290:	5d 9b       	sbis	0x0b, 5	; 11
 292:	fe cf       	rjmp	.-4      	; 0x290 <main+0xbe>
	UDR0 = data; /* Put data into buffer, sends the data */
 294:	bc b8       	out	0x0c, r11	; 12
 296:	c7 01       	movw	r24, r14
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0xc6>
 29c:	cd cf       	rjmp	.-102    	; 0x238 <main+0x66>

0000029e <init_ADC>:
		lcd_str++;
	}
}

void init_ADC(void) {
	DDRF = 0x00;
 29e:	10 92 61 00 	sts	0x0061, r1
	
	ADMUX = 0xC0;
 2a2:	80 ec       	ldi	r24, 0xC0	; 192
 2a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0xA7;
 2a6:	87 ea       	ldi	r24, 0xA7	; 167
 2a8:	86 b9       	out	0x06, r24	; 6
 }
 2aa:	08 95       	ret

000002ac <ir_sense>:
}*/

int ir_sense(void) {
		int tot=0, t=0, ir=0;

		ADCSRA |= 0xC0; // 0b=1100 0000 ADEN=1, ADSC=1
 2ac:	86 b1       	in	r24, 0x06	; 6
 2ae:	80 6c       	ori	r24, 0xC0	; 192
 2b0:	86 b9       	out	0x06, r24	; 6
		while((ADCSRA&0x10) == 0x00); // ADIF=1
 2b2:	34 9b       	sbis	0x06, 4	; 6
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <ir_sense+0x6>
		tot = ADCL+ADCH*256;
 2b6:	34 b1       	in	r19, 0x04	; 4
 2b8:	25 b1       	in	r18, 0x05	; 5
 2ba:	72 2f       	mov	r23, r18
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	63 0f       	add	r22, r19
 2c0:	71 1d       	adc	r23, r1
 2c2:	88 27       	eor	r24, r24
 2c4:	77 fd       	sbrc	r23, 7
 2c6:	80 95       	com	r24
 2c8:	98 2f       	mov	r25, r24
 2ca:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 e2       	ldi	r20, 0x20	; 32
 2d4:	50 e4       	ldi	r21, 0x40	; 64
 2d6:	0e 94 cf 01 	call	0x39e	; 0x39e <__divsf3>
 2da:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fixsfsi>
 2de:	dc 01       	movw	r26, r24
 2e0:	cb 01       	movw	r24, r22
 2e2:	6a e0       	ldi	r22, 0x0A	; 10
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	0e 94 c9 04 	call	0x992	; 0x992 <__divmodhi4>
 2ea:	cb 01       	movw	r24, r22
		
		t = (tot/2.5);
		ir = t/10;

		return ir;
}
 2ec:	08 95       	ret

000002ee <init_timer>:

void init_timer(void) {
	TCCR2 = 0x05;
 2ee:	85 e0       	ldi	r24, 0x05	; 5
 2f0:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;
 2f2:	14 bc       	out	0x24, r1	; 36
	TIMSK = 0x40;
 2f4:	80 e4       	ldi	r24, 0x40	; 64
 2f6:	87 bf       	out	0x37, r24	; 55
}
 2f8:	08 95       	ret

000002fa <init_usart>:

void init_usart(void) {
	
	UBRR0H = 0;
 2fa:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 71;
 2fe:	87 e4       	ldi	r24, 0x47	; 71
 300:	89 b9       	out	0x09, r24	; 9
	UCSR0B = 0x18;
 302:	88 e1       	ldi	r24, 0x18	; 24
 304:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 306:	86 e0       	ldi	r24, 0x06	; 6
 308:	80 93 95 00 	sts	0x0095, r24

}
 30c:	08 95       	ret

0000030e <__vector_10>:

ISR(TIMER2_OVF_vect) {
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	0b b6       	in	r0, 0x3b	; 59
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31

	count++;
 334:	80 91 0e 02 	lds	r24, 0x020E
 338:	90 91 0f 02 	lds	r25, 0x020F
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	90 93 0f 02 	sts	0x020F, r25
 342:	80 93 0e 02 	sts	0x020E, r24

	if(count == 4) {
 346:	04 97       	sbiw	r24, 0x04	; 4
 348:	99 f4       	brne	.+38     	; 0x370 <__vector_10+0x62>
		
		PORTD = 0x04;
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	82 bb       	out	0x12, r24	; 18

		cli();
 34e:	f8 94       	cli
		
		ir = ir_sense(); 
 350:	0e 94 56 01 	call	0x2ac	; 0x2ac <ir_sense>
 354:	90 93 11 02 	sts	0x0211, r25
 358:	80 93 10 02 	sts	0x0210, r24
	}
}

void USART_Transmit( unsigned char data ) {

	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
 35c:	5d 9b       	sbis	0x0b, 5	; 11
 35e:	fe cf       	rjmp	.-4      	; 0x35c <__vector_10+0x4e>
	UDR0 = data; /* Put data into buffer, sends the data */
 360:	80 e3       	ldi	r24, 0x30	; 48
 362:	8c b9       	out	0x0c, r24	; 12
		
		ir = ir_sense(); 

		USART_Transmit('0');
		
		PORTD = 0x00;
 364:	12 ba       	out	0x12, r1	; 18

		count = 0;
 366:	10 92 0f 02 	sts	0x020F, r1
 36a:	10 92 0e 02 	sts	0x020E, r1

		sei();
 36e:	78 94       	sei
	}
}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0b be       	out	0x3b, r0	; 59
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <USART_Transmit>:

void USART_Transmit( unsigned char data ) {

	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
 396:	5d 9b       	sbis	0x0b, 5	; 11
 398:	fe cf       	rjmp	.-4      	; 0x396 <USART_Transmit>
	UDR0 = data; /* Put data into buffer, sends the data */
 39a:	8c b9       	out	0x0c, r24	; 12

}
 39c:	08 95       	ret

0000039e <__divsf3>:
 39e:	a8 e1       	ldi	r26, 0x18	; 24
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	e5 ed       	ldi	r30, 0xD5	; 213
 3a4:	f1 e0       	ldi	r31, 0x01	; 1
 3a6:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__prologue_saves__+0x10>
 3aa:	69 83       	std	Y+1, r22	; 0x01
 3ac:	7a 83       	std	Y+2, r23	; 0x02
 3ae:	8b 83       	std	Y+3, r24	; 0x03
 3b0:	9c 83       	std	Y+4, r25	; 0x04
 3b2:	2d 83       	std	Y+5, r18	; 0x05
 3b4:	3e 83       	std	Y+6, r19	; 0x06
 3b6:	4f 83       	std	Y+7, r20	; 0x07
 3b8:	58 87       	std	Y+8, r21	; 0x08
 3ba:	b9 e0       	ldi	r27, 0x09	; 9
 3bc:	eb 2e       	mov	r14, r27
 3be:	f1 2c       	mov	r15, r1
 3c0:	ec 0e       	add	r14, r28
 3c2:	fd 1e       	adc	r15, r29
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	b7 01       	movw	r22, r14
 3ca:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__unpack_f>
 3ce:	8e 01       	movw	r16, r28
 3d0:	0f 5e       	subi	r16, 0xEF	; 239
 3d2:	1f 4f       	sbci	r17, 0xFF	; 255
 3d4:	ce 01       	movw	r24, r28
 3d6:	05 96       	adiw	r24, 0x05	; 5
 3d8:	b8 01       	movw	r22, r16
 3da:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__unpack_f>
 3de:	29 85       	ldd	r18, Y+9	; 0x09
 3e0:	22 30       	cpi	r18, 0x02	; 2
 3e2:	08 f4       	brcc	.+2      	; 0x3e6 <__divsf3+0x48>
 3e4:	7e c0       	rjmp	.+252    	; 0x4e2 <__divsf3+0x144>
 3e6:	39 89       	ldd	r19, Y+17	; 0x11
 3e8:	32 30       	cpi	r19, 0x02	; 2
 3ea:	10 f4       	brcc	.+4      	; 0x3f0 <__divsf3+0x52>
 3ec:	b8 01       	movw	r22, r16
 3ee:	7c c0       	rjmp	.+248    	; 0x4e8 <__divsf3+0x14a>
 3f0:	8a 85       	ldd	r24, Y+10	; 0x0a
 3f2:	9a 89       	ldd	r25, Y+18	; 0x12
 3f4:	89 27       	eor	r24, r25
 3f6:	8a 87       	std	Y+10, r24	; 0x0a
 3f8:	24 30       	cpi	r18, 0x04	; 4
 3fa:	11 f0       	breq	.+4      	; 0x400 <__divsf3+0x62>
 3fc:	22 30       	cpi	r18, 0x02	; 2
 3fe:	31 f4       	brne	.+12     	; 0x40c <__divsf3+0x6e>
 400:	23 17       	cp	r18, r19
 402:	09 f0       	breq	.+2      	; 0x406 <__divsf3+0x68>
 404:	6e c0       	rjmp	.+220    	; 0x4e2 <__divsf3+0x144>
 406:	65 e0       	ldi	r22, 0x05	; 5
 408:	71 e0       	ldi	r23, 0x01	; 1
 40a:	6e c0       	rjmp	.+220    	; 0x4e8 <__divsf3+0x14a>
 40c:	34 30       	cpi	r19, 0x04	; 4
 40e:	39 f4       	brne	.+14     	; 0x41e <__divsf3+0x80>
 410:	1d 86       	std	Y+13, r1	; 0x0d
 412:	1e 86       	std	Y+14, r1	; 0x0e
 414:	1f 86       	std	Y+15, r1	; 0x0f
 416:	18 8a       	std	Y+16, r1	; 0x10
 418:	1c 86       	std	Y+12, r1	; 0x0c
 41a:	1b 86       	std	Y+11, r1	; 0x0b
 41c:	04 c0       	rjmp	.+8      	; 0x426 <__divsf3+0x88>
 41e:	32 30       	cpi	r19, 0x02	; 2
 420:	21 f4       	brne	.+8      	; 0x42a <__divsf3+0x8c>
 422:	84 e0       	ldi	r24, 0x04	; 4
 424:	89 87       	std	Y+9, r24	; 0x09
 426:	b7 01       	movw	r22, r14
 428:	5f c0       	rjmp	.+190    	; 0x4e8 <__divsf3+0x14a>
 42a:	2b 85       	ldd	r18, Y+11	; 0x0b
 42c:	3c 85       	ldd	r19, Y+12	; 0x0c
 42e:	8b 89       	ldd	r24, Y+19	; 0x13
 430:	9c 89       	ldd	r25, Y+20	; 0x14
 432:	28 1b       	sub	r18, r24
 434:	39 0b       	sbc	r19, r25
 436:	3c 87       	std	Y+12, r19	; 0x0c
 438:	2b 87       	std	Y+11, r18	; 0x0b
 43a:	ed 84       	ldd	r14, Y+13	; 0x0d
 43c:	fe 84       	ldd	r15, Y+14	; 0x0e
 43e:	0f 85       	ldd	r16, Y+15	; 0x0f
 440:	18 89       	ldd	r17, Y+16	; 0x10
 442:	ad 88       	ldd	r10, Y+21	; 0x15
 444:	be 88       	ldd	r11, Y+22	; 0x16
 446:	cf 88       	ldd	r12, Y+23	; 0x17
 448:	d8 8c       	ldd	r13, Y+24	; 0x18
 44a:	ea 14       	cp	r14, r10
 44c:	fb 04       	cpc	r15, r11
 44e:	0c 05       	cpc	r16, r12
 450:	1d 05       	cpc	r17, r13
 452:	40 f4       	brcc	.+16     	; 0x464 <__divsf3+0xc6>
 454:	ee 0c       	add	r14, r14
 456:	ff 1c       	adc	r15, r15
 458:	00 1f       	adc	r16, r16
 45a:	11 1f       	adc	r17, r17
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	30 40       	sbci	r19, 0x00	; 0
 460:	3c 87       	std	Y+12, r19	; 0x0c
 462:	2b 87       	std	Y+11, r18	; 0x0b
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	a0 e0       	ldi	r26, 0x00	; 0
 472:	b0 e4       	ldi	r27, 0x40	; 64
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	ea 14       	cp	r14, r10
 47a:	fb 04       	cpc	r15, r11
 47c:	0c 05       	cpc	r16, r12
 47e:	1d 05       	cpc	r17, r13
 480:	40 f0       	brcs	.+16     	; 0x492 <__divsf3+0xf4>
 482:	28 2b       	or	r18, r24
 484:	39 2b       	or	r19, r25
 486:	4a 2b       	or	r20, r26
 488:	5b 2b       	or	r21, r27
 48a:	ea 18       	sub	r14, r10
 48c:	fb 08       	sbc	r15, r11
 48e:	0c 09       	sbc	r16, r12
 490:	1d 09       	sbc	r17, r13
 492:	b6 95       	lsr	r27
 494:	a7 95       	ror	r26
 496:	97 95       	ror	r25
 498:	87 95       	ror	r24
 49a:	ee 0c       	add	r14, r14
 49c:	ff 1c       	adc	r15, r15
 49e:	00 1f       	adc	r16, r16
 4a0:	11 1f       	adc	r17, r17
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	6f 31       	cpi	r22, 0x1F	; 31
 4a8:	71 05       	cpc	r23, r1
 4aa:	31 f7       	brne	.-52     	; 0x478 <__divsf3+0xda>
 4ac:	da 01       	movw	r26, r20
 4ae:	c9 01       	movw	r24, r18
 4b0:	8f 77       	andi	r24, 0x7F	; 127
 4b2:	90 70       	andi	r25, 0x00	; 0
 4b4:	a0 70       	andi	r26, 0x00	; 0
 4b6:	b0 70       	andi	r27, 0x00	; 0
 4b8:	80 34       	cpi	r24, 0x40	; 64
 4ba:	91 05       	cpc	r25, r1
 4bc:	a1 05       	cpc	r26, r1
 4be:	b1 05       	cpc	r27, r1
 4c0:	61 f4       	brne	.+24     	; 0x4da <__divsf3+0x13c>
 4c2:	27 fd       	sbrc	r18, 7
 4c4:	0a c0       	rjmp	.+20     	; 0x4da <__divsf3+0x13c>
 4c6:	e1 14       	cp	r14, r1
 4c8:	f1 04       	cpc	r15, r1
 4ca:	01 05       	cpc	r16, r1
 4cc:	11 05       	cpc	r17, r1
 4ce:	29 f0       	breq	.+10     	; 0x4da <__divsf3+0x13c>
 4d0:	20 5c       	subi	r18, 0xC0	; 192
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	4f 4f       	sbci	r20, 0xFF	; 255
 4d6:	5f 4f       	sbci	r21, 0xFF	; 255
 4d8:	20 78       	andi	r18, 0x80	; 128
 4da:	2d 87       	std	Y+13, r18	; 0x0d
 4dc:	3e 87       	std	Y+14, r19	; 0x0e
 4de:	4f 87       	std	Y+15, r20	; 0x0f
 4e0:	58 8b       	std	Y+16, r21	; 0x10
 4e2:	be 01       	movw	r22, r28
 4e4:	67 5f       	subi	r22, 0xF7	; 247
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	cb 01       	movw	r24, r22
 4ea:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__pack_f>
 4ee:	68 96       	adiw	r28, 0x18	; 24
 4f0:	ea e0       	ldi	r30, 0x0A	; 10
 4f2:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__epilogue_restores__+0x10>

000004f6 <__floatsisf>:
 4f6:	a8 e0       	ldi	r26, 0x08	; 8
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e1 e8       	ldi	r30, 0x81	; 129
 4fc:	f2 e0       	ldi	r31, 0x02	; 2
 4fe:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__prologue_saves__+0x12>
 502:	9b 01       	movw	r18, r22
 504:	ac 01       	movw	r20, r24
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	89 83       	std	Y+1, r24	; 0x01
 50a:	da 01       	movw	r26, r20
 50c:	c9 01       	movw	r24, r18
 50e:	88 27       	eor	r24, r24
 510:	b7 fd       	sbrc	r27, 7
 512:	83 95       	inc	r24
 514:	99 27       	eor	r25, r25
 516:	aa 27       	eor	r26, r26
 518:	bb 27       	eor	r27, r27
 51a:	b8 2e       	mov	r11, r24
 51c:	21 15       	cp	r18, r1
 51e:	31 05       	cpc	r19, r1
 520:	41 05       	cpc	r20, r1
 522:	51 05       	cpc	r21, r1
 524:	19 f4       	brne	.+6      	; 0x52c <__floatsisf+0x36>
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	3a c0       	rjmp	.+116    	; 0x5a0 <__floatsisf+0xaa>
 52c:	88 23       	and	r24, r24
 52e:	a9 f0       	breq	.+42     	; 0x55a <__floatsisf+0x64>
 530:	20 30       	cpi	r18, 0x00	; 0
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	38 07       	cpc	r19, r24
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	48 07       	cpc	r20, r24
 53a:	80 e8       	ldi	r24, 0x80	; 128
 53c:	58 07       	cpc	r21, r24
 53e:	29 f4       	brne	.+10     	; 0x54a <__floatsisf+0x54>
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	9f ec       	ldi	r25, 0xCF	; 207
 548:	30 c0       	rjmp	.+96     	; 0x5aa <__floatsisf+0xb4>
 54a:	ee 24       	eor	r14, r14
 54c:	ff 24       	eor	r15, r15
 54e:	87 01       	movw	r16, r14
 550:	e2 1a       	sub	r14, r18
 552:	f3 0a       	sbc	r15, r19
 554:	04 0b       	sbc	r16, r20
 556:	15 0b       	sbc	r17, r21
 558:	02 c0       	rjmp	.+4      	; 0x55e <__floatsisf+0x68>
 55a:	79 01       	movw	r14, r18
 55c:	8a 01       	movw	r16, r20
 55e:	8e e1       	ldi	r24, 0x1E	; 30
 560:	c8 2e       	mov	r12, r24
 562:	d1 2c       	mov	r13, r1
 564:	dc 82       	std	Y+4, r13	; 0x04
 566:	cb 82       	std	Y+3, r12	; 0x03
 568:	ed 82       	std	Y+5, r14	; 0x05
 56a:	fe 82       	std	Y+6, r15	; 0x06
 56c:	0f 83       	std	Y+7, r16	; 0x07
 56e:	18 87       	std	Y+8, r17	; 0x08
 570:	c8 01       	movw	r24, r16
 572:	b7 01       	movw	r22, r14
 574:	0e 94 2d 03 	call	0x65a	; 0x65a <__clzsi2>
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	18 16       	cp	r1, r24
 57c:	19 06       	cpc	r1, r25
 57e:	84 f4       	brge	.+32     	; 0x5a0 <__floatsisf+0xaa>
 580:	08 2e       	mov	r0, r24
 582:	04 c0       	rjmp	.+8      	; 0x58c <__floatsisf+0x96>
 584:	ee 0c       	add	r14, r14
 586:	ff 1c       	adc	r15, r15
 588:	00 1f       	adc	r16, r16
 58a:	11 1f       	adc	r17, r17
 58c:	0a 94       	dec	r0
 58e:	d2 f7       	brpl	.-12     	; 0x584 <__floatsisf+0x8e>
 590:	ed 82       	std	Y+5, r14	; 0x05
 592:	fe 82       	std	Y+6, r15	; 0x06
 594:	0f 83       	std	Y+7, r16	; 0x07
 596:	18 87       	std	Y+8, r17	; 0x08
 598:	c8 1a       	sub	r12, r24
 59a:	d9 0a       	sbc	r13, r25
 59c:	dc 82       	std	Y+4, r13	; 0x04
 59e:	cb 82       	std	Y+3, r12	; 0x03
 5a0:	ba 82       	std	Y+2, r11	; 0x02
 5a2:	ce 01       	movw	r24, r28
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__pack_f>
 5aa:	28 96       	adiw	r28, 0x08	; 8
 5ac:	e9 e0       	ldi	r30, 0x09	; 9
 5ae:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__epilogue_restores__+0x12>

000005b2 <__fixsfsi>:
 5b2:	ac e0       	ldi	r26, 0x0C	; 12
 5b4:	b0 e0       	ldi	r27, 0x00	; 0
 5b6:	ef ed       	ldi	r30, 0xDF	; 223
 5b8:	f2 e0       	ldi	r31, 0x02	; 2
 5ba:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__prologue_saves__+0x20>
 5be:	69 83       	std	Y+1, r22	; 0x01
 5c0:	7a 83       	std	Y+2, r23	; 0x02
 5c2:	8b 83       	std	Y+3, r24	; 0x03
 5c4:	9c 83       	std	Y+4, r25	; 0x04
 5c6:	ce 01       	movw	r24, r28
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	be 01       	movw	r22, r28
 5cc:	6b 5f       	subi	r22, 0xFB	; 251
 5ce:	7f 4f       	sbci	r23, 0xFF	; 255
 5d0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__unpack_f>
 5d4:	8d 81       	ldd	r24, Y+5	; 0x05
 5d6:	82 30       	cpi	r24, 0x02	; 2
 5d8:	61 f1       	breq	.+88     	; 0x632 <__fixsfsi+0x80>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	50 f1       	brcs	.+84     	; 0x632 <__fixsfsi+0x80>
 5de:	84 30       	cpi	r24, 0x04	; 4
 5e0:	21 f4       	brne	.+8      	; 0x5ea <__fixsfsi+0x38>
 5e2:	8e 81       	ldd	r24, Y+6	; 0x06
 5e4:	88 23       	and	r24, r24
 5e6:	51 f1       	breq	.+84     	; 0x63c <__fixsfsi+0x8a>
 5e8:	2e c0       	rjmp	.+92     	; 0x646 <__fixsfsi+0x94>
 5ea:	2f 81       	ldd	r18, Y+7	; 0x07
 5ec:	38 85       	ldd	r19, Y+8	; 0x08
 5ee:	37 fd       	sbrc	r19, 7
 5f0:	20 c0       	rjmp	.+64     	; 0x632 <__fixsfsi+0x80>
 5f2:	6e 81       	ldd	r22, Y+6	; 0x06
 5f4:	2f 31       	cpi	r18, 0x1F	; 31
 5f6:	31 05       	cpc	r19, r1
 5f8:	1c f0       	brlt	.+6      	; 0x600 <__fixsfsi+0x4e>
 5fa:	66 23       	and	r22, r22
 5fc:	f9 f0       	breq	.+62     	; 0x63c <__fixsfsi+0x8a>
 5fe:	23 c0       	rjmp	.+70     	; 0x646 <__fixsfsi+0x94>
 600:	8e e1       	ldi	r24, 0x1E	; 30
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	82 1b       	sub	r24, r18
 606:	93 0b       	sbc	r25, r19
 608:	29 85       	ldd	r18, Y+9	; 0x09
 60a:	3a 85       	ldd	r19, Y+10	; 0x0a
 60c:	4b 85       	ldd	r20, Y+11	; 0x0b
 60e:	5c 85       	ldd	r21, Y+12	; 0x0c
 610:	04 c0       	rjmp	.+8      	; 0x61a <__fixsfsi+0x68>
 612:	56 95       	lsr	r21
 614:	47 95       	ror	r20
 616:	37 95       	ror	r19
 618:	27 95       	ror	r18
 61a:	8a 95       	dec	r24
 61c:	d2 f7       	brpl	.-12     	; 0x612 <__fixsfsi+0x60>
 61e:	66 23       	and	r22, r22
 620:	b1 f0       	breq	.+44     	; 0x64e <__fixsfsi+0x9c>
 622:	50 95       	com	r21
 624:	40 95       	com	r20
 626:	30 95       	com	r19
 628:	21 95       	neg	r18
 62a:	3f 4f       	sbci	r19, 0xFF	; 255
 62c:	4f 4f       	sbci	r20, 0xFF	; 255
 62e:	5f 4f       	sbci	r21, 0xFF	; 255
 630:	0e c0       	rjmp	.+28     	; 0x64e <__fixsfsi+0x9c>
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	09 c0       	rjmp	.+18     	; 0x64e <__fixsfsi+0x9c>
 63c:	2f ef       	ldi	r18, 0xFF	; 255
 63e:	3f ef       	ldi	r19, 0xFF	; 255
 640:	4f ef       	ldi	r20, 0xFF	; 255
 642:	5f e7       	ldi	r21, 0x7F	; 127
 644:	04 c0       	rjmp	.+8      	; 0x64e <__fixsfsi+0x9c>
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	40 e0       	ldi	r20, 0x00	; 0
 64c:	50 e8       	ldi	r21, 0x80	; 128
 64e:	b9 01       	movw	r22, r18
 650:	ca 01       	movw	r24, r20
 652:	2c 96       	adiw	r28, 0x0c	; 12
 654:	e2 e0       	ldi	r30, 0x02	; 2
 656:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__epilogue_restores__+0x20>

0000065a <__clzsi2>:
 65a:	ef 92       	push	r14
 65c:	ff 92       	push	r15
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	7b 01       	movw	r14, r22
 664:	8c 01       	movw	r16, r24
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	e8 16       	cp	r14, r24
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	f8 06       	cpc	r15, r24
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	08 07       	cpc	r16, r24
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	18 07       	cpc	r17, r24
 676:	88 f4       	brcc	.+34     	; 0x69a <__clzsi2+0x40>
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	e8 16       	cp	r14, r24
 67c:	f1 04       	cpc	r15, r1
 67e:	01 05       	cpc	r16, r1
 680:	11 05       	cpc	r17, r1
 682:	31 f0       	breq	.+12     	; 0x690 <__clzsi2+0x36>
 684:	28 f0       	brcs	.+10     	; 0x690 <__clzsi2+0x36>
 686:	88 e0       	ldi	r24, 0x08	; 8
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	a0 e0       	ldi	r26, 0x00	; 0
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	17 c0       	rjmp	.+46     	; 0x6be <__clzsi2+0x64>
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	a0 e0       	ldi	r26, 0x00	; 0
 696:	b0 e0       	ldi	r27, 0x00	; 0
 698:	12 c0       	rjmp	.+36     	; 0x6be <__clzsi2+0x64>
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	e8 16       	cp	r14, r24
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	f8 06       	cpc	r15, r24
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	08 07       	cpc	r16, r24
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	18 07       	cpc	r17, r24
 6aa:	28 f0       	brcs	.+10     	; 0x6b6 <__clzsi2+0x5c>
 6ac:	88 e1       	ldi	r24, 0x18	; 24
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	a0 e0       	ldi	r26, 0x00	; 0
 6b2:	b0 e0       	ldi	r27, 0x00	; 0
 6b4:	04 c0       	rjmp	.+8      	; 0x6be <__clzsi2+0x64>
 6b6:	80 e1       	ldi	r24, 0x10	; 16
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	a0 e0       	ldi	r26, 0x00	; 0
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	20 e2       	ldi	r18, 0x20	; 32
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	40 e0       	ldi	r20, 0x00	; 0
 6c4:	50 e0       	ldi	r21, 0x00	; 0
 6c6:	28 1b       	sub	r18, r24
 6c8:	39 0b       	sbc	r19, r25
 6ca:	4a 0b       	sbc	r20, r26
 6cc:	5b 0b       	sbc	r21, r27
 6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <__clzsi2+0x7e>
 6d0:	16 95       	lsr	r17
 6d2:	07 95       	ror	r16
 6d4:	f7 94       	ror	r15
 6d6:	e7 94       	ror	r14
 6d8:	8a 95       	dec	r24
 6da:	d2 f7       	brpl	.-12     	; 0x6d0 <__clzsi2+0x76>
 6dc:	f7 01       	movw	r30, r14
 6de:	e3 5f       	subi	r30, 0xF3	; 243
 6e0:	fe 4f       	sbci	r31, 0xFE	; 254
 6e2:	80 81       	ld	r24, Z
 6e4:	28 1b       	sub	r18, r24
 6e6:	31 09       	sbc	r19, r1
 6e8:	41 09       	sbc	r20, r1
 6ea:	51 09       	sbc	r21, r1
 6ec:	c9 01       	movw	r24, r18
 6ee:	1f 91       	pop	r17
 6f0:	0f 91       	pop	r16
 6f2:	ff 90       	pop	r15
 6f4:	ef 90       	pop	r14
 6f6:	08 95       	ret

000006f8 <__pack_f>:
 6f8:	df 92       	push	r13
 6fa:	ef 92       	push	r14
 6fc:	ff 92       	push	r15
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	fc 01       	movw	r30, r24
 704:	e4 80       	ldd	r14, Z+4	; 0x04
 706:	f5 80       	ldd	r15, Z+5	; 0x05
 708:	06 81       	ldd	r16, Z+6	; 0x06
 70a:	17 81       	ldd	r17, Z+7	; 0x07
 70c:	d1 80       	ldd	r13, Z+1	; 0x01
 70e:	80 81       	ld	r24, Z
 710:	82 30       	cpi	r24, 0x02	; 2
 712:	48 f4       	brcc	.+18     	; 0x726 <__pack_f+0x2e>
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	a0 e1       	ldi	r26, 0x10	; 16
 71a:	b0 e0       	ldi	r27, 0x00	; 0
 71c:	e8 2a       	or	r14, r24
 71e:	f9 2a       	or	r15, r25
 720:	0a 2b       	or	r16, r26
 722:	1b 2b       	or	r17, r27
 724:	a5 c0       	rjmp	.+330    	; 0x870 <__pack_f+0x178>
 726:	84 30       	cpi	r24, 0x04	; 4
 728:	09 f4       	brne	.+2      	; 0x72c <__pack_f+0x34>
 72a:	9f c0       	rjmp	.+318    	; 0x86a <__pack_f+0x172>
 72c:	82 30       	cpi	r24, 0x02	; 2
 72e:	21 f4       	brne	.+8      	; 0x738 <__pack_f+0x40>
 730:	ee 24       	eor	r14, r14
 732:	ff 24       	eor	r15, r15
 734:	87 01       	movw	r16, r14
 736:	05 c0       	rjmp	.+10     	; 0x742 <__pack_f+0x4a>
 738:	e1 14       	cp	r14, r1
 73a:	f1 04       	cpc	r15, r1
 73c:	01 05       	cpc	r16, r1
 73e:	11 05       	cpc	r17, r1
 740:	19 f4       	brne	.+6      	; 0x748 <__pack_f+0x50>
 742:	e0 e0       	ldi	r30, 0x00	; 0
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	96 c0       	rjmp	.+300    	; 0x874 <__pack_f+0x17c>
 748:	62 81       	ldd	r22, Z+2	; 0x02
 74a:	73 81       	ldd	r23, Z+3	; 0x03
 74c:	9f ef       	ldi	r25, 0xFF	; 255
 74e:	62 38       	cpi	r22, 0x82	; 130
 750:	79 07       	cpc	r23, r25
 752:	0c f0       	brlt	.+2      	; 0x756 <__pack_f+0x5e>
 754:	5b c0       	rjmp	.+182    	; 0x80c <__pack_f+0x114>
 756:	22 e8       	ldi	r18, 0x82	; 130
 758:	3f ef       	ldi	r19, 0xFF	; 255
 75a:	26 1b       	sub	r18, r22
 75c:	37 0b       	sbc	r19, r23
 75e:	2a 31       	cpi	r18, 0x1A	; 26
 760:	31 05       	cpc	r19, r1
 762:	2c f0       	brlt	.+10     	; 0x76e <__pack_f+0x76>
 764:	20 e0       	ldi	r18, 0x00	; 0
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	40 e0       	ldi	r20, 0x00	; 0
 76a:	50 e0       	ldi	r21, 0x00	; 0
 76c:	2a c0       	rjmp	.+84     	; 0x7c2 <__pack_f+0xca>
 76e:	b8 01       	movw	r22, r16
 770:	a7 01       	movw	r20, r14
 772:	02 2e       	mov	r0, r18
 774:	04 c0       	rjmp	.+8      	; 0x77e <__pack_f+0x86>
 776:	76 95       	lsr	r23
 778:	67 95       	ror	r22
 77a:	57 95       	ror	r21
 77c:	47 95       	ror	r20
 77e:	0a 94       	dec	r0
 780:	d2 f7       	brpl	.-12     	; 0x776 <__pack_f+0x7e>
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	a0 e0       	ldi	r26, 0x00	; 0
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	04 c0       	rjmp	.+8      	; 0x794 <__pack_f+0x9c>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	aa 1f       	adc	r26, r26
 792:	bb 1f       	adc	r27, r27
 794:	2a 95       	dec	r18
 796:	d2 f7       	brpl	.-12     	; 0x78c <__pack_f+0x94>
 798:	01 97       	sbiw	r24, 0x01	; 1
 79a:	a1 09       	sbc	r26, r1
 79c:	b1 09       	sbc	r27, r1
 79e:	8e 21       	and	r24, r14
 7a0:	9f 21       	and	r25, r15
 7a2:	a0 23       	and	r26, r16
 7a4:	b1 23       	and	r27, r17
 7a6:	00 97       	sbiw	r24, 0x00	; 0
 7a8:	a1 05       	cpc	r26, r1
 7aa:	b1 05       	cpc	r27, r1
 7ac:	21 f0       	breq	.+8      	; 0x7b6 <__pack_f+0xbe>
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	a0 e0       	ldi	r26, 0x00	; 0
 7b4:	b0 e0       	ldi	r27, 0x00	; 0
 7b6:	9a 01       	movw	r18, r20
 7b8:	ab 01       	movw	r20, r22
 7ba:	28 2b       	or	r18, r24
 7bc:	39 2b       	or	r19, r25
 7be:	4a 2b       	or	r20, r26
 7c0:	5b 2b       	or	r21, r27
 7c2:	da 01       	movw	r26, r20
 7c4:	c9 01       	movw	r24, r18
 7c6:	8f 77       	andi	r24, 0x7F	; 127
 7c8:	90 70       	andi	r25, 0x00	; 0
 7ca:	a0 70       	andi	r26, 0x00	; 0
 7cc:	b0 70       	andi	r27, 0x00	; 0
 7ce:	80 34       	cpi	r24, 0x40	; 64
 7d0:	91 05       	cpc	r25, r1
 7d2:	a1 05       	cpc	r26, r1
 7d4:	b1 05       	cpc	r27, r1
 7d6:	39 f4       	brne	.+14     	; 0x7e6 <__pack_f+0xee>
 7d8:	27 ff       	sbrs	r18, 7
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <__pack_f+0xf6>
 7dc:	20 5c       	subi	r18, 0xC0	; 192
 7de:	3f 4f       	sbci	r19, 0xFF	; 255
 7e0:	4f 4f       	sbci	r20, 0xFF	; 255
 7e2:	5f 4f       	sbci	r21, 0xFF	; 255
 7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__pack_f+0xf6>
 7e6:	21 5c       	subi	r18, 0xC1	; 193
 7e8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ea:	4f 4f       	sbci	r20, 0xFF	; 255
 7ec:	5f 4f       	sbci	r21, 0xFF	; 255
 7ee:	e0 e0       	ldi	r30, 0x00	; 0
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	20 30       	cpi	r18, 0x00	; 0
 7f4:	a0 e0       	ldi	r26, 0x00	; 0
 7f6:	3a 07       	cpc	r19, r26
 7f8:	a0 e0       	ldi	r26, 0x00	; 0
 7fa:	4a 07       	cpc	r20, r26
 7fc:	a0 e4       	ldi	r26, 0x40	; 64
 7fe:	5a 07       	cpc	r21, r26
 800:	10 f0       	brcs	.+4      	; 0x806 <__pack_f+0x10e>
 802:	e1 e0       	ldi	r30, 0x01	; 1
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	79 01       	movw	r14, r18
 808:	8a 01       	movw	r16, r20
 80a:	27 c0       	rjmp	.+78     	; 0x85a <__pack_f+0x162>
 80c:	60 38       	cpi	r22, 0x80	; 128
 80e:	71 05       	cpc	r23, r1
 810:	64 f5       	brge	.+88     	; 0x86a <__pack_f+0x172>
 812:	fb 01       	movw	r30, r22
 814:	e1 58       	subi	r30, 0x81	; 129
 816:	ff 4f       	sbci	r31, 0xFF	; 255
 818:	d8 01       	movw	r26, r16
 81a:	c7 01       	movw	r24, r14
 81c:	8f 77       	andi	r24, 0x7F	; 127
 81e:	90 70       	andi	r25, 0x00	; 0
 820:	a0 70       	andi	r26, 0x00	; 0
 822:	b0 70       	andi	r27, 0x00	; 0
 824:	80 34       	cpi	r24, 0x40	; 64
 826:	91 05       	cpc	r25, r1
 828:	a1 05       	cpc	r26, r1
 82a:	b1 05       	cpc	r27, r1
 82c:	39 f4       	brne	.+14     	; 0x83c <__pack_f+0x144>
 82e:	e7 fe       	sbrs	r14, 7
 830:	0d c0       	rjmp	.+26     	; 0x84c <__pack_f+0x154>
 832:	80 e4       	ldi	r24, 0x40	; 64
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	a0 e0       	ldi	r26, 0x00	; 0
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	04 c0       	rjmp	.+8      	; 0x844 <__pack_f+0x14c>
 83c:	8f e3       	ldi	r24, 0x3F	; 63
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	a0 e0       	ldi	r26, 0x00	; 0
 842:	b0 e0       	ldi	r27, 0x00	; 0
 844:	e8 0e       	add	r14, r24
 846:	f9 1e       	adc	r15, r25
 848:	0a 1f       	adc	r16, r26
 84a:	1b 1f       	adc	r17, r27
 84c:	17 ff       	sbrs	r17, 7
 84e:	05 c0       	rjmp	.+10     	; 0x85a <__pack_f+0x162>
 850:	16 95       	lsr	r17
 852:	07 95       	ror	r16
 854:	f7 94       	ror	r15
 856:	e7 94       	ror	r14
 858:	31 96       	adiw	r30, 0x01	; 1
 85a:	87 e0       	ldi	r24, 0x07	; 7
 85c:	16 95       	lsr	r17
 85e:	07 95       	ror	r16
 860:	f7 94       	ror	r15
 862:	e7 94       	ror	r14
 864:	8a 95       	dec	r24
 866:	d1 f7       	brne	.-12     	; 0x85c <__pack_f+0x164>
 868:	05 c0       	rjmp	.+10     	; 0x874 <__pack_f+0x17c>
 86a:	ee 24       	eor	r14, r14
 86c:	ff 24       	eor	r15, r15
 86e:	87 01       	movw	r16, r14
 870:	ef ef       	ldi	r30, 0xFF	; 255
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	6e 2f       	mov	r22, r30
 876:	67 95       	ror	r22
 878:	66 27       	eor	r22, r22
 87a:	67 95       	ror	r22
 87c:	90 2f       	mov	r25, r16
 87e:	9f 77       	andi	r25, 0x7F	; 127
 880:	d7 94       	ror	r13
 882:	dd 24       	eor	r13, r13
 884:	d7 94       	ror	r13
 886:	8e 2f       	mov	r24, r30
 888:	86 95       	lsr	r24
 88a:	49 2f       	mov	r20, r25
 88c:	46 2b       	or	r20, r22
 88e:	58 2f       	mov	r21, r24
 890:	5d 29       	or	r21, r13
 892:	b7 01       	movw	r22, r14
 894:	ca 01       	movw	r24, r20
 896:	1f 91       	pop	r17
 898:	0f 91       	pop	r16
 89a:	ff 90       	pop	r15
 89c:	ef 90       	pop	r14
 89e:	df 90       	pop	r13
 8a0:	08 95       	ret

000008a2 <__unpack_f>:
 8a2:	fc 01       	movw	r30, r24
 8a4:	db 01       	movw	r26, r22
 8a6:	40 81       	ld	r20, Z
 8a8:	51 81       	ldd	r21, Z+1	; 0x01
 8aa:	22 81       	ldd	r18, Z+2	; 0x02
 8ac:	62 2f       	mov	r22, r18
 8ae:	6f 77       	andi	r22, 0x7F	; 127
 8b0:	70 e0       	ldi	r23, 0x00	; 0
 8b2:	22 1f       	adc	r18, r18
 8b4:	22 27       	eor	r18, r18
 8b6:	22 1f       	adc	r18, r18
 8b8:	93 81       	ldd	r25, Z+3	; 0x03
 8ba:	89 2f       	mov	r24, r25
 8bc:	88 0f       	add	r24, r24
 8be:	82 2b       	or	r24, r18
 8c0:	28 2f       	mov	r18, r24
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	99 1f       	adc	r25, r25
 8c6:	99 27       	eor	r25, r25
 8c8:	99 1f       	adc	r25, r25
 8ca:	11 96       	adiw	r26, 0x01	; 1
 8cc:	9c 93       	st	X, r25
 8ce:	11 97       	sbiw	r26, 0x01	; 1
 8d0:	21 15       	cp	r18, r1
 8d2:	31 05       	cpc	r19, r1
 8d4:	a9 f5       	brne	.+106    	; 0x940 <__unpack_f+0x9e>
 8d6:	41 15       	cp	r20, r1
 8d8:	51 05       	cpc	r21, r1
 8da:	61 05       	cpc	r22, r1
 8dc:	71 05       	cpc	r23, r1
 8de:	11 f4       	brne	.+4      	; 0x8e4 <__unpack_f+0x42>
 8e0:	82 e0       	ldi	r24, 0x02	; 2
 8e2:	37 c0       	rjmp	.+110    	; 0x952 <__unpack_f+0xb0>
 8e4:	82 e8       	ldi	r24, 0x82	; 130
 8e6:	9f ef       	ldi	r25, 0xFF	; 255
 8e8:	13 96       	adiw	r26, 0x03	; 3
 8ea:	9c 93       	st	X, r25
 8ec:	8e 93       	st	-X, r24
 8ee:	12 97       	sbiw	r26, 0x02	; 2
 8f0:	9a 01       	movw	r18, r20
 8f2:	ab 01       	movw	r20, r22
 8f4:	67 e0       	ldi	r22, 0x07	; 7
 8f6:	22 0f       	add	r18, r18
 8f8:	33 1f       	adc	r19, r19
 8fa:	44 1f       	adc	r20, r20
 8fc:	55 1f       	adc	r21, r21
 8fe:	6a 95       	dec	r22
 900:	d1 f7       	brne	.-12     	; 0x8f6 <__unpack_f+0x54>
 902:	83 e0       	ldi	r24, 0x03	; 3
 904:	8c 93       	st	X, r24
 906:	0d c0       	rjmp	.+26     	; 0x922 <__unpack_f+0x80>
 908:	22 0f       	add	r18, r18
 90a:	33 1f       	adc	r19, r19
 90c:	44 1f       	adc	r20, r20
 90e:	55 1f       	adc	r21, r21
 910:	12 96       	adiw	r26, 0x02	; 2
 912:	8d 91       	ld	r24, X+
 914:	9c 91       	ld	r25, X
 916:	13 97       	sbiw	r26, 0x03	; 3
 918:	01 97       	sbiw	r24, 0x01	; 1
 91a:	13 96       	adiw	r26, 0x03	; 3
 91c:	9c 93       	st	X, r25
 91e:	8e 93       	st	-X, r24
 920:	12 97       	sbiw	r26, 0x02	; 2
 922:	20 30       	cpi	r18, 0x00	; 0
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	38 07       	cpc	r19, r24
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	48 07       	cpc	r20, r24
 92c:	80 e4       	ldi	r24, 0x40	; 64
 92e:	58 07       	cpc	r21, r24
 930:	58 f3       	brcs	.-42     	; 0x908 <__unpack_f+0x66>
 932:	14 96       	adiw	r26, 0x04	; 4
 934:	2d 93       	st	X+, r18
 936:	3d 93       	st	X+, r19
 938:	4d 93       	st	X+, r20
 93a:	5c 93       	st	X, r21
 93c:	17 97       	sbiw	r26, 0x07	; 7
 93e:	08 95       	ret
 940:	2f 3f       	cpi	r18, 0xFF	; 255
 942:	31 05       	cpc	r19, r1
 944:	79 f4       	brne	.+30     	; 0x964 <__unpack_f+0xc2>
 946:	41 15       	cp	r20, r1
 948:	51 05       	cpc	r21, r1
 94a:	61 05       	cpc	r22, r1
 94c:	71 05       	cpc	r23, r1
 94e:	19 f4       	brne	.+6      	; 0x956 <__unpack_f+0xb4>
 950:	84 e0       	ldi	r24, 0x04	; 4
 952:	8c 93       	st	X, r24
 954:	08 95       	ret
 956:	64 ff       	sbrs	r22, 4
 958:	03 c0       	rjmp	.+6      	; 0x960 <__unpack_f+0xbe>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	8c 93       	st	X, r24
 95e:	12 c0       	rjmp	.+36     	; 0x984 <__unpack_f+0xe2>
 960:	1c 92       	st	X, r1
 962:	10 c0       	rjmp	.+32     	; 0x984 <__unpack_f+0xe2>
 964:	2f 57       	subi	r18, 0x7F	; 127
 966:	30 40       	sbci	r19, 0x00	; 0
 968:	13 96       	adiw	r26, 0x03	; 3
 96a:	3c 93       	st	X, r19
 96c:	2e 93       	st	-X, r18
 96e:	12 97       	sbiw	r26, 0x02	; 2
 970:	83 e0       	ldi	r24, 0x03	; 3
 972:	8c 93       	st	X, r24
 974:	87 e0       	ldi	r24, 0x07	; 7
 976:	44 0f       	add	r20, r20
 978:	55 1f       	adc	r21, r21
 97a:	66 1f       	adc	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	8a 95       	dec	r24
 980:	d1 f7       	brne	.-12     	; 0x976 <__unpack_f+0xd4>
 982:	70 64       	ori	r23, 0x40	; 64
 984:	14 96       	adiw	r26, 0x04	; 4
 986:	4d 93       	st	X+, r20
 988:	5d 93       	st	X+, r21
 98a:	6d 93       	st	X+, r22
 98c:	7c 93       	st	X, r23
 98e:	17 97       	sbiw	r26, 0x07	; 7
 990:	08 95       	ret

00000992 <__divmodhi4>:
 992:	97 fb       	bst	r25, 7
 994:	09 2e       	mov	r0, r25
 996:	07 26       	eor	r0, r23
 998:	0a d0       	rcall	.+20     	; 0x9ae <__divmodhi4_neg1>
 99a:	77 fd       	sbrc	r23, 7
 99c:	04 d0       	rcall	.+8      	; 0x9a6 <__divmodhi4_neg2>
 99e:	0c d0       	rcall	.+24     	; 0x9b8 <__udivmodhi4>
 9a0:	06 d0       	rcall	.+12     	; 0x9ae <__divmodhi4_neg1>
 9a2:	00 20       	and	r0, r0
 9a4:	1a f4       	brpl	.+6      	; 0x9ac <__divmodhi4_exit>

000009a6 <__divmodhi4_neg2>:
 9a6:	70 95       	com	r23
 9a8:	61 95       	neg	r22
 9aa:	7f 4f       	sbci	r23, 0xFF	; 255

000009ac <__divmodhi4_exit>:
 9ac:	08 95       	ret

000009ae <__divmodhi4_neg1>:
 9ae:	f6 f7       	brtc	.-4      	; 0x9ac <__divmodhi4_exit>
 9b0:	90 95       	com	r25
 9b2:	81 95       	neg	r24
 9b4:	9f 4f       	sbci	r25, 0xFF	; 255
 9b6:	08 95       	ret

000009b8 <__udivmodhi4>:
 9b8:	aa 1b       	sub	r26, r26
 9ba:	bb 1b       	sub	r27, r27
 9bc:	51 e1       	ldi	r21, 0x11	; 17
 9be:	07 c0       	rjmp	.+14     	; 0x9ce <__udivmodhi4_ep>

000009c0 <__udivmodhi4_loop>:
 9c0:	aa 1f       	adc	r26, r26
 9c2:	bb 1f       	adc	r27, r27
 9c4:	a6 17       	cp	r26, r22
 9c6:	b7 07       	cpc	r27, r23
 9c8:	10 f0       	brcs	.+4      	; 0x9ce <__udivmodhi4_ep>
 9ca:	a6 1b       	sub	r26, r22
 9cc:	b7 0b       	sbc	r27, r23

000009ce <__udivmodhi4_ep>:
 9ce:	88 1f       	adc	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	5a 95       	dec	r21
 9d4:	a9 f7       	brne	.-22     	; 0x9c0 <__udivmodhi4_loop>
 9d6:	80 95       	com	r24
 9d8:	90 95       	com	r25
 9da:	bc 01       	movw	r22, r24
 9dc:	cd 01       	movw	r24, r26
 9de:	08 95       	ret

000009e0 <__prologue_saves__>:
 9e0:	2f 92       	push	r2
 9e2:	3f 92       	push	r3
 9e4:	4f 92       	push	r4
 9e6:	5f 92       	push	r5
 9e8:	6f 92       	push	r6
 9ea:	7f 92       	push	r7
 9ec:	8f 92       	push	r8
 9ee:	9f 92       	push	r9
 9f0:	af 92       	push	r10
 9f2:	bf 92       	push	r11
 9f4:	cf 92       	push	r12
 9f6:	df 92       	push	r13
 9f8:	ef 92       	push	r14
 9fa:	ff 92       	push	r15
 9fc:	0f 93       	push	r16
 9fe:	1f 93       	push	r17
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
 a04:	cd b7       	in	r28, 0x3d	; 61
 a06:	de b7       	in	r29, 0x3e	; 62
 a08:	ca 1b       	sub	r28, r26
 a0a:	db 0b       	sbc	r29, r27
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	f8 94       	cli
 a10:	de bf       	out	0x3e, r29	; 62
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	cd bf       	out	0x3d, r28	; 61
 a16:	09 94       	ijmp

00000a18 <__epilogue_restores__>:
 a18:	2a 88       	ldd	r2, Y+18	; 0x12
 a1a:	39 88       	ldd	r3, Y+17	; 0x11
 a1c:	48 88       	ldd	r4, Y+16	; 0x10
 a1e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a20:	6e 84       	ldd	r6, Y+14	; 0x0e
 a22:	7d 84       	ldd	r7, Y+13	; 0x0d
 a24:	8c 84       	ldd	r8, Y+12	; 0x0c
 a26:	9b 84       	ldd	r9, Y+11	; 0x0b
 a28:	aa 84       	ldd	r10, Y+10	; 0x0a
 a2a:	b9 84       	ldd	r11, Y+9	; 0x09
 a2c:	c8 84       	ldd	r12, Y+8	; 0x08
 a2e:	df 80       	ldd	r13, Y+7	; 0x07
 a30:	ee 80       	ldd	r14, Y+6	; 0x06
 a32:	fd 80       	ldd	r15, Y+5	; 0x05
 a34:	0c 81       	ldd	r16, Y+4	; 0x04
 a36:	1b 81       	ldd	r17, Y+3	; 0x03
 a38:	aa 81       	ldd	r26, Y+2	; 0x02
 a3a:	b9 81       	ldd	r27, Y+1	; 0x01
 a3c:	ce 0f       	add	r28, r30
 a3e:	d1 1d       	adc	r29, r1
 a40:	0f b6       	in	r0, 0x3f	; 63
 a42:	f8 94       	cli
 a44:	de bf       	out	0x3e, r29	; 62
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	cd bf       	out	0x3d, r28	; 61
 a4a:	ed 01       	movw	r28, r26
 a4c:	08 95       	ret

00000a4e <_exit>:
 a4e:	f8 94       	cli

00000a50 <__stop_program>:
 a50:	ff cf       	rjmp	.-2      	; 0xa50 <__stop_program>
