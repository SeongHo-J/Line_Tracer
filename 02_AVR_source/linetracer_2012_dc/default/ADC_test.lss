
ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001e4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000059  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000051a  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000137  00000000  00000000  000007f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000314  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000120  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000149  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000f05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ee       	ldi	r30, 0xE4	; 228
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  b6:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <init_LCD>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	38 ed       	ldi	r19, 0xD8	; 216
  c2:	c9 01       	movw	r24, r18
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <init_LCD+0x6>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
  c8:	e5 e6       	ldi	r30, 0x65	; 101
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
  d0:	68 e3       	ldi	r22, 0x38	; 56
  d2:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
  d4:	80 81       	ld	r24, Z
  d6:	89 27       	eor	r24, r25
  d8:	80 83       	st	Z, r24
  da:	49 e9       	ldi	r20, 0x99	; 153
  dc:	55 e1       	ldi	r21, 0x15	; 21
  de:	da 01       	movw	r26, r20
  e0:	11 97       	sbiw	r26, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <init_LCD+0x22>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
  e4:	d9 01       	movw	r26, r18
  e6:	11 97       	sbiw	r26, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <init_LCD+0x28>
  ea:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
  ec:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
  ee:	80 81       	ld	r24, Z
  f0:	89 27       	eor	r24, r25
  f2:	80 83       	st	Z, r24
  f4:	da 01       	movw	r26, r20
  f6:	11 97       	sbiw	r26, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <init_LCD+0x38>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
  fa:	d9 01       	movw	r26, r18
  fc:	11 97       	sbiw	r26, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <init_LCD+0x3e>
 100:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 102:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 104:	80 81       	ld	r24, Z
 106:	89 27       	eor	r24, r25
 108:	80 83       	st	Z, r24
 10a:	da 01       	movw	r26, r20
 10c:	11 97       	sbiw	r26, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <init_LCD+0x4e>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 110:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 112:	9b bb       	out	0x1b, r25	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 114:	80 81       	ld	r24, Z
 116:	89 27       	eor	r24, r25
 118:	80 83       	st	Z, r24
 11a:	da 01       	movw	r26, r20
 11c:	11 97       	sbiw	r26, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <init_LCD+0x5e>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 120:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 122:	8c e0       	ldi	r24, 0x0C	; 12
 124:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 126:	80 81       	ld	r24, Z
 128:	89 27       	eor	r24, r25
 12a:	80 83       	st	Z, r24
 12c:	da 01       	movw	r26, r20
 12e:	11 97       	sbiw	r26, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <init_LCD+0x70>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 132:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 138:	80 81       	ld	r24, Z
 13a:	89 27       	eor	r24, r25
 13c:	80 83       	st	Z, r24
 13e:	ca 01       	movw	r24, r20
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <init_LCD+0x82>
	_delay_ms(20);
	LCD_wr_cmd(0x38);
	LCD_wr_cmd(0x04); //엔트리모드셋
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}
 144:	08 95       	ret

00000146 <LCD_wr_cmd>:

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 146:	e5 e6       	ldi	r30, 0x65	; 101
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 14e:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 150:	80 81       	ld	r24, Z
 152:	89 27       	eor	r24, r25
 154:	80 83       	st	Z, r24
 156:	89 e9       	ldi	r24, 0x99	; 153
 158:	95 e1       	ldi	r25, 0x15	; 21
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_wr_cmd+0x14>
	_delay_ms(2); //LCD 내부동작 시간
}
 15e:	08 95       	ret

00000160 <LCD_wr_data>:

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 160:	e5 e6       	ldi	r30, 0x65	; 101
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	95 e0       	ldi	r25, 0x05	; 5
 166:	90 83       	st	Z, r25
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
 168:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 16a:	80 81       	ld	r24, Z
 16c:	94 e0       	ldi	r25, 0x04	; 4
 16e:	89 27       	eor	r24, r25
 170:	80 83       	st	Z, r24
 172:	89 e9       	ldi	r24, 0x99	; 153
 174:	95 e1       	ldi	r25, 0x15	; 21
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_wr_data+0x16>
	_delay_ms(2); 
}
 17a:	08 95       	ret

0000017c <LCD_wr_string>:

void LCD_wr_string(char d_line, char *lcd_str) {
 17c:	fb 01       	movw	r30, r22
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 17e:	94 e0       	ldi	r25, 0x04	; 4
 180:	90 93 65 00 	sts	0x0065, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 184:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 186:	80 91 65 00 	lds	r24, 0x0065
 18a:	89 27       	eor	r24, r25
 18c:	80 93 65 00 	sts	0x0065, r24
 190:	89 e9       	ldi	r24, 0x99	; 153
 192:	95 e1       	ldi	r25, 0x15	; 21
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_wr_string+0x18>
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 198:	55 e0       	ldi	r21, 0x05	; 5
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 19a:	44 e0       	ldi	r20, 0x04	; 4
 19c:	29 e9       	ldi	r18, 0x99	; 153
 19e:	35 e1       	ldi	r19, 0x15	; 21
 1a0:	0c c0       	rjmp	.+24     	; 0x1ba <LCD_wr_string+0x3e>
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 1a2:	50 93 65 00 	sts	0x0065, r21
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
 1a6:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 1a8:	80 91 65 00 	lds	r24, 0x0065
 1ac:	84 27       	eor	r24, r20
 1ae:	80 93 65 00 	sts	0x0065, r24
 1b2:	c9 01       	movw	r24, r18
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_wr_string+0x38>
void LCD_wr_string(char d_line, char *lcd_str) {
	LCD_wr_cmd(d_line);
	
	while(*lcd_str != '\0') {
		LCD_wr_data(*lcd_str);
		lcd_str++;
 1b8:	31 96       	adiw	r30, 0x01	; 1
}

void LCD_wr_string(char d_line, char *lcd_str) {
	LCD_wr_cmd(d_line);
	
	while(*lcd_str != '\0') {
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	89 f7       	brne	.-30     	; 0x1a2 <LCD_wr_string+0x26>
		LCD_wr_data(*lcd_str);
		lcd_str++;
	}
}
 1c0:	08 95       	ret

000001c2 <main>:
void LCD_wr_data(char data);
void LCD_wr_string(char d_line, char *lcd_str);

int main(void) {

	DDRA = 0xFF;
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	8a bb       	out	0x1a, r24	; 26
	DDRF = 0xFF;
 1c6:	80 93 61 00 	sts	0x0061, r24

	PORTA = 0x00;
 1ca:	1b ba       	out	0x1b, r1	; 27
	PORTF = 0x00;
 1cc:	10 92 62 00 	sts	0x0062, r1

	init_LCD();
 1d0:	0e 94 5f 00 	call	0xbe	; 0xbe <init_LCD>

	char* string = "haeri";

	while(1) {
		
		LCD_wr_string(0x80, string);
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	71 e0       	ldi	r23, 0x01	; 1
 1da:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_wr_string>
 1de:	fa cf       	rjmp	.-12     	; 0x1d4 <main+0x12>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
