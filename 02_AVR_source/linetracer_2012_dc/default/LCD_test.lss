
LCD_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  000009a6  00000a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 000000e0  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000184  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000175f  00000000  00000000  00000d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000b83  00000000  00000000  000024ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000d1d  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00003d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000348  00000000  00000000  00003ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000621  00000000  00000000  00004228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f0  00000000  00000000  00004849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 29 01 	call	0x252	; 0x252 <main>
  b6:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <init_PWM>:

}

void init_PWM(void) {
	
	DDRB = 0xF0;
  be:	80 ef       	ldi	r24, 0xF0	; 240
  c0:	87 bb       	out	0x17, r24	; 23
	
	TCCR0 = 0x6F;
  c2:	8f e6       	ldi	r24, 0x6F	; 111
  c4:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	82 bf       	out	0x32, r24	; 50
	OCR0 = 0x00;
  ca:	11 be       	out	0x31, r1	; 49
}
  cc:	08 95       	ret

000000ce <init_ADC>:

void init_ADC(void) {
	
	DDRF = 0xFD;
  ce:	8d ef       	ldi	r24, 0xFD	; 253
  d0:	80 93 61 00 	sts	0x0061, r24
	
	ADMUX = 0xC2;
  d4:	82 ec       	ldi	r24, 0xC2	; 194
  d6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0xA7;
  d8:	87 ea       	ldi	r24, 0xA7	; 167
  da:	86 b9       	out	0x06, r24	; 6
}
  dc:	08 95       	ret

000000de <init_LCD>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	38 ed       	ldi	r19, 0xD8	; 216
  e2:	c9 01       	movw	r24, r18
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <init_LCD+0x6>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
  e8:	e5 e6       	ldi	r30, 0x65	; 101
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	94 e0       	ldi	r25, 0x04	; 4
  ee:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
  f0:	68 e3       	ldi	r22, 0x38	; 56
  f2:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
  f4:	80 81       	ld	r24, Z
  f6:	89 27       	eor	r24, r25
  f8:	80 83       	st	Z, r24
  fa:	49 e9       	ldi	r20, 0x99	; 153
  fc:	55 e1       	ldi	r21, 0x15	; 21
  fe:	da 01       	movw	r26, r20
 100:	11 97       	sbiw	r26, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <init_LCD+0x22>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 104:	d9 01       	movw	r26, r18
 106:	11 97       	sbiw	r26, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <init_LCD+0x28>
 10a:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 10c:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 10e:	80 81       	ld	r24, Z
 110:	89 27       	eor	r24, r25
 112:	80 83       	st	Z, r24
 114:	da 01       	movw	r26, r20
 116:	11 97       	sbiw	r26, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <init_LCD+0x38>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 11a:	d9 01       	movw	r26, r18
 11c:	11 97       	sbiw	r26, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <init_LCD+0x3e>
 120:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 122:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 124:	80 81       	ld	r24, Z
 126:	89 27       	eor	r24, r25
 128:	80 83       	st	Z, r24
 12a:	da 01       	movw	r26, r20
 12c:	11 97       	sbiw	r26, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <init_LCD+0x4e>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 130:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 132:	9b bb       	out	0x1b, r25	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 134:	80 81       	ld	r24, Z
 136:	89 27       	eor	r24, r25
 138:	80 83       	st	Z, r24
 13a:	da 01       	movw	r26, r20
 13c:	11 97       	sbiw	r26, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <init_LCD+0x5e>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 140:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 146:	80 81       	ld	r24, Z
 148:	89 27       	eor	r24, r25
 14a:	80 83       	st	Z, r24
 14c:	da 01       	movw	r26, r20
 14e:	11 97       	sbiw	r26, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <init_LCD+0x70>
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 152:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 158:	80 81       	ld	r24, Z
 15a:	89 27       	eor	r24, r25
 15c:	80 83       	st	Z, r24
 15e:	ca 01       	movw	r24, r20
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <init_LCD+0x82>
	_delay_ms(20);
	LCD_wr_cmd(0x38);
	LCD_wr_cmd(0x04); //엔트리모드셋
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}
 164:	08 95       	ret

00000166 <LCD_wr_cmd>:

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 166:	e5 e6       	ldi	r30, 0x65	; 101
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	90 83       	st	Z, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 16e:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 170:	80 81       	ld	r24, Z
 172:	89 27       	eor	r24, r25
 174:	80 83       	st	Z, r24
 176:	89 e9       	ldi	r24, 0x99	; 153
 178:	95 e1       	ldi	r25, 0x15	; 21
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_wr_cmd+0x14>
	_delay_ms(2); //LCD 내부동작 시간
}
 17e:	08 95       	ret

00000180 <LCD_wr_data>:

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 180:	e5 e6       	ldi	r30, 0x65	; 101
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	95 e0       	ldi	r25, 0x05	; 5
 186:	90 83       	st	Z, r25
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
 188:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 18a:	80 81       	ld	r24, Z
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	89 27       	eor	r24, r25
 190:	80 83       	st	Z, r24
 192:	89 e9       	ldi	r24, 0x99	; 153
 194:	95 e1       	ldi	r25, 0x15	; 21
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_wr_data+0x16>
	_delay_ms(2); 
}
 19a:	08 95       	ret

0000019c <LCD_wr_string>:

void LCD_wr_string(char d_line, char *lcd_str) {
 19c:	fb 01       	movw	r30, r22
	LCD_wr_cmd(0x0C); //표시 On
	LCD_wr_cmd(0x01); //화면 지우기
}

void LCD_wr_cmd(char cmd) {
	PORTG = 0x04; // 명령어쓰기 E=1(enable on ), RW=0(write), RS=0(command register)
 19e:	94 e0       	ldi	r25, 0x04	; 4
 1a0:	90 93 65 00 	sts	0x0065, r25
	PORTA = cmd; //PORTB에 데이터버스가 연결되어 있다.
 1a4:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
 1a6:	80 91 65 00 	lds	r24, 0x0065
 1aa:	89 27       	eor	r24, r25
 1ac:	80 93 65 00 	sts	0x0065, r24
 1b0:	89 e9       	ldi	r24, 0x99	; 153
 1b2:	95 e1       	ldi	r25, 0x15	; 21
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_wr_string+0x18>
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 1b8:	55 e0       	ldi	r21, 0x05	; 5
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 1ba:	44 e0       	ldi	r20, 0x04	; 4
 1bc:	29 e9       	ldi	r18, 0x99	; 153
 1be:	35 e1       	ldi	r19, 0x15	; 21
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <LCD_wr_string+0x3e>
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 1c2:	50 93 65 00 	sts	0x0065, r21
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
 1c6:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 1c8:	80 91 65 00 	lds	r24, 0x0065
 1cc:	84 27       	eor	r24, r20
 1ce:	80 93 65 00 	sts	0x0065, r24
 1d2:	c9 01       	movw	r24, r18
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_wr_string+0x38>
void LCD_wr_string(char d_line, char *lcd_str) {
	LCD_wr_cmd(d_line);
	
	while(*lcd_str != '\0') {
		LCD_wr_data(*lcd_str);
		lcd_str++;
 1d8:	31 96       	adiw	r30, 0x01	; 1
}

void LCD_wr_string(char d_line, char *lcd_str) {
	LCD_wr_cmd(d_line);
	
	while(*lcd_str != '\0') {
 1da:	80 81       	ld	r24, Z
 1dc:	88 23       	and	r24, r24
 1de:	89 f7       	brne	.-30     	; 0x1c2 <LCD_wr_string+0x26>
		LCD_wr_data(*lcd_str);
		lcd_str++;
	}
}
 1e0:	08 95       	ret

000001e2 <temp_sense>:

int temp_sense(void) {
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	ec ec       	ldi	r30, 0xCC	; 204
 1ec:	fa e0       	ldi	r31, 0x0A	; 10
		int cnt=0, tot=0, t=0, temp=0;

		for(cnt=0 ; cnt<32 ; cnt++) {
			ADCSRA |= 0xC0; // 0b=1100 0000 ADEN=1, ADSC=1
 1ee:	86 b1       	in	r24, 0x06	; 6
 1f0:	80 6c       	ori	r24, 0xC0	; 192
 1f2:	86 b9       	out	0x06, r24	; 6
			while((ADCSRA&0x10) == 0x00); // ADIF=1
 1f4:	34 9b       	sbis	0x06, 4	; 6
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <temp_sense+0x12>
			tot += ADCL+ADCH*256;
 1f8:	94 b1       	in	r25, 0x04	; 4
 1fa:	85 b1       	in	r24, 0x05	; 5
 1fc:	38 2f       	mov	r19, r24
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	d9 01       	movw	r26, r18
 202:	a9 0f       	add	r26, r25
 204:	b1 1d       	adc	r27, r1
 206:	4a 0f       	add	r20, r26
 208:	5b 1f       	adc	r21, r27
 20a:	cf 01       	movw	r24, r30
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <temp_sense+0x2a>
}

int temp_sense(void) {
		int cnt=0, tot=0, t=0, temp=0;

		for(cnt=0 ; cnt<32 ; cnt++) {
 210:	6f 5f       	subi	r22, 0xFF	; 255
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	60 32       	cpi	r22, 0x20	; 32
 216:	71 05       	cpc	r23, r1
 218:	51 f7       	brne	.-44     	; 0x1ee <temp_sense+0xc>
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	55 95       	asr	r21
 21e:	47 95       	ror	r20
 220:	8a 95       	dec	r24
 222:	e1 f7       	brne	.-8      	; 0x21c <temp_sense+0x3a>
 224:	ba 01       	movw	r22, r20
 226:	88 27       	eor	r24, r24
 228:	77 fd       	sbrc	r23, 7
 22a:	80 95       	com	r24
 22c:	98 2f       	mov	r25, r24
 22e:	0e 94 25 02 	call	0x44a	; 0x44a <__floatsisf>
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e2       	ldi	r20, 0x20	; 32
 238:	50 e4       	ldi	r21, 0x40	; 64
 23a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__divsf3>
 23e:	0e 94 83 02 	call	0x506	; 0x506 <__fixsfsi>
 242:	dc 01       	movw	r26, r24
 244:	cb 01       	movw	r24, r22
 246:	6a e0       	ldi	r22, 0x0A	; 10
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__divmodhi4>
 24e:	cb 01       	movw	r24, r22
		tot = (tot>>5);
		t = (tot/2.5);
		temp = t/10;

		return temp;
}
 250:	08 95       	ret

00000252 <main>:
void LCD_wr_data(char data);
void LCD_wr_string(char d_line, char *lcd_str);

int temp_sense(void);

int main(void) {
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
	
	DDRA = 0xFF;
 25e:	1f ef       	ldi	r17, 0xFF	; 255
 260:	1a bb       	out	0x1a, r17	; 26
	DDRC = 0xC0;
 262:	80 ec       	ldi	r24, 0xC0	; 192
 264:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 266:	11 bb       	out	0x11, r17	; 17
	DDRG = 0xFF;
 268:	10 93 64 00 	sts	0x0064, r17

	PORTD = 0x00;
 26c:	12 ba       	out	0x12, r1	; 18
	OCR0 = 0x00;
}

void init_ADC(void) {
	
	DDRF = 0xFD;
 26e:	8d ef       	ldi	r24, 0xFD	; 253
 270:	80 93 61 00 	sts	0x0061, r24
	
	ADMUX = 0xC2;
 274:	82 ec       	ldi	r24, 0xC2	; 194
 276:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0xA7;
 278:	87 ea       	ldi	r24, 0xA7	; 167
 27a:	86 b9       	out	0x06, r24	; 6
	int ir=0, ten=0, one=0;
	
	char *string = "ir is..";

	init_ADC();
	init_LCD();
 27c:	0e 94 6f 00 	call	0xde	; 0xde <init_LCD>

}

void init_PWM(void) {
	
	DDRB = 0xF0;
 280:	80 ef       	ldi	r24, 0xF0	; 240
 282:	87 bb       	out	0x17, r24	; 23
	
	TCCR0 = 0x6F;
 284:	8f e6       	ldi	r24, 0x6F	; 111
 286:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0xFF;
 288:	12 bf       	out	0x32, r17	; 50
	OCR0 = 0x00;
 28a:	11 be       	out	0x31, r1	; 49
	init_LCD();
	init_PWM();

	while(1) {

		PORTD = 0x04;
 28c:	24 e0       	ldi	r18, 0x04	; 4
 28e:	f2 2e       	mov	r15, r18
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 290:	95 e0       	ldi	r25, 0x05	; 5
 292:	e9 2e       	mov	r14, r25
 294:	c9 e9       	ldi	r28, 0x99	; 153
 296:	d5 e1       	ldi	r29, 0x15	; 21
	init_LCD();
	init_PWM();

	while(1) {

		PORTD = 0x04;
 298:	f2 ba       	out	0x12, r15	; 18

		ir = temp_sense();
 29a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <temp_sense>
 29e:	8c 01       	movw	r16, r24
		one = ir%10 + 0x30;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
 
		//PORTD = 0x00;

		LCD_wr_string(0x80, string);
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	71 e0       	ldi	r23, 0x01	; 1
 2a6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_wr_string>
		LCD_wr_data(ten);
 2aa:	c8 01       	movw	r24, r16
 2ac:	6a e0       	ldi	r22, 0x0A	; 10
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__divmodhi4>
 2b4:	60 5d       	subi	r22, 0xD0	; 208
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 2b8:	e0 92 65 00 	sts	0x0065, r14
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
 2bc:	6b bb       	out	0x1b, r22	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 2be:	80 91 65 00 	lds	r24, 0x0065
 2c2:	8f 25       	eor	r24, r15
 2c4:	80 93 65 00 	sts	0x0065, r24
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x78>
 
		//PORTD = 0x00;

		LCD_wr_string(0x80, string);
		LCD_wr_data(ten);
		LCD_wr_data(one);
 2ce:	c8 01       	movw	r24, r16
 2d0:	6a e0       	ldi	r22, 0x0A	; 10
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__divmodhi4>
 2d8:	c0 96       	adiw	r24, 0x30	; 48
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 : LCD 새로운 명령 제어 off
	_delay_ms(2); //LCD 내부동작 시간
}

void LCD_wr_data(char data) { 
	PORTG = 0x05; //데이터쓰기 E=1(enable on ), RW=0(write), RS=1(data register) 
 2da:	e0 92 65 00 	sts	0x0065, r14
	PORTA = data; //PORTB에 데이터버스가 연결되어 있다. 
 2de:	8b bb       	out	0x1b, r24	; 27
	PORTG = PORTG^0x04; //E 신호를 H->L로 하기 위해 
 2e0:	80 91 65 00 	lds	r24, 0x0065
 2e4:	8f 25       	eor	r24, r15
 2e6:	80 93 65 00 	sts	0x0065, r24
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0x9a>
 2f0:	d3 cf       	rjmp	.-90     	; 0x298 <main+0x46>

000002f2 <__divsf3>:
 2f2:	a8 e1       	ldi	r26, 0x18	; 24
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	ef e7       	ldi	r30, 0x7F	; 127
 2f8:	f1 e0       	ldi	r31, 0x01	; 1
 2fa:	0c 94 a2 04 	jmp	0x944	; 0x944 <__prologue_saves__+0x10>
 2fe:	69 83       	std	Y+1, r22	; 0x01
 300:	7a 83       	std	Y+2, r23	; 0x02
 302:	8b 83       	std	Y+3, r24	; 0x03
 304:	9c 83       	std	Y+4, r25	; 0x04
 306:	2d 83       	std	Y+5, r18	; 0x05
 308:	3e 83       	std	Y+6, r19	; 0x06
 30a:	4f 83       	std	Y+7, r20	; 0x07
 30c:	58 87       	std	Y+8, r21	; 0x08
 30e:	b9 e0       	ldi	r27, 0x09	; 9
 310:	eb 2e       	mov	r14, r27
 312:	f1 2c       	mov	r15, r1
 314:	ec 0e       	add	r14, r28
 316:	fd 1e       	adc	r15, r29
 318:	ce 01       	movw	r24, r28
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	b7 01       	movw	r22, r14
 31e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__unpack_f>
 322:	8e 01       	movw	r16, r28
 324:	0f 5e       	subi	r16, 0xEF	; 239
 326:	1f 4f       	sbci	r17, 0xFF	; 255
 328:	ce 01       	movw	r24, r28
 32a:	05 96       	adiw	r24, 0x05	; 5
 32c:	b8 01       	movw	r22, r16
 32e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__unpack_f>
 332:	29 85       	ldd	r18, Y+9	; 0x09
 334:	22 30       	cpi	r18, 0x02	; 2
 336:	08 f4       	brcc	.+2      	; 0x33a <__divsf3+0x48>
 338:	7e c0       	rjmp	.+252    	; 0x436 <__divsf3+0x144>
 33a:	39 89       	ldd	r19, Y+17	; 0x11
 33c:	32 30       	cpi	r19, 0x02	; 2
 33e:	10 f4       	brcc	.+4      	; 0x344 <__divsf3+0x52>
 340:	b8 01       	movw	r22, r16
 342:	7c c0       	rjmp	.+248    	; 0x43c <__divsf3+0x14a>
 344:	8a 85       	ldd	r24, Y+10	; 0x0a
 346:	9a 89       	ldd	r25, Y+18	; 0x12
 348:	89 27       	eor	r24, r25
 34a:	8a 87       	std	Y+10, r24	; 0x0a
 34c:	24 30       	cpi	r18, 0x04	; 4
 34e:	11 f0       	breq	.+4      	; 0x354 <__divsf3+0x62>
 350:	22 30       	cpi	r18, 0x02	; 2
 352:	31 f4       	brne	.+12     	; 0x360 <__divsf3+0x6e>
 354:	23 17       	cp	r18, r19
 356:	09 f0       	breq	.+2      	; 0x35a <__divsf3+0x68>
 358:	6e c0       	rjmp	.+220    	; 0x436 <__divsf3+0x144>
 35a:	68 e0       	ldi	r22, 0x08	; 8
 35c:	71 e0       	ldi	r23, 0x01	; 1
 35e:	6e c0       	rjmp	.+220    	; 0x43c <__divsf3+0x14a>
 360:	34 30       	cpi	r19, 0x04	; 4
 362:	39 f4       	brne	.+14     	; 0x372 <__divsf3+0x80>
 364:	1d 86       	std	Y+13, r1	; 0x0d
 366:	1e 86       	std	Y+14, r1	; 0x0e
 368:	1f 86       	std	Y+15, r1	; 0x0f
 36a:	18 8a       	std	Y+16, r1	; 0x10
 36c:	1c 86       	std	Y+12, r1	; 0x0c
 36e:	1b 86       	std	Y+11, r1	; 0x0b
 370:	04 c0       	rjmp	.+8      	; 0x37a <__divsf3+0x88>
 372:	32 30       	cpi	r19, 0x02	; 2
 374:	21 f4       	brne	.+8      	; 0x37e <__divsf3+0x8c>
 376:	84 e0       	ldi	r24, 0x04	; 4
 378:	89 87       	std	Y+9, r24	; 0x09
 37a:	b7 01       	movw	r22, r14
 37c:	5f c0       	rjmp	.+190    	; 0x43c <__divsf3+0x14a>
 37e:	2b 85       	ldd	r18, Y+11	; 0x0b
 380:	3c 85       	ldd	r19, Y+12	; 0x0c
 382:	8b 89       	ldd	r24, Y+19	; 0x13
 384:	9c 89       	ldd	r25, Y+20	; 0x14
 386:	28 1b       	sub	r18, r24
 388:	39 0b       	sbc	r19, r25
 38a:	3c 87       	std	Y+12, r19	; 0x0c
 38c:	2b 87       	std	Y+11, r18	; 0x0b
 38e:	ed 84       	ldd	r14, Y+13	; 0x0d
 390:	fe 84       	ldd	r15, Y+14	; 0x0e
 392:	0f 85       	ldd	r16, Y+15	; 0x0f
 394:	18 89       	ldd	r17, Y+16	; 0x10
 396:	ad 88       	ldd	r10, Y+21	; 0x15
 398:	be 88       	ldd	r11, Y+22	; 0x16
 39a:	cf 88       	ldd	r12, Y+23	; 0x17
 39c:	d8 8c       	ldd	r13, Y+24	; 0x18
 39e:	ea 14       	cp	r14, r10
 3a0:	fb 04       	cpc	r15, r11
 3a2:	0c 05       	cpc	r16, r12
 3a4:	1d 05       	cpc	r17, r13
 3a6:	40 f4       	brcc	.+16     	; 0x3b8 <__divsf3+0xc6>
 3a8:	ee 0c       	add	r14, r14
 3aa:	ff 1c       	adc	r15, r15
 3ac:	00 1f       	adc	r16, r16
 3ae:	11 1f       	adc	r17, r17
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	30 40       	sbci	r19, 0x00	; 0
 3b4:	3c 87       	std	Y+12, r19	; 0x0c
 3b6:	2b 87       	std	Y+11, r18	; 0x0b
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	a0 e0       	ldi	r26, 0x00	; 0
 3c6:	b0 e4       	ldi	r27, 0x40	; 64
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	ea 14       	cp	r14, r10
 3ce:	fb 04       	cpc	r15, r11
 3d0:	0c 05       	cpc	r16, r12
 3d2:	1d 05       	cpc	r17, r13
 3d4:	40 f0       	brcs	.+16     	; 0x3e6 <__divsf3+0xf4>
 3d6:	28 2b       	or	r18, r24
 3d8:	39 2b       	or	r19, r25
 3da:	4a 2b       	or	r20, r26
 3dc:	5b 2b       	or	r21, r27
 3de:	ea 18       	sub	r14, r10
 3e0:	fb 08       	sbc	r15, r11
 3e2:	0c 09       	sbc	r16, r12
 3e4:	1d 09       	sbc	r17, r13
 3e6:	b6 95       	lsr	r27
 3e8:	a7 95       	ror	r26
 3ea:	97 95       	ror	r25
 3ec:	87 95       	ror	r24
 3ee:	ee 0c       	add	r14, r14
 3f0:	ff 1c       	adc	r15, r15
 3f2:	00 1f       	adc	r16, r16
 3f4:	11 1f       	adc	r17, r17
 3f6:	6f 5f       	subi	r22, 0xFF	; 255
 3f8:	7f 4f       	sbci	r23, 0xFF	; 255
 3fa:	6f 31       	cpi	r22, 0x1F	; 31
 3fc:	71 05       	cpc	r23, r1
 3fe:	31 f7       	brne	.-52     	; 0x3cc <__divsf3+0xda>
 400:	da 01       	movw	r26, r20
 402:	c9 01       	movw	r24, r18
 404:	8f 77       	andi	r24, 0x7F	; 127
 406:	90 70       	andi	r25, 0x00	; 0
 408:	a0 70       	andi	r26, 0x00	; 0
 40a:	b0 70       	andi	r27, 0x00	; 0
 40c:	80 34       	cpi	r24, 0x40	; 64
 40e:	91 05       	cpc	r25, r1
 410:	a1 05       	cpc	r26, r1
 412:	b1 05       	cpc	r27, r1
 414:	61 f4       	brne	.+24     	; 0x42e <__divsf3+0x13c>
 416:	27 fd       	sbrc	r18, 7
 418:	0a c0       	rjmp	.+20     	; 0x42e <__divsf3+0x13c>
 41a:	e1 14       	cp	r14, r1
 41c:	f1 04       	cpc	r15, r1
 41e:	01 05       	cpc	r16, r1
 420:	11 05       	cpc	r17, r1
 422:	29 f0       	breq	.+10     	; 0x42e <__divsf3+0x13c>
 424:	20 5c       	subi	r18, 0xC0	; 192
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	4f 4f       	sbci	r20, 0xFF	; 255
 42a:	5f 4f       	sbci	r21, 0xFF	; 255
 42c:	20 78       	andi	r18, 0x80	; 128
 42e:	2d 87       	std	Y+13, r18	; 0x0d
 430:	3e 87       	std	Y+14, r19	; 0x0e
 432:	4f 87       	std	Y+15, r20	; 0x0f
 434:	58 8b       	std	Y+16, r21	; 0x10
 436:	be 01       	movw	r22, r28
 438:	67 5f       	subi	r22, 0xF7	; 247
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	cb 01       	movw	r24, r22
 43e:	0e 94 26 03 	call	0x64c	; 0x64c <__pack_f>
 442:	68 96       	adiw	r28, 0x18	; 24
 444:	ea e0       	ldi	r30, 0x0A	; 10
 446:	0c 94 be 04 	jmp	0x97c	; 0x97c <__epilogue_restores__+0x10>

0000044a <__floatsisf>:
 44a:	a8 e0       	ldi	r26, 0x08	; 8
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	eb e2       	ldi	r30, 0x2B	; 43
 450:	f2 e0       	ldi	r31, 0x02	; 2
 452:	0c 94 a3 04 	jmp	0x946	; 0x946 <__prologue_saves__+0x12>
 456:	9b 01       	movw	r18, r22
 458:	ac 01       	movw	r20, r24
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	89 83       	std	Y+1, r24	; 0x01
 45e:	da 01       	movw	r26, r20
 460:	c9 01       	movw	r24, r18
 462:	88 27       	eor	r24, r24
 464:	b7 fd       	sbrc	r27, 7
 466:	83 95       	inc	r24
 468:	99 27       	eor	r25, r25
 46a:	aa 27       	eor	r26, r26
 46c:	bb 27       	eor	r27, r27
 46e:	b8 2e       	mov	r11, r24
 470:	21 15       	cp	r18, r1
 472:	31 05       	cpc	r19, r1
 474:	41 05       	cpc	r20, r1
 476:	51 05       	cpc	r21, r1
 478:	19 f4       	brne	.+6      	; 0x480 <__floatsisf+0x36>
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	89 83       	std	Y+1, r24	; 0x01
 47e:	3a c0       	rjmp	.+116    	; 0x4f4 <__floatsisf+0xaa>
 480:	88 23       	and	r24, r24
 482:	a9 f0       	breq	.+42     	; 0x4ae <__floatsisf+0x64>
 484:	20 30       	cpi	r18, 0x00	; 0
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	38 07       	cpc	r19, r24
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	48 07       	cpc	r20, r24
 48e:	80 e8       	ldi	r24, 0x80	; 128
 490:	58 07       	cpc	r21, r24
 492:	29 f4       	brne	.+10     	; 0x49e <__floatsisf+0x54>
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	9f ec       	ldi	r25, 0xCF	; 207
 49c:	30 c0       	rjmp	.+96     	; 0x4fe <__floatsisf+0xb4>
 49e:	ee 24       	eor	r14, r14
 4a0:	ff 24       	eor	r15, r15
 4a2:	87 01       	movw	r16, r14
 4a4:	e2 1a       	sub	r14, r18
 4a6:	f3 0a       	sbc	r15, r19
 4a8:	04 0b       	sbc	r16, r20
 4aa:	15 0b       	sbc	r17, r21
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__floatsisf+0x68>
 4ae:	79 01       	movw	r14, r18
 4b0:	8a 01       	movw	r16, r20
 4b2:	8e e1       	ldi	r24, 0x1E	; 30
 4b4:	c8 2e       	mov	r12, r24
 4b6:	d1 2c       	mov	r13, r1
 4b8:	dc 82       	std	Y+4, r13	; 0x04
 4ba:	cb 82       	std	Y+3, r12	; 0x03
 4bc:	ed 82       	std	Y+5, r14	; 0x05
 4be:	fe 82       	std	Y+6, r15	; 0x06
 4c0:	0f 83       	std	Y+7, r16	; 0x07
 4c2:	18 87       	std	Y+8, r17	; 0x08
 4c4:	c8 01       	movw	r24, r16
 4c6:	b7 01       	movw	r22, r14
 4c8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__clzsi2>
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	18 16       	cp	r1, r24
 4d0:	19 06       	cpc	r1, r25
 4d2:	84 f4       	brge	.+32     	; 0x4f4 <__floatsisf+0xaa>
 4d4:	08 2e       	mov	r0, r24
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <__floatsisf+0x96>
 4d8:	ee 0c       	add	r14, r14
 4da:	ff 1c       	adc	r15, r15
 4dc:	00 1f       	adc	r16, r16
 4de:	11 1f       	adc	r17, r17
 4e0:	0a 94       	dec	r0
 4e2:	d2 f7       	brpl	.-12     	; 0x4d8 <__floatsisf+0x8e>
 4e4:	ed 82       	std	Y+5, r14	; 0x05
 4e6:	fe 82       	std	Y+6, r15	; 0x06
 4e8:	0f 83       	std	Y+7, r16	; 0x07
 4ea:	18 87       	std	Y+8, r17	; 0x08
 4ec:	c8 1a       	sub	r12, r24
 4ee:	d9 0a       	sbc	r13, r25
 4f0:	dc 82       	std	Y+4, r13	; 0x04
 4f2:	cb 82       	std	Y+3, r12	; 0x03
 4f4:	ba 82       	std	Y+2, r11	; 0x02
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	0e 94 26 03 	call	0x64c	; 0x64c <__pack_f>
 4fe:	28 96       	adiw	r28, 0x08	; 8
 500:	e9 e0       	ldi	r30, 0x09	; 9
 502:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__epilogue_restores__+0x12>

00000506 <__fixsfsi>:
 506:	ac e0       	ldi	r26, 0x0C	; 12
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	e9 e8       	ldi	r30, 0x89	; 137
 50c:	f2 e0       	ldi	r31, 0x02	; 2
 50e:	0c 94 aa 04 	jmp	0x954	; 0x954 <__prologue_saves__+0x20>
 512:	69 83       	std	Y+1, r22	; 0x01
 514:	7a 83       	std	Y+2, r23	; 0x02
 516:	8b 83       	std	Y+3, r24	; 0x03
 518:	9c 83       	std	Y+4, r25	; 0x04
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	be 01       	movw	r22, r28
 520:	6b 5f       	subi	r22, 0xFB	; 251
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__unpack_f>
 528:	8d 81       	ldd	r24, Y+5	; 0x05
 52a:	82 30       	cpi	r24, 0x02	; 2
 52c:	61 f1       	breq	.+88     	; 0x586 <__fixsfsi+0x80>
 52e:	82 30       	cpi	r24, 0x02	; 2
 530:	50 f1       	brcs	.+84     	; 0x586 <__fixsfsi+0x80>
 532:	84 30       	cpi	r24, 0x04	; 4
 534:	21 f4       	brne	.+8      	; 0x53e <__fixsfsi+0x38>
 536:	8e 81       	ldd	r24, Y+6	; 0x06
 538:	88 23       	and	r24, r24
 53a:	51 f1       	breq	.+84     	; 0x590 <__fixsfsi+0x8a>
 53c:	2e c0       	rjmp	.+92     	; 0x59a <__fixsfsi+0x94>
 53e:	2f 81       	ldd	r18, Y+7	; 0x07
 540:	38 85       	ldd	r19, Y+8	; 0x08
 542:	37 fd       	sbrc	r19, 7
 544:	20 c0       	rjmp	.+64     	; 0x586 <__fixsfsi+0x80>
 546:	6e 81       	ldd	r22, Y+6	; 0x06
 548:	2f 31       	cpi	r18, 0x1F	; 31
 54a:	31 05       	cpc	r19, r1
 54c:	1c f0       	brlt	.+6      	; 0x554 <__fixsfsi+0x4e>
 54e:	66 23       	and	r22, r22
 550:	f9 f0       	breq	.+62     	; 0x590 <__fixsfsi+0x8a>
 552:	23 c0       	rjmp	.+70     	; 0x59a <__fixsfsi+0x94>
 554:	8e e1       	ldi	r24, 0x1E	; 30
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	82 1b       	sub	r24, r18
 55a:	93 0b       	sbc	r25, r19
 55c:	29 85       	ldd	r18, Y+9	; 0x09
 55e:	3a 85       	ldd	r19, Y+10	; 0x0a
 560:	4b 85       	ldd	r20, Y+11	; 0x0b
 562:	5c 85       	ldd	r21, Y+12	; 0x0c
 564:	04 c0       	rjmp	.+8      	; 0x56e <__fixsfsi+0x68>
 566:	56 95       	lsr	r21
 568:	47 95       	ror	r20
 56a:	37 95       	ror	r19
 56c:	27 95       	ror	r18
 56e:	8a 95       	dec	r24
 570:	d2 f7       	brpl	.-12     	; 0x566 <__fixsfsi+0x60>
 572:	66 23       	and	r22, r22
 574:	b1 f0       	breq	.+44     	; 0x5a2 <__fixsfsi+0x9c>
 576:	50 95       	com	r21
 578:	40 95       	com	r20
 57a:	30 95       	com	r19
 57c:	21 95       	neg	r18
 57e:	3f 4f       	sbci	r19, 0xFF	; 255
 580:	4f 4f       	sbci	r20, 0xFF	; 255
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	0e c0       	rjmp	.+28     	; 0x5a2 <__fixsfsi+0x9c>
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <__fixsfsi+0x9c>
 590:	2f ef       	ldi	r18, 0xFF	; 255
 592:	3f ef       	ldi	r19, 0xFF	; 255
 594:	4f ef       	ldi	r20, 0xFF	; 255
 596:	5f e7       	ldi	r21, 0x7F	; 127
 598:	04 c0       	rjmp	.+8      	; 0x5a2 <__fixsfsi+0x9c>
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	50 e8       	ldi	r21, 0x80	; 128
 5a2:	b9 01       	movw	r22, r18
 5a4:	ca 01       	movw	r24, r20
 5a6:	2c 96       	adiw	r28, 0x0c	; 12
 5a8:	e2 e0       	ldi	r30, 0x02	; 2
 5aa:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__epilogue_restores__+0x20>

000005ae <__clzsi2>:
 5ae:	ef 92       	push	r14
 5b0:	ff 92       	push	r15
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	7b 01       	movw	r14, r22
 5b8:	8c 01       	movw	r16, r24
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	e8 16       	cp	r14, r24
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	f8 06       	cpc	r15, r24
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	08 07       	cpc	r16, r24
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	18 07       	cpc	r17, r24
 5ca:	88 f4       	brcc	.+34     	; 0x5ee <__clzsi2+0x40>
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	e8 16       	cp	r14, r24
 5d0:	f1 04       	cpc	r15, r1
 5d2:	01 05       	cpc	r16, r1
 5d4:	11 05       	cpc	r17, r1
 5d6:	31 f0       	breq	.+12     	; 0x5e4 <__clzsi2+0x36>
 5d8:	28 f0       	brcs	.+10     	; 0x5e4 <__clzsi2+0x36>
 5da:	88 e0       	ldi	r24, 0x08	; 8
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	a0 e0       	ldi	r26, 0x00	; 0
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	17 c0       	rjmp	.+46     	; 0x612 <__clzsi2+0x64>
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	a0 e0       	ldi	r26, 0x00	; 0
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
 5ec:	12 c0       	rjmp	.+36     	; 0x612 <__clzsi2+0x64>
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	e8 16       	cp	r14, r24
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	f8 06       	cpc	r15, r24
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	08 07       	cpc	r16, r24
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	18 07       	cpc	r17, r24
 5fe:	28 f0       	brcs	.+10     	; 0x60a <__clzsi2+0x5c>
 600:	88 e1       	ldi	r24, 0x18	; 24
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	a0 e0       	ldi	r26, 0x00	; 0
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	04 c0       	rjmp	.+8      	; 0x612 <__clzsi2+0x64>
 60a:	80 e1       	ldi	r24, 0x10	; 16
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	a0 e0       	ldi	r26, 0x00	; 0
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	20 e2       	ldi	r18, 0x20	; 32
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	28 1b       	sub	r18, r24
 61c:	39 0b       	sbc	r19, r25
 61e:	4a 0b       	sbc	r20, r26
 620:	5b 0b       	sbc	r21, r27
 622:	04 c0       	rjmp	.+8      	; 0x62c <__clzsi2+0x7e>
 624:	16 95       	lsr	r17
 626:	07 95       	ror	r16
 628:	f7 94       	ror	r15
 62a:	e7 94       	ror	r14
 62c:	8a 95       	dec	r24
 62e:	d2 f7       	brpl	.-12     	; 0x624 <__clzsi2+0x76>
 630:	f7 01       	movw	r30, r14
 632:	e0 5f       	subi	r30, 0xF0	; 240
 634:	fe 4f       	sbci	r31, 0xFE	; 254
 636:	80 81       	ld	r24, Z
 638:	28 1b       	sub	r18, r24
 63a:	31 09       	sbc	r19, r1
 63c:	41 09       	sbc	r20, r1
 63e:	51 09       	sbc	r21, r1
 640:	c9 01       	movw	r24, r18
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	08 95       	ret

0000064c <__pack_f>:
 64c:	df 92       	push	r13
 64e:	ef 92       	push	r14
 650:	ff 92       	push	r15
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	fc 01       	movw	r30, r24
 658:	e4 80       	ldd	r14, Z+4	; 0x04
 65a:	f5 80       	ldd	r15, Z+5	; 0x05
 65c:	06 81       	ldd	r16, Z+6	; 0x06
 65e:	17 81       	ldd	r17, Z+7	; 0x07
 660:	d1 80       	ldd	r13, Z+1	; 0x01
 662:	80 81       	ld	r24, Z
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	48 f4       	brcc	.+18     	; 0x67a <__pack_f+0x2e>
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	a0 e1       	ldi	r26, 0x10	; 16
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	e8 2a       	or	r14, r24
 672:	f9 2a       	or	r15, r25
 674:	0a 2b       	or	r16, r26
 676:	1b 2b       	or	r17, r27
 678:	a5 c0       	rjmp	.+330    	; 0x7c4 <__pack_f+0x178>
 67a:	84 30       	cpi	r24, 0x04	; 4
 67c:	09 f4       	brne	.+2      	; 0x680 <__pack_f+0x34>
 67e:	9f c0       	rjmp	.+318    	; 0x7be <__pack_f+0x172>
 680:	82 30       	cpi	r24, 0x02	; 2
 682:	21 f4       	brne	.+8      	; 0x68c <__pack_f+0x40>
 684:	ee 24       	eor	r14, r14
 686:	ff 24       	eor	r15, r15
 688:	87 01       	movw	r16, r14
 68a:	05 c0       	rjmp	.+10     	; 0x696 <__pack_f+0x4a>
 68c:	e1 14       	cp	r14, r1
 68e:	f1 04       	cpc	r15, r1
 690:	01 05       	cpc	r16, r1
 692:	11 05       	cpc	r17, r1
 694:	19 f4       	brne	.+6      	; 0x69c <__pack_f+0x50>
 696:	e0 e0       	ldi	r30, 0x00	; 0
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	96 c0       	rjmp	.+300    	; 0x7c8 <__pack_f+0x17c>
 69c:	62 81       	ldd	r22, Z+2	; 0x02
 69e:	73 81       	ldd	r23, Z+3	; 0x03
 6a0:	9f ef       	ldi	r25, 0xFF	; 255
 6a2:	62 38       	cpi	r22, 0x82	; 130
 6a4:	79 07       	cpc	r23, r25
 6a6:	0c f0       	brlt	.+2      	; 0x6aa <__pack_f+0x5e>
 6a8:	5b c0       	rjmp	.+182    	; 0x760 <__pack_f+0x114>
 6aa:	22 e8       	ldi	r18, 0x82	; 130
 6ac:	3f ef       	ldi	r19, 0xFF	; 255
 6ae:	26 1b       	sub	r18, r22
 6b0:	37 0b       	sbc	r19, r23
 6b2:	2a 31       	cpi	r18, 0x1A	; 26
 6b4:	31 05       	cpc	r19, r1
 6b6:	2c f0       	brlt	.+10     	; 0x6c2 <__pack_f+0x76>
 6b8:	20 e0       	ldi	r18, 0x00	; 0
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	40 e0       	ldi	r20, 0x00	; 0
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	2a c0       	rjmp	.+84     	; 0x716 <__pack_f+0xca>
 6c2:	b8 01       	movw	r22, r16
 6c4:	a7 01       	movw	r20, r14
 6c6:	02 2e       	mov	r0, r18
 6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <__pack_f+0x86>
 6ca:	76 95       	lsr	r23
 6cc:	67 95       	ror	r22
 6ce:	57 95       	ror	r21
 6d0:	47 95       	ror	r20
 6d2:	0a 94       	dec	r0
 6d4:	d2 f7       	brpl	.-12     	; 0x6ca <__pack_f+0x7e>
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	a0 e0       	ldi	r26, 0x00	; 0
 6dc:	b0 e0       	ldi	r27, 0x00	; 0
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <__pack_f+0x9c>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	aa 1f       	adc	r26, r26
 6e6:	bb 1f       	adc	r27, r27
 6e8:	2a 95       	dec	r18
 6ea:	d2 f7       	brpl	.-12     	; 0x6e0 <__pack_f+0x94>
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	a1 09       	sbc	r26, r1
 6f0:	b1 09       	sbc	r27, r1
 6f2:	8e 21       	and	r24, r14
 6f4:	9f 21       	and	r25, r15
 6f6:	a0 23       	and	r26, r16
 6f8:	b1 23       	and	r27, r17
 6fa:	00 97       	sbiw	r24, 0x00	; 0
 6fc:	a1 05       	cpc	r26, r1
 6fe:	b1 05       	cpc	r27, r1
 700:	21 f0       	breq	.+8      	; 0x70a <__pack_f+0xbe>
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	a0 e0       	ldi	r26, 0x00	; 0
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	9a 01       	movw	r18, r20
 70c:	ab 01       	movw	r20, r22
 70e:	28 2b       	or	r18, r24
 710:	39 2b       	or	r19, r25
 712:	4a 2b       	or	r20, r26
 714:	5b 2b       	or	r21, r27
 716:	da 01       	movw	r26, r20
 718:	c9 01       	movw	r24, r18
 71a:	8f 77       	andi	r24, 0x7F	; 127
 71c:	90 70       	andi	r25, 0x00	; 0
 71e:	a0 70       	andi	r26, 0x00	; 0
 720:	b0 70       	andi	r27, 0x00	; 0
 722:	80 34       	cpi	r24, 0x40	; 64
 724:	91 05       	cpc	r25, r1
 726:	a1 05       	cpc	r26, r1
 728:	b1 05       	cpc	r27, r1
 72a:	39 f4       	brne	.+14     	; 0x73a <__pack_f+0xee>
 72c:	27 ff       	sbrs	r18, 7
 72e:	09 c0       	rjmp	.+18     	; 0x742 <__pack_f+0xf6>
 730:	20 5c       	subi	r18, 0xC0	; 192
 732:	3f 4f       	sbci	r19, 0xFF	; 255
 734:	4f 4f       	sbci	r20, 0xFF	; 255
 736:	5f 4f       	sbci	r21, 0xFF	; 255
 738:	04 c0       	rjmp	.+8      	; 0x742 <__pack_f+0xf6>
 73a:	21 5c       	subi	r18, 0xC1	; 193
 73c:	3f 4f       	sbci	r19, 0xFF	; 255
 73e:	4f 4f       	sbci	r20, 0xFF	; 255
 740:	5f 4f       	sbci	r21, 0xFF	; 255
 742:	e0 e0       	ldi	r30, 0x00	; 0
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	20 30       	cpi	r18, 0x00	; 0
 748:	a0 e0       	ldi	r26, 0x00	; 0
 74a:	3a 07       	cpc	r19, r26
 74c:	a0 e0       	ldi	r26, 0x00	; 0
 74e:	4a 07       	cpc	r20, r26
 750:	a0 e4       	ldi	r26, 0x40	; 64
 752:	5a 07       	cpc	r21, r26
 754:	10 f0       	brcs	.+4      	; 0x75a <__pack_f+0x10e>
 756:	e1 e0       	ldi	r30, 0x01	; 1
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	79 01       	movw	r14, r18
 75c:	8a 01       	movw	r16, r20
 75e:	27 c0       	rjmp	.+78     	; 0x7ae <__pack_f+0x162>
 760:	60 38       	cpi	r22, 0x80	; 128
 762:	71 05       	cpc	r23, r1
 764:	64 f5       	brge	.+88     	; 0x7be <__pack_f+0x172>
 766:	fb 01       	movw	r30, r22
 768:	e1 58       	subi	r30, 0x81	; 129
 76a:	ff 4f       	sbci	r31, 0xFF	; 255
 76c:	d8 01       	movw	r26, r16
 76e:	c7 01       	movw	r24, r14
 770:	8f 77       	andi	r24, 0x7F	; 127
 772:	90 70       	andi	r25, 0x00	; 0
 774:	a0 70       	andi	r26, 0x00	; 0
 776:	b0 70       	andi	r27, 0x00	; 0
 778:	80 34       	cpi	r24, 0x40	; 64
 77a:	91 05       	cpc	r25, r1
 77c:	a1 05       	cpc	r26, r1
 77e:	b1 05       	cpc	r27, r1
 780:	39 f4       	brne	.+14     	; 0x790 <__pack_f+0x144>
 782:	e7 fe       	sbrs	r14, 7
 784:	0d c0       	rjmp	.+26     	; 0x7a0 <__pack_f+0x154>
 786:	80 e4       	ldi	r24, 0x40	; 64
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	a0 e0       	ldi	r26, 0x00	; 0
 78c:	b0 e0       	ldi	r27, 0x00	; 0
 78e:	04 c0       	rjmp	.+8      	; 0x798 <__pack_f+0x14c>
 790:	8f e3       	ldi	r24, 0x3F	; 63
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	a0 e0       	ldi	r26, 0x00	; 0
 796:	b0 e0       	ldi	r27, 0x00	; 0
 798:	e8 0e       	add	r14, r24
 79a:	f9 1e       	adc	r15, r25
 79c:	0a 1f       	adc	r16, r26
 79e:	1b 1f       	adc	r17, r27
 7a0:	17 ff       	sbrs	r17, 7
 7a2:	05 c0       	rjmp	.+10     	; 0x7ae <__pack_f+0x162>
 7a4:	16 95       	lsr	r17
 7a6:	07 95       	ror	r16
 7a8:	f7 94       	ror	r15
 7aa:	e7 94       	ror	r14
 7ac:	31 96       	adiw	r30, 0x01	; 1
 7ae:	87 e0       	ldi	r24, 0x07	; 7
 7b0:	16 95       	lsr	r17
 7b2:	07 95       	ror	r16
 7b4:	f7 94       	ror	r15
 7b6:	e7 94       	ror	r14
 7b8:	8a 95       	dec	r24
 7ba:	d1 f7       	brne	.-12     	; 0x7b0 <__pack_f+0x164>
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <__pack_f+0x17c>
 7be:	ee 24       	eor	r14, r14
 7c0:	ff 24       	eor	r15, r15
 7c2:	87 01       	movw	r16, r14
 7c4:	ef ef       	ldi	r30, 0xFF	; 255
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	6e 2f       	mov	r22, r30
 7ca:	67 95       	ror	r22
 7cc:	66 27       	eor	r22, r22
 7ce:	67 95       	ror	r22
 7d0:	90 2f       	mov	r25, r16
 7d2:	9f 77       	andi	r25, 0x7F	; 127
 7d4:	d7 94       	ror	r13
 7d6:	dd 24       	eor	r13, r13
 7d8:	d7 94       	ror	r13
 7da:	8e 2f       	mov	r24, r30
 7dc:	86 95       	lsr	r24
 7de:	49 2f       	mov	r20, r25
 7e0:	46 2b       	or	r20, r22
 7e2:	58 2f       	mov	r21, r24
 7e4:	5d 29       	or	r21, r13
 7e6:	b7 01       	movw	r22, r14
 7e8:	ca 01       	movw	r24, r20
 7ea:	1f 91       	pop	r17
 7ec:	0f 91       	pop	r16
 7ee:	ff 90       	pop	r15
 7f0:	ef 90       	pop	r14
 7f2:	df 90       	pop	r13
 7f4:	08 95       	ret

000007f6 <__unpack_f>:
 7f6:	fc 01       	movw	r30, r24
 7f8:	db 01       	movw	r26, r22
 7fa:	40 81       	ld	r20, Z
 7fc:	51 81       	ldd	r21, Z+1	; 0x01
 7fe:	22 81       	ldd	r18, Z+2	; 0x02
 800:	62 2f       	mov	r22, r18
 802:	6f 77       	andi	r22, 0x7F	; 127
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	22 1f       	adc	r18, r18
 808:	22 27       	eor	r18, r18
 80a:	22 1f       	adc	r18, r18
 80c:	93 81       	ldd	r25, Z+3	; 0x03
 80e:	89 2f       	mov	r24, r25
 810:	88 0f       	add	r24, r24
 812:	82 2b       	or	r24, r18
 814:	28 2f       	mov	r18, r24
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	99 1f       	adc	r25, r25
 81a:	99 27       	eor	r25, r25
 81c:	99 1f       	adc	r25, r25
 81e:	11 96       	adiw	r26, 0x01	; 1
 820:	9c 93       	st	X, r25
 822:	11 97       	sbiw	r26, 0x01	; 1
 824:	21 15       	cp	r18, r1
 826:	31 05       	cpc	r19, r1
 828:	a9 f5       	brne	.+106    	; 0x894 <__unpack_f+0x9e>
 82a:	41 15       	cp	r20, r1
 82c:	51 05       	cpc	r21, r1
 82e:	61 05       	cpc	r22, r1
 830:	71 05       	cpc	r23, r1
 832:	11 f4       	brne	.+4      	; 0x838 <__unpack_f+0x42>
 834:	82 e0       	ldi	r24, 0x02	; 2
 836:	37 c0       	rjmp	.+110    	; 0x8a6 <__unpack_f+0xb0>
 838:	82 e8       	ldi	r24, 0x82	; 130
 83a:	9f ef       	ldi	r25, 0xFF	; 255
 83c:	13 96       	adiw	r26, 0x03	; 3
 83e:	9c 93       	st	X, r25
 840:	8e 93       	st	-X, r24
 842:	12 97       	sbiw	r26, 0x02	; 2
 844:	9a 01       	movw	r18, r20
 846:	ab 01       	movw	r20, r22
 848:	67 e0       	ldi	r22, 0x07	; 7
 84a:	22 0f       	add	r18, r18
 84c:	33 1f       	adc	r19, r19
 84e:	44 1f       	adc	r20, r20
 850:	55 1f       	adc	r21, r21
 852:	6a 95       	dec	r22
 854:	d1 f7       	brne	.-12     	; 0x84a <__unpack_f+0x54>
 856:	83 e0       	ldi	r24, 0x03	; 3
 858:	8c 93       	st	X, r24
 85a:	0d c0       	rjmp	.+26     	; 0x876 <__unpack_f+0x80>
 85c:	22 0f       	add	r18, r18
 85e:	33 1f       	adc	r19, r19
 860:	44 1f       	adc	r20, r20
 862:	55 1f       	adc	r21, r21
 864:	12 96       	adiw	r26, 0x02	; 2
 866:	8d 91       	ld	r24, X+
 868:	9c 91       	ld	r25, X
 86a:	13 97       	sbiw	r26, 0x03	; 3
 86c:	01 97       	sbiw	r24, 0x01	; 1
 86e:	13 96       	adiw	r26, 0x03	; 3
 870:	9c 93       	st	X, r25
 872:	8e 93       	st	-X, r24
 874:	12 97       	sbiw	r26, 0x02	; 2
 876:	20 30       	cpi	r18, 0x00	; 0
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	38 07       	cpc	r19, r24
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	48 07       	cpc	r20, r24
 880:	80 e4       	ldi	r24, 0x40	; 64
 882:	58 07       	cpc	r21, r24
 884:	58 f3       	brcs	.-42     	; 0x85c <__unpack_f+0x66>
 886:	14 96       	adiw	r26, 0x04	; 4
 888:	2d 93       	st	X+, r18
 88a:	3d 93       	st	X+, r19
 88c:	4d 93       	st	X+, r20
 88e:	5c 93       	st	X, r21
 890:	17 97       	sbiw	r26, 0x07	; 7
 892:	08 95       	ret
 894:	2f 3f       	cpi	r18, 0xFF	; 255
 896:	31 05       	cpc	r19, r1
 898:	79 f4       	brne	.+30     	; 0x8b8 <__unpack_f+0xc2>
 89a:	41 15       	cp	r20, r1
 89c:	51 05       	cpc	r21, r1
 89e:	61 05       	cpc	r22, r1
 8a0:	71 05       	cpc	r23, r1
 8a2:	19 f4       	brne	.+6      	; 0x8aa <__unpack_f+0xb4>
 8a4:	84 e0       	ldi	r24, 0x04	; 4
 8a6:	8c 93       	st	X, r24
 8a8:	08 95       	ret
 8aa:	64 ff       	sbrs	r22, 4
 8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <__unpack_f+0xbe>
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	8c 93       	st	X, r24
 8b2:	12 c0       	rjmp	.+36     	; 0x8d8 <__unpack_f+0xe2>
 8b4:	1c 92       	st	X, r1
 8b6:	10 c0       	rjmp	.+32     	; 0x8d8 <__unpack_f+0xe2>
 8b8:	2f 57       	subi	r18, 0x7F	; 127
 8ba:	30 40       	sbci	r19, 0x00	; 0
 8bc:	13 96       	adiw	r26, 0x03	; 3
 8be:	3c 93       	st	X, r19
 8c0:	2e 93       	st	-X, r18
 8c2:	12 97       	sbiw	r26, 0x02	; 2
 8c4:	83 e0       	ldi	r24, 0x03	; 3
 8c6:	8c 93       	st	X, r24
 8c8:	87 e0       	ldi	r24, 0x07	; 7
 8ca:	44 0f       	add	r20, r20
 8cc:	55 1f       	adc	r21, r21
 8ce:	66 1f       	adc	r22, r22
 8d0:	77 1f       	adc	r23, r23
 8d2:	8a 95       	dec	r24
 8d4:	d1 f7       	brne	.-12     	; 0x8ca <__unpack_f+0xd4>
 8d6:	70 64       	ori	r23, 0x40	; 64
 8d8:	14 96       	adiw	r26, 0x04	; 4
 8da:	4d 93       	st	X+, r20
 8dc:	5d 93       	st	X+, r21
 8de:	6d 93       	st	X+, r22
 8e0:	7c 93       	st	X, r23
 8e2:	17 97       	sbiw	r26, 0x07	; 7
 8e4:	08 95       	ret

000008e6 <__divmodhi4>:
 8e6:	97 fb       	bst	r25, 7
 8e8:	09 2e       	mov	r0, r25
 8ea:	07 26       	eor	r0, r23
 8ec:	0a d0       	rcall	.+20     	; 0x902 <__divmodhi4_neg1>
 8ee:	77 fd       	sbrc	r23, 7
 8f0:	04 d0       	rcall	.+8      	; 0x8fa <__divmodhi4_neg2>
 8f2:	0c d0       	rcall	.+24     	; 0x90c <__udivmodhi4>
 8f4:	06 d0       	rcall	.+12     	; 0x902 <__divmodhi4_neg1>
 8f6:	00 20       	and	r0, r0
 8f8:	1a f4       	brpl	.+6      	; 0x900 <__divmodhi4_exit>

000008fa <__divmodhi4_neg2>:
 8fa:	70 95       	com	r23
 8fc:	61 95       	neg	r22
 8fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000900 <__divmodhi4_exit>:
 900:	08 95       	ret

00000902 <__divmodhi4_neg1>:
 902:	f6 f7       	brtc	.-4      	; 0x900 <__divmodhi4_exit>
 904:	90 95       	com	r25
 906:	81 95       	neg	r24
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	08 95       	ret

0000090c <__udivmodhi4>:
 90c:	aa 1b       	sub	r26, r26
 90e:	bb 1b       	sub	r27, r27
 910:	51 e1       	ldi	r21, 0x11	; 17
 912:	07 c0       	rjmp	.+14     	; 0x922 <__udivmodhi4_ep>

00000914 <__udivmodhi4_loop>:
 914:	aa 1f       	adc	r26, r26
 916:	bb 1f       	adc	r27, r27
 918:	a6 17       	cp	r26, r22
 91a:	b7 07       	cpc	r27, r23
 91c:	10 f0       	brcs	.+4      	; 0x922 <__udivmodhi4_ep>
 91e:	a6 1b       	sub	r26, r22
 920:	b7 0b       	sbc	r27, r23

00000922 <__udivmodhi4_ep>:
 922:	88 1f       	adc	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	5a 95       	dec	r21
 928:	a9 f7       	brne	.-22     	; 0x914 <__udivmodhi4_loop>
 92a:	80 95       	com	r24
 92c:	90 95       	com	r25
 92e:	bc 01       	movw	r22, r24
 930:	cd 01       	movw	r24, r26
 932:	08 95       	ret

00000934 <__prologue_saves__>:
 934:	2f 92       	push	r2
 936:	3f 92       	push	r3
 938:	4f 92       	push	r4
 93a:	5f 92       	push	r5
 93c:	6f 92       	push	r6
 93e:	7f 92       	push	r7
 940:	8f 92       	push	r8
 942:	9f 92       	push	r9
 944:	af 92       	push	r10
 946:	bf 92       	push	r11
 948:	cf 92       	push	r12
 94a:	df 92       	push	r13
 94c:	ef 92       	push	r14
 94e:	ff 92       	push	r15
 950:	0f 93       	push	r16
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	cd b7       	in	r28, 0x3d	; 61
 95a:	de b7       	in	r29, 0x3e	; 62
 95c:	ca 1b       	sub	r28, r26
 95e:	db 0b       	sbc	r29, r27
 960:	0f b6       	in	r0, 0x3f	; 63
 962:	f8 94       	cli
 964:	de bf       	out	0x3e, r29	; 62
 966:	0f be       	out	0x3f, r0	; 63
 968:	cd bf       	out	0x3d, r28	; 61
 96a:	09 94       	ijmp

0000096c <__epilogue_restores__>:
 96c:	2a 88       	ldd	r2, Y+18	; 0x12
 96e:	39 88       	ldd	r3, Y+17	; 0x11
 970:	48 88       	ldd	r4, Y+16	; 0x10
 972:	5f 84       	ldd	r5, Y+15	; 0x0f
 974:	6e 84       	ldd	r6, Y+14	; 0x0e
 976:	7d 84       	ldd	r7, Y+13	; 0x0d
 978:	8c 84       	ldd	r8, Y+12	; 0x0c
 97a:	9b 84       	ldd	r9, Y+11	; 0x0b
 97c:	aa 84       	ldd	r10, Y+10	; 0x0a
 97e:	b9 84       	ldd	r11, Y+9	; 0x09
 980:	c8 84       	ldd	r12, Y+8	; 0x08
 982:	df 80       	ldd	r13, Y+7	; 0x07
 984:	ee 80       	ldd	r14, Y+6	; 0x06
 986:	fd 80       	ldd	r15, Y+5	; 0x05
 988:	0c 81       	ldd	r16, Y+4	; 0x04
 98a:	1b 81       	ldd	r17, Y+3	; 0x03
 98c:	aa 81       	ldd	r26, Y+2	; 0x02
 98e:	b9 81       	ldd	r27, Y+1	; 0x01
 990:	ce 0f       	add	r28, r30
 992:	d1 1d       	adc	r29, r1
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	f8 94       	cli
 998:	de bf       	out	0x3e, r29	; 62
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	cd bf       	out	0x3d, r28	; 61
 99e:	ed 01       	movw	r28, r26
 9a0:	08 95       	ret

000009a2 <_exit>:
 9a2:	f8 94       	cli

000009a4 <__stop_program>:
 9a4:	ff cf       	rjmp	.-2      	; 0x9a4 <__stop_program>
