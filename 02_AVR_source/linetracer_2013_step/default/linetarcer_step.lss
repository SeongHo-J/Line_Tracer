
linetarcer_step.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800100  000016c6  0000175a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800248  00800248  000018a2  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000021e  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac3  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000450  00000000  00000000  00002603  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bc0  00000000  00000000  00002a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00003614  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d0  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c4  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00003f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ec       	ldi	r30, 0xC6	; 198
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 34       	cpi	r26, 0x48	; 72
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a8 e4       	ldi	r26, 0x48	; 72
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 39       	cpi	r26, 0x9F	; 159
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
      c6:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_PORT>:
#define cbi(PORTX,BitX)	PORTX&=~(1<<BitX)	// Bit clear fuction

/* PORT initialize*/
void init_PORT(void) {

	DDRA = 0x0F; // LED[3:0]
      ce:	8f e0       	ldi	r24, 0x0F	; 15
      d0:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // Motor_R[3:0]
      d2:	8f ef       	ldi	r24, 0xFF	; 255
      d4:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF; // IR_sensor emitter
      d6:	81 bb       	out	0x11, r24	; 17
	DDRF = 0x00; // IR_sensor receiver
      d8:	10 92 61 00 	sts	0x0061, r1
	DDRE = 0x02; // SW=INT4, RxD0=PE0, TxD0=PE1
      dc:	82 e0       	ldi	r24, 0x02	; 2
      de:	82 b9       	out	0x02, r24	; 2
	
	PORTA = 0x00; // LED off
      e0:	1b ba       	out	0x1b, r1	; 27
	PORTD = 0x00; // IR_sensor emitter off
      e2:	12 ba       	out	0x12, r1	; 18
}
      e4:	08 95       	ret

000000e6 <init_EX_INTERRUPT>:

/* external interrupt initialize */
void init_EX_INTERRUPT(void) {
	
	EICRA	= (0<<ISC31) |(0<<ISC30) |(0<<ISC21) |(0<<ISC20) |(0<<ISC11) |(0<<ISC10) |(0<<ISC01) |(0<<ISC00);
      e6:	10 92 6a 00 	sts	0x006A, r1
	EICRB	= (0<<ISC71) |(0<<ISC70) |(0<<ISC61) |(0<<ISC60) |(0<<ISC51) |(0<<ISC50) |(1<<ISC41) |(0<<ISC40);
      ea:	82 e0       	ldi	r24, 0x02	; 2
      ec:	8a bf       	out	0x3a, r24	; 58
	EIMSK	= (0<<INT7 ) |(0<<INT6 ) |(0<<INT5 ) |(1<<INT4 ) |(0<<INT3 ) |(0<<INT2 ) |(0<<INT1 ) |(0<<INT0 );
      ee:	80 e1       	ldi	r24, 0x10	; 16
      f0:	89 bf       	out	0x39, r24	; 57
}
      f2:	08 95       	ret

000000f4 <init_TIMER0>:

/* timer counter initialize */
void init_TIMER0(void) {
	
	TCCR0 = (0<<FOC0)  |(0<<WGM00) |(0<<COM01) |(0<<COM00) |(1<<WGM01) |(1<<CS02)  |(0<<CS01)  |(1<<CS00);
      f4:	8d e0       	ldi	r24, 0x0D	; 13
      f6:	83 bf       	out	0x33, r24	; 51
	TIMSK = (0<<OCIE2) |(0<<TOIE2) |(0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(0<<TOIE1) |(0<<OCIE0) |(0<<TOIE0);
      f8:	17 be       	out	0x37, r1	; 55
	TCNT0 = 0x00;
      fa:	12 be       	out	0x32, r1	; 50
	OCR0  = 0x00;
      fc:	11 be       	out	0x31, r1	; 49


}
      fe:	08 95       	ret

00000100 <init_TIMER3>:

	//TCCR3A	= (0<<COM3A1)|(0<<COM3A0)|(0<<COM3B1)|(0<<COM3B0)|(0<<COM3C1)|(0<<COM3C0)|(1<<WGM31) |(0<<WGM30);
	//TCCR3B	= (0<<ICNC1) |(0<<ICES1) |			  (1<<WGM13) |(1<<WGM12) |(0<<CS12)  |(1<<CS11)  |(1<<CS10) ;
	//ETIMSK	= 			 |			 |(0<<TICIE3)|(0<<OCIE3A)|(0<<OCIE3B)|(1<<TOIE3) |(0<<OCIE3C)|(0<<OCIE1C);

	TCCR3A = 0x02; // COMnx1:0 nomal mode , WGM3 1:0 fast PWM with ICRn TOP
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0x1B; // WGM3 3:2 fast PWM with ICRn TOP, 64 prescaler
     106:	8b e1       	ldi	r24, 0x1B	; 27
     108:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK = 0x04; // Timer/Counter3 overflow interrupt enable(TOIE3)
     10c:	84 e0       	ldi	r24, 0x04	; 4
     10e:	80 93 7d 00 	sts	0x007D, r24

	//ICR3 = 12500; // ICRH and ICRL / 16Mhz crystal, 50ms control period, 64 prescaler
	ICR3 = 5000; // ICRH and ICRL / 16Mhz crystal, 10ms control period, 64 prescaler
     112:	88 e8       	ldi	r24, 0x88	; 136
     114:	93 e1       	ldi	r25, 0x13	; 19
     116:	90 93 81 00 	sts	0x0081, r25
     11a:	80 93 80 00 	sts	0x0080, r24
}
     11e:	08 95       	ret

00000120 <init_PWM>:

/* PWM initialize */
void init_PWM(void) {

	TCCR1A	= (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(0<<COM1C1)|(0<<COM1C0)|(1<<WGM11) |(0<<WGM10);
     120:	82 ea       	ldi	r24, 0xA2	; 162
     122:	8f bd       	out	0x2f, r24	; 47
	TCCR1B	= (0<<ICNC1) |(0<<ICES1) |			  (1<<WGM13) |(1<<WGM12) |(1<<CS12)  |(0<<CS11)  |(0<<CS10) ;
     124:	8c e1       	ldi	r24, 0x1C	; 28
     126:	8e bd       	out	0x2e, r24	; 46
	TIMSK	= (0<<OCIE2) |(0<<TOIE2) |(0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(0<<TOIE1) |(0<<OCIE0) |(0<<TOIE0);
     128:	17 be       	out	0x37, r1	; 55
	

	ICR1= 2000; // 1khz
     12a:	80 ed       	ldi	r24, 0xD0	; 208
     12c:	97 e0       	ldi	r25, 0x07	; 7
     12e:	97 bd       	out	0x27, r25	; 39
     130:	86 bd       	out	0x26, r24	; 38

	OCR1A = 0x0000;
     132:	1b bc       	out	0x2b, r1	; 43
     134:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0x0000;
     136:	19 bc       	out	0x29, r1	; 41
     138:	18 bc       	out	0x28, r1	; 40

}
     13a:	08 95       	ret

0000013c <init_USART>:
	//UCSR0B	= (0<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0) |(1<<TXEN0) |(0<<UCSZ02)|(0<<RXB80) |(0<<TXB80);
	//UCSR0C	=             (0<<UMSEL0)|(0<<UPM01) |(0<<UPM00) |(0<<USBS1) |(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0);
	//UBRR0H	= 0;
	//UBRR0L	= 8;
	
	UBRR0H = 0;		
     13c:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 8; // f_osc = 16 Mhz , Baud rate = 115200(bps)
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	89 b9       	out	0x09, r24	; 9
	UCSR0B = 0x18; // RXEN=1, TXEN=1
     144:	88 e1       	ldi	r24, 0x18	; 24
     146:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06; // Asynchronous / No parity / 1 stop bit / 8 bit data size
     148:	86 e0       	ldi	r24, 0x06	; 6
     14a:	80 93 95 00 	sts	0x0095, r24
}
     14e:	08 95       	ret

00000150 <init_ADC>:
void init_ADC(void) {
	
	//ADMUX  = (1<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX4)|(0<<MUX3)|(0<<MUX2) |(0<<MUX1) |(0<<MUX0);
	//ADCSRA = (1<<ADEN) |(0<<ADSC) |(0<<ADFR) |(0<<ADFR)|(1<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0);

	ADMUX = 0xC0; // internal 2.56 voltage reference
     150:	80 ec       	ldi	r24, 0xC0	; 192
     152:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87; // ADC enable(ADEN=1) / prescaler : 128 division factor
     154:	87 e8       	ldi	r24, 0x87	; 135
     156:	86 b9       	out	0x06, r24	; 6

}
     158:	08 95       	ret

0000015a <main>:
#define cbi(PORTX,BitX)	PORTX&=~(1<<BitX)	// Bit clear fuction

/* PORT initialize*/
void init_PORT(void) {

	DDRA = 0x0F; // LED[3:0]
     15a:	8f e0       	ldi	r24, 0x0F	; 15
     15c:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // Motor_R[3:0]
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF; // IR_sensor emitter
     162:	81 bb       	out	0x11, r24	; 17
	DDRF = 0x00; // IR_sensor receiver
     164:	10 92 61 00 	sts	0x0061, r1
	DDRE = 0x02; // SW=INT4, RxD0=PE0, TxD0=PE1
     168:	92 e0       	ldi	r25, 0x02	; 2
     16a:	92 b9       	out	0x02, r25	; 2
	
	PORTA = 0x00; // LED off
     16c:	1b ba       	out	0x1b, r1	; 27
	PORTD = 0x00; // IR_sensor emitter off
     16e:	12 ba       	out	0x12, r1	; 18
}

/* external interrupt initialize */
void init_EX_INTERRUPT(void) {
	
	EICRA	= (0<<ISC31) |(0<<ISC30) |(0<<ISC21) |(0<<ISC20) |(0<<ISC11) |(0<<ISC10) |(0<<ISC01) |(0<<ISC00);
     170:	10 92 6a 00 	sts	0x006A, r1
	EICRB	= (0<<ISC71) |(0<<ISC70) |(0<<ISC61) |(0<<ISC60) |(0<<ISC51) |(0<<ISC50) |(1<<ISC41) |(0<<ISC40);
     174:	9a bf       	out	0x3a, r25	; 58
	EIMSK	= (0<<INT7 ) |(0<<INT6 ) |(0<<INT5 ) |(1<<INT4 ) |(0<<INT3 ) |(0<<INT2 ) |(0<<INT1 ) |(0<<INT0 );
     176:	80 e1       	ldi	r24, 0x10	; 16
     178:	89 bf       	out	0x39, r24	; 57
}

/* timer counter initialize */
void init_TIMER0(void) {
	
	TCCR0 = (0<<FOC0)  |(0<<WGM00) |(0<<COM01) |(0<<COM00) |(1<<WGM01) |(1<<CS02)  |(0<<CS01)  |(1<<CS00);
     17a:	8d e0       	ldi	r24, 0x0D	; 13
     17c:	83 bf       	out	0x33, r24	; 51
	TIMSK = (0<<OCIE2) |(0<<TOIE2) |(0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(0<<TOIE1) |(0<<OCIE0) |(0<<TOIE0);
     17e:	17 be       	out	0x37, r1	; 55
	TCNT0 = 0x00;
     180:	12 be       	out	0x32, r1	; 50
	OCR0  = 0x00;
     182:	11 be       	out	0x31, r1	; 49

	//TCCR3A	= (0<<COM3A1)|(0<<COM3A0)|(0<<COM3B1)|(0<<COM3B0)|(0<<COM3C1)|(0<<COM3C0)|(1<<WGM31) |(0<<WGM30);
	//TCCR3B	= (0<<ICNC1) |(0<<ICES1) |			  (1<<WGM13) |(1<<WGM12) |(0<<CS12)  |(1<<CS11)  |(1<<CS10) ;
	//ETIMSK	= 			 |			 |(0<<TICIE3)|(0<<OCIE3A)|(0<<OCIE3B)|(1<<TOIE3) |(0<<OCIE3C)|(0<<OCIE1C);

	TCCR3A = 0x02; // COMnx1:0 nomal mode , WGM3 1:0 fast PWM with ICRn TOP
     184:	90 93 8b 00 	sts	0x008B, r25
	TCCR3B = 0x1B; // WGM3 3:2 fast PWM with ICRn TOP, 64 prescaler
     188:	8b e1       	ldi	r24, 0x1B	; 27
     18a:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK = 0x04; // Timer/Counter3 overflow interrupt enable(TOIE3)
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	80 93 7d 00 	sts	0x007D, r24

	//ICR3 = 12500; // ICRH and ICRL / 16Mhz crystal, 50ms control period, 64 prescaler
	ICR3 = 5000; // ICRH and ICRL / 16Mhz crystal, 10ms control period, 64 prescaler
     194:	88 e8       	ldi	r24, 0x88	; 136
     196:	93 e1       	ldi	r25, 0x13	; 19
     198:	90 93 81 00 	sts	0x0081, r25
     19c:	80 93 80 00 	sts	0x0080, r24
void init_ADC(void) {
	
	//ADMUX  = (1<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX4)|(0<<MUX3)|(0<<MUX2) |(0<<MUX1) |(0<<MUX0);
	//ADCSRA = (1<<ADEN) |(0<<ADSC) |(0<<ADFR) |(0<<ADFR)|(1<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0);

	ADMUX = 0xC0; // internal 2.56 voltage reference
     1a0:	80 ec       	ldi	r24, 0xC0	; 192
     1a2:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87; // ADC enable(ADEN=1) / prescaler : 128 division factor
     1a4:	87 e8       	ldi	r24, 0x87	; 135
     1a6:	86 b9       	out	0x06, r24	; 6
	init_TIMER0();
	init_TIMER3();
	init_ADC();
	//init_USART();

	sei();
     1a8:	78 94       	sei
     1aa:	ff cf       	rjmp	.-2      	; 0x1aa <main+0x50>

000001ac <__vector_5>:
	return 0;

}

// State switch
SIGNAL(INT4_vect) {
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	11 24       	eor	r1, r1
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25

	state++;
     1ba:	80 91 48 02 	lds	r24, 0x0248
     1be:	90 91 49 02 	lds	r25, 0x0249
     1c2:	01 96       	adiw	r24, 0x01	; 1
     1c4:	90 93 49 02 	sts	0x0249, r25
     1c8:	80 93 48 02 	sts	0x0248, r24

	if(state>3) state = 3;
     1cc:	04 97       	sbiw	r24, 0x04	; 4
     1ce:	34 f0       	brlt	.+12     	; 0x1dc <__vector_5+0x30>
     1d0:	83 e0       	ldi	r24, 0x03	; 3
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	90 93 49 02 	sts	0x0249, r25
     1d8:	80 93 48 02 	sts	0x0248, r24

}
     1dc:	9f 91       	pop	r25
     1de:	8f 91       	pop	r24
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <__vector_29>:
	return;

}

// State / 10ms control period
SIGNAL(SIG_OVERFLOW3) {
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	0b b6       	in	r0, 0x3b	; 59
     1f4:	0f 92       	push	r0
     1f6:	11 24       	eor	r1, r1
     1f8:	2f 93       	push	r18
     1fa:	3f 93       	push	r19
     1fc:	4f 93       	push	r20
     1fe:	5f 93       	push	r21
     200:	6f 93       	push	r22
     202:	7f 93       	push	r23
     204:	8f 93       	push	r24
     206:	9f 93       	push	r25
     208:	af 93       	push	r26
     20a:	bf 93       	push	r27
     20c:	ef 93       	push	r30
     20e:	ff 93       	push	r31

	cli();
     210:	f8 94       	cli

	//int i=0;

	switch(state) {
     212:	80 91 48 02 	lds	r24, 0x0248
     216:	90 91 49 02 	lds	r25, 0x0249
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	91 05       	cpc	r25, r1
     21e:	a1 f0       	breq	.+40     	; 0x248 <__vector_29+0x5e>
     220:	82 30       	cpi	r24, 0x02	; 2
     222:	91 05       	cpc	r25, r1
     224:	1c f4       	brge	.+6      	; 0x22c <__vector_29+0x42>
     226:	89 2b       	or	r24, r25
     228:	41 f0       	breq	.+16     	; 0x23a <__vector_29+0x50>
     22a:	7f c0       	rjmp	.+254    	; 0x32a <__vector_29+0x140>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	91 05       	cpc	r25, r1
     230:	d1 f0       	breq	.+52     	; 0x266 <__vector_29+0x7c>
     232:	03 97       	sbiw	r24, 0x03	; 3
     234:	09 f0       	breq	.+2      	; 0x238 <__vector_29+0x4e>
     236:	79 c0       	rjmp	.+242    	; 0x32a <__vector_29+0x140>
     238:	19 c0       	rjmp	.+50     	; 0x26c <__vector_29+0x82>
			////////////////////////////////////////////////////////////////////////////////////
			//-------------------------------------IDLE---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case IDLE :

				PORTA = 0x01; // IDLE state check
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	8b bb       	out	0x1b, r24	; 27

				TIMSK &= ~(1<<OCIE0);
     23e:	87 b7       	in	r24, 0x37	; 55
     240:	8d 7f       	andi	r24, 0xFD	; 253
     242:	87 bf       	out	0x37, r24	; 55
				PORTC = 0x00;
     244:	15 ba       	out	0x15, r1	; 21
     246:	71 c0       	rjmp	.+226    	; 0x32a <__vector_29+0x140>
			////////////////////////////////////////////////////////////////////////////////////
			//-------------------------------------NORM---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case NORM :

				PORTA = 0x02; // NORM state check
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	8b bb       	out	0x1b, r24	; 27
				
				ADC_GET(ADC_DATA);
     24c:	8a e4       	ldi	r24, 0x4A	; 74
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ADC_GET>

				ADC_MAX_MIN(ADC_MAX, ADC_MIN, ADC_DATA);
     254:	8a e5       	ldi	r24, 0x5A	; 90
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	71 e0       	ldi	r23, 0x01	; 1
     25c:	4a e4       	ldi	r20, 0x4A	; 74
     25e:	52 e0       	ldi	r21, 0x02	; 2
     260:	0e 94 29 03 	call	0x652	; 0x652 <ADC_MAX_MIN>
     264:	62 c0       	rjmp	.+196    	; 0x32a <__vector_29+0x140>
			////////////////////////////////////////////////////////////////////////////////////
			//-------------------------------------WAIT---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case WAIT :

				PORTA = 0x04; // WAIT check
     266:	84 e0       	ldi	r24, 0x04	; 4
     268:	8b bb       	out	0x1b, r24	; 27
     26a:	5f c0       	rjmp	.+190    	; 0x32a <__vector_29+0x140>
			////////////////////////////////////////////////////////////////////////////////////
			//-------------------------------------RUN----------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case RUN :

				PORTA = 0x08; // RUN check
     26c:	88 e0       	ldi	r24, 0x08	; 8
     26e:	8b bb       	out	0x1b, r24	; 27

				DIRECTION=0;
     270:	10 92 8b 02 	sts	0x028B, r1
     274:	10 92 8a 02 	sts	0x028A, r1

				ADC_GET(ADC_DATA);
     278:	8a e4       	ldi	r24, 0x4A	; 74
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ADC_GET>

				ADC_NORMALIZE(NORM_DATA, ADC_DATA, ADC_MAX, ADC_MIN);
     280:	8a e6       	ldi	r24, 0x6A	; 106
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	6a e4       	ldi	r22, 0x4A	; 74
     286:	72 e0       	ldi	r23, 0x02	; 2
     288:	4a e5       	ldi	r20, 0x5A	; 90
     28a:	52 e0       	ldi	r21, 0x02	; 2
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	31 e0       	ldi	r19, 0x01	; 1
     290:	0e 94 4f 03 	call	0x69e	; 0x69e <ADC_NORMALIZE>

				DATA_WEIGHT(&DIRECTION, WEIGHT_DATA, NORM_DATA);
     294:	8a e8       	ldi	r24, 0x8A	; 138
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	6a e7       	ldi	r22, 0x7A	; 122
     29a:	72 e0       	ldi	r23, 0x02	; 2
     29c:	4a e6       	ldi	r20, 0x6A	; 106
     29e:	52 e0       	ldi	r21, 0x02	; 2
     2a0:	0e 94 c8 03 	call	0x790	; 0x790 <DATA_WEIGHT>

				TIMSK |= (1<<OCIE0);
     2a4:	87 b7       	in	r24, 0x37	; 55
     2a6:	82 60       	ori	r24, 0x02	; 2
     2a8:	87 bf       	out	0x37, r24	; 55

				//-----------------------------//
				//----------- Break -----------//
				//-----------------------------//
				if( WEIGHT_DATA[2]==0 && WEIGHT_DATA[5]==0 && WEIGHT_DATA[0]!=0 && WEIGHT_DATA[7]!=0 ) {
     2aa:	80 91 7e 02 	lds	r24, 0x027E
     2ae:	90 91 7f 02 	lds	r25, 0x027F
     2b2:	89 2b       	or	r24, r25
     2b4:	11 f5       	brne	.+68     	; 0x2fa <__vector_29+0x110>
     2b6:	80 91 84 02 	lds	r24, 0x0284
     2ba:	90 91 85 02 	lds	r25, 0x0285
     2be:	89 2b       	or	r24, r25
     2c0:	e1 f4       	brne	.+56     	; 0x2fa <__vector_29+0x110>
     2c2:	80 91 7a 02 	lds	r24, 0x027A
     2c6:	90 91 7b 02 	lds	r25, 0x027B
     2ca:	89 2b       	or	r24, r25
     2cc:	b1 f0       	breq	.+44     	; 0x2fa <__vector_29+0x110>
     2ce:	80 91 88 02 	lds	r24, 0x0288
     2d2:	90 91 89 02 	lds	r25, 0x0289
     2d6:	89 2b       	or	r24, r25
     2d8:	81 f0       	breq	.+32     	; 0x2fa <__vector_29+0x110>
					
					if(END_FLAG == 2) state = IDLE;					
     2da:	80 91 8c 02 	lds	r24, 0x028C
     2de:	90 91 8d 02 	lds	r25, 0x028D
     2e2:	02 97       	sbiw	r24, 0x02	; 2
     2e4:	21 f4       	brne	.+8      	; 0x2ee <__vector_29+0x104>
     2e6:	10 92 49 02 	sts	0x0249, r1
     2ea:	10 92 48 02 	sts	0x0248, r1
					END_FLAG = 1;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	90 93 8d 02 	sts	0x028D, r25
     2f6:	80 93 8c 02 	sts	0x028C, r24
				
				}

				if(END_FLAG==1 && WEIGHT_DATA[0]==0 && WEIGHT_DATA[7]==0) END_FLAG=2;
     2fa:	80 91 8c 02 	lds	r24, 0x028C
     2fe:	90 91 8d 02 	lds	r25, 0x028D
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	91 f4       	brne	.+36     	; 0x32a <__vector_29+0x140>
     306:	80 91 7a 02 	lds	r24, 0x027A
     30a:	90 91 7b 02 	lds	r25, 0x027B
     30e:	89 2b       	or	r24, r25
     310:	61 f4       	brne	.+24     	; 0x32a <__vector_29+0x140>
     312:	80 91 88 02 	lds	r24, 0x0288
     316:	90 91 89 02 	lds	r25, 0x0289
     31a:	89 2b       	or	r24, r25
     31c:	31 f4       	brne	.+12     	; 0x32a <__vector_29+0x140>
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	90 93 8d 02 	sts	0x028D, r25
     326:	80 93 8c 02 	sts	0x028C, r24
				//-----------------------------//

				break;
	}

	sei();
     32a:	78 94       	sei

}
     32c:	ff 91       	pop	r31
     32e:	ef 91       	pop	r30
     330:	bf 91       	pop	r27
     332:	af 91       	pop	r26
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	7f 91       	pop	r23
     33a:	6f 91       	pop	r22
     33c:	5f 91       	pop	r21
     33e:	4f 91       	pop	r20
     340:	3f 91       	pop	r19
     342:	2f 91       	pop	r18
     344:	0f 90       	pop	r0
     346:	0b be       	out	0x3b, r0	; 59
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <__vector_15>:
	if(state>3) state = 3;

}

// Motor
ISR(TIMER0_COMP_vect) {
     352:	1f 92       	push	r1
     354:	0f 92       	push	r0
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	0f 92       	push	r0
     35a:	0b b6       	in	r0, 0x3b	; 59
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	2f 93       	push	r18
     36a:	3f 93       	push	r19
     36c:	4f 93       	push	r20
     36e:	5f 93       	push	r21
     370:	6f 93       	push	r22
     372:	7f 93       	push	r23
     374:	8f 93       	push	r24
     376:	9f 93       	push	r25
     378:	af 93       	push	r26
     37a:	bf 93       	push	r27
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	ef 93       	push	r30
     382:	ff 93       	push	r31

	err = -DIRECTION; // Reference value is 0
     384:	c0 91 8a 02 	lds	r28, 0x028A
     388:	d0 91 8b 02 	lds	r29, 0x028B
     38c:	66 27       	eor	r22, r22
     38e:	77 27       	eor	r23, r23
     390:	6c 1b       	sub	r22, r28
     392:	7d 0b       	sbc	r23, r29
     394:	88 27       	eor	r24, r24
     396:	77 fd       	sbrc	r23, 7
     398:	80 95       	com	r24
     39a:	98 2f       	mov	r25, r24
     39c:	0e 94 b5 08 	call	0x116a	; 0x116a <__floatsisf>
     3a0:	7b 01       	movw	r14, r22
     3a2:	8c 01       	movw	r16, r24
     3a4:	60 93 8e 02 	sts	0x028E, r22
     3a8:	70 93 8f 02 	sts	0x028F, r23
     3ac:	80 93 90 02 	sts	0x0290, r24
     3b0:	90 93 91 02 	sts	0x0291, r25

	diff_err = err - pre_err;
     3b4:	20 91 92 02 	lds	r18, 0x0292
     3b8:	30 91 93 02 	lds	r19, 0x0293
     3bc:	40 91 94 02 	lds	r20, 0x0294
     3c0:	50 91 95 02 	lds	r21, 0x0295
     3c4:	0e 94 b1 06 	call	0xd62	; 0xd62 <__subsf3>
     3c8:	60 93 96 02 	sts	0x0296, r22
     3cc:	70 93 97 02 	sts	0x0297, r23
     3d0:	80 93 98 02 	sts	0x0298, r24
     3d4:	90 93 99 02 	sts	0x0299, r25
	pre_err = err;
     3d8:	e0 92 92 02 	sts	0x0292, r14
     3dc:	f0 92 93 02 	sts	0x0293, r15
     3e0:	00 93 94 02 	sts	0x0294, r16
     3e4:	10 93 95 02 	sts	0x0295, r17

	MV = Kp*err + Kd*diff_err;

	MV = MV/10;
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	5f e3       	ldi	r21, 0x3F	; 63
     3f0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__mulsf3>
     3f4:	9b 01       	movw	r18, r22
     3f6:	ac 01       	movw	r20, r24
     3f8:	c8 01       	movw	r24, r16
     3fa:	b7 01       	movw	r22, r14
     3fc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__addsf3>
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e2       	ldi	r20, 0x20	; 32
     406:	51 e4       	ldi	r21, 0x41	; 65
     408:	0e 94 09 08 	call	0x1012	; 0x1012 <__divsf3>
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
     410:	60 93 9a 02 	sts	0x029A, r22
     414:	70 93 9b 02 	sts	0x029B, r23
     418:	80 93 9c 02 	sts	0x029C, r24
     41c:	90 93 9d 02 	sts	0x029D, r25
	
	if(DIRECTION==0) MOTOR(&step, FORWARD, CRUZE_SPEED);
     420:	20 97       	sbiw	r28, 0x00	; 0
     422:	31 f4       	brne	.+12     	; 0x430 <__vector_15+0xde>
     424:	8e e9       	ldi	r24, 0x9E	; 158
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	48 ec       	ldi	r20, 0xC8	; 200
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	1f c0       	rjmp	.+62     	; 0x46e <__vector_15+0x11c>
	else if(DIRECTION>0) MOTOR(&step, RIGHT, CRUZE_SPEED-MV);
     430:	1c 16       	cp	r1, r28
     432:	1d 06       	cpc	r1, r29
     434:	74 f4       	brge	.+28     	; 0x452 <__vector_15+0x100>
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	88 e4       	ldi	r24, 0x48	; 72
     43c:	93 e4       	ldi	r25, 0x43	; 67
     43e:	0e 94 b1 06 	call	0xd62	; 0xd62 <__subsf3>
     442:	0e 94 13 09 	call	0x1226	; 0x1226 <__fixsfsi>
     446:	9b 01       	movw	r18, r22
     448:	ac 01       	movw	r20, r24
     44a:	8e e9       	ldi	r24, 0x9E	; 158
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	62 e0       	ldi	r22, 0x02	; 2
     450:	0d c0       	rjmp	.+26     	; 0x46c <__vector_15+0x11a>
	else if(DIRECTION<0) MOTOR(&step, LEFT, CRUZE_SPEED+MV);
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	48 e4       	ldi	r20, 0x48	; 72
     458:	53 e4       	ldi	r21, 0x43	; 67
     45a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__addsf3>
     45e:	0e 94 13 09 	call	0x1226	; 0x1226 <__fixsfsi>
     462:	9b 01       	movw	r18, r22
     464:	ac 01       	movw	r20, r24
     466:	8e e9       	ldi	r24, 0x9E	; 158
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	63 e0       	ldi	r22, 0x03	; 3
     46c:	a9 01       	movw	r20, r18
     46e:	0e 94 27 04 	call	0x84e	; 0x84e <MOTOR>
	
	return;

}
     472:	ff 91       	pop	r31
     474:	ef 91       	pop	r30
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	bf 91       	pop	r27
     47c:	af 91       	pop	r26
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	7f 91       	pop	r23
     484:	6f 91       	pop	r22
     486:	5f 91       	pop	r21
     488:	4f 91       	pop	r20
     48a:	3f 91       	pop	r19
     48c:	2f 91       	pop	r18
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	0f 90       	pop	r0
     498:	0b be       	out	0x3b, r0	; 59
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti

000004a4 <ADC_GET>:
#include"linetracer_ADC.h"

// Get ADC from IR sensor
void ADC_GET(int *ADC_DATA) {
     4a4:	8f 92       	push	r8
     4a6:	9f 92       	push	r9
     4a8:	af 92       	push	r10
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	fc 01       	movw	r30, r24
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_3---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 3 :
				PORTD = 0x08;
     4be:	18 e0       	ldi	r17, 0x08	; 8
     4c0:	81 2e       	mov	r8, r17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4c2:	41 e0       	ldi	r20, 0x01	; 1

				ADC_DATA[3] = ADC;
				
				PORTD = 0x00;

				ADMUX = 0xC4; // prepare for ADC_4
     4c4:	b4 ec       	ldi	r27, 0xC4	; 196
     4c6:	9b 2e       	mov	r9, r27

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_5---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 5 :
				PORTD = 0x20;
     4c8:	a0 e2       	ldi	r26, 0x20	; 32
     4ca:	ba 2e       	mov	r11, r26

				ADC_DATA[5] = ADC;
				
				PORTD = 0x00;

				ADMUX = 0xC6; // prepare for ADC_6
     4cc:	76 ec       	ldi	r23, 0xC6	; 198
     4ce:	a7 2e       	mov	r10, r23
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_4---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 4 :

				PORTD = 0x10;
     4d0:	60 e1       	ldi	r22, 0x10	; 16
     4d2:	c6 2e       	mov	r12, r22

				ADC_DATA[4] = ADC;
				
				PORTD = 0x00;

				ADMUX = 0xC5; // prepare for ADC_5
     4d4:	55 ec       	ldi	r21, 0xC5	; 197
     4d6:	e5 2e       	mov	r14, r21

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_6---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 6 :
				PORTD = 0x40;
     4d8:	90 e4       	ldi	r25, 0x40	; 64
     4da:	d9 2e       	mov	r13, r25

				ADC_DATA[6] = ADC;
				
				PORTD = 0x00;

				ADMUX = 0xC7; // prepare for ADC_7
     4dc:	87 ec       	ldi	r24, 0xC7	; 199
     4de:	f8 2e       	mov	r15, r24

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_7---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 7 :
				PORTD = 0x80;
     4e0:	10 e8       	ldi	r17, 0x80	; 128

				ADC_DATA[7] = ADC;
				
				PORTD = 0x00;
				
				ADMUX = 0xC0; // prepare for ADC_0
     4e2:	00 ec       	ldi	r16, 0xC0	; 192
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_1---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :

				PORTD = 0x02;
     4e4:	a2 e0       	ldi	r26, 0x02	; 2

				ADC_DATA[1] = ADC;
				
				PORTD = 0x00;

				ADMUX = 0xC2; // prepare for ADC_2
     4e6:	b2 ec       	ldi	r27, 0xC2	; 194

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_2---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 2 :
				PORTD = 0x04;
     4e8:	74 e0       	ldi	r23, 0x04	; 4

				ADC_DATA[2] = ADC;
				
				PORTD = 0x00;

				ADMUX = 0xC3; // prepare for ADC_3
     4ea:	63 ec       	ldi	r22, 0xC3	; 195

				ADC_DATA[0] = ADC;
				
				PORTD = 0x00;

				ADMUX = 0xC1; // prepare for ADC_1
     4ec:	51 ec       	ldi	r21, 0xC1	; 193
	
	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		switch(i) {
     4ee:	23 30       	cpi	r18, 0x03	; 3
     4f0:	31 05       	cpc	r19, r1
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <ADC_GET+0x52>
     4f4:	4e c0       	rjmp	.+156    	; 0x592 <ADC_GET+0xee>
     4f6:	24 30       	cpi	r18, 0x04	; 4
     4f8:	31 05       	cpc	r19, r1
     4fa:	54 f4       	brge	.+20     	; 0x510 <ADC_GET+0x6c>
     4fc:	21 30       	cpi	r18, 0x01	; 1
     4fe:	31 05       	cpc	r19, r1
     500:	41 f1       	breq	.+80     	; 0x552 <ADC_GET+0xae>
     502:	22 30       	cpi	r18, 0x02	; 2
     504:	31 05       	cpc	r19, r1
     506:	ac f5       	brge	.+106    	; 0x572 <ADC_GET+0xce>
     508:	21 15       	cp	r18, r1
     50a:	31 05       	cpc	r19, r1
     50c:	91 f0       	breq	.+36     	; 0x532 <ADC_GET+0x8e>
     50e:	90 c0       	rjmp	.+288    	; 0x630 <ADC_GET+0x18c>
     510:	25 30       	cpi	r18, 0x05	; 5
     512:	31 05       	cpc	r19, r1
     514:	09 f4       	brne	.+2      	; 0x518 <ADC_GET+0x74>
     516:	5d c0       	rjmp	.+186    	; 0x5d2 <ADC_GET+0x12e>
     518:	25 30       	cpi	r18, 0x05	; 5
     51a:	31 05       	cpc	r19, r1
     51c:	0c f4       	brge	.+2      	; 0x520 <ADC_GET+0x7c>
     51e:	49 c0       	rjmp	.+146    	; 0x5b2 <ADC_GET+0x10e>
     520:	26 30       	cpi	r18, 0x06	; 6
     522:	31 05       	cpc	r19, r1
     524:	09 f4       	brne	.+2      	; 0x528 <ADC_GET+0x84>
     526:	65 c0       	rjmp	.+202    	; 0x5f2 <ADC_GET+0x14e>
     528:	27 30       	cpi	r18, 0x07	; 7
     52a:	31 05       	cpc	r19, r1
     52c:	09 f0       	breq	.+2      	; 0x530 <ADC_GET+0x8c>
     52e:	80 c0       	rjmp	.+256    	; 0x630 <ADC_GET+0x18c>
     530:	70 c0       	rjmp	.+224    	; 0x612 <ADC_GET+0x16e>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_0---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 0 :
				PORTD = 0x01;
     532:	42 bb       	out	0x12, r20	; 18
     534:	84 2f       	mov	r24, r20
     536:	8a 95       	dec	r24
     538:	f1 f7       	brne	.-4      	; 0x536 <ADC_GET+0x92>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     53a:	86 b1       	in	r24, 0x06	; 6
     53c:	80 6c       	ori	r24, 0xC0	; 192
     53e:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     540:	34 9b       	sbis	0x06, 4	; 6
     542:	fe cf       	rjmp	.-4      	; 0x540 <ADC_GET+0x9c>

				ADC_DATA[0] = ADC;
     544:	84 b1       	in	r24, 0x04	; 4
     546:	95 b1       	in	r25, 0x05	; 5
     548:	91 83       	std	Z+1, r25	; 0x01
     54a:	80 83       	st	Z, r24
				
				PORTD = 0x00;
     54c:	12 ba       	out	0x12, r1	; 18

				ADMUX = 0xC1; // prepare for ADC_1
     54e:	57 b9       	out	0x07, r21	; 7
     550:	6f c0       	rjmp	.+222    	; 0x630 <ADC_GET+0x18c>
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_1---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :

				PORTD = 0x02;
     552:	a2 bb       	out	0x12, r26	; 18
     554:	84 2f       	mov	r24, r20
     556:	8a 95       	dec	r24
     558:	f1 f7       	brne	.-4      	; 0x556 <ADC_GET+0xb2>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     55a:	86 b1       	in	r24, 0x06	; 6
     55c:	80 6c       	ori	r24, 0xC0	; 192
     55e:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     560:	34 9b       	sbis	0x06, 4	; 6
     562:	fe cf       	rjmp	.-4      	; 0x560 <ADC_GET+0xbc>

				ADC_DATA[1] = ADC;
     564:	84 b1       	in	r24, 0x04	; 4
     566:	95 b1       	in	r25, 0x05	; 5
     568:	93 83       	std	Z+3, r25	; 0x03
     56a:	82 83       	std	Z+2, r24	; 0x02
				
				PORTD = 0x00;
     56c:	12 ba       	out	0x12, r1	; 18

				ADMUX = 0xC2; // prepare for ADC_2
     56e:	b7 b9       	out	0x07, r27	; 7
     570:	5f c0       	rjmp	.+190    	; 0x630 <ADC_GET+0x18c>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_2---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 2 :
				PORTD = 0x04;
     572:	72 bb       	out	0x12, r23	; 18
     574:	84 2f       	mov	r24, r20
     576:	8a 95       	dec	r24
     578:	f1 f7       	brne	.-4      	; 0x576 <ADC_GET+0xd2>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     57a:	86 b1       	in	r24, 0x06	; 6
     57c:	80 6c       	ori	r24, 0xC0	; 192
     57e:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     580:	34 9b       	sbis	0x06, 4	; 6
     582:	fe cf       	rjmp	.-4      	; 0x580 <ADC_GET+0xdc>

				ADC_DATA[2] = ADC;
     584:	84 b1       	in	r24, 0x04	; 4
     586:	95 b1       	in	r25, 0x05	; 5
     588:	95 83       	std	Z+5, r25	; 0x05
     58a:	84 83       	std	Z+4, r24	; 0x04
				
				PORTD = 0x00;
     58c:	12 ba       	out	0x12, r1	; 18

				ADMUX = 0xC3; // prepare for ADC_3
     58e:	67 b9       	out	0x07, r22	; 7
     590:	4f c0       	rjmp	.+158    	; 0x630 <ADC_GET+0x18c>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_3---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 3 :
				PORTD = 0x08;
     592:	82 ba       	out	0x12, r8	; 18
     594:	84 2f       	mov	r24, r20
     596:	8a 95       	dec	r24
     598:	f1 f7       	brne	.-4      	; 0x596 <ADC_GET+0xf2>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     59a:	86 b1       	in	r24, 0x06	; 6
     59c:	80 6c       	ori	r24, 0xC0	; 192
     59e:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     5a0:	34 9b       	sbis	0x06, 4	; 6
     5a2:	fe cf       	rjmp	.-4      	; 0x5a0 <ADC_GET+0xfc>

				ADC_DATA[3] = ADC;
     5a4:	84 b1       	in	r24, 0x04	; 4
     5a6:	95 b1       	in	r25, 0x05	; 5
     5a8:	97 83       	std	Z+7, r25	; 0x07
     5aa:	86 83       	std	Z+6, r24	; 0x06
				
				PORTD = 0x00;
     5ac:	12 ba       	out	0x12, r1	; 18

				ADMUX = 0xC4; // prepare for ADC_4
     5ae:	97 b8       	out	0x07, r9	; 7
     5b0:	3f c0       	rjmp	.+126    	; 0x630 <ADC_GET+0x18c>
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_4---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 4 :

				PORTD = 0x10;
     5b2:	c2 ba       	out	0x12, r12	; 18
     5b4:	84 2f       	mov	r24, r20
     5b6:	8a 95       	dec	r24
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <ADC_GET+0x112>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     5ba:	86 b1       	in	r24, 0x06	; 6
     5bc:	80 6c       	ori	r24, 0xC0	; 192
     5be:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     5c0:	34 9b       	sbis	0x06, 4	; 6
     5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <ADC_GET+0x11c>

				ADC_DATA[4] = ADC;
     5c4:	84 b1       	in	r24, 0x04	; 4
     5c6:	95 b1       	in	r25, 0x05	; 5
     5c8:	91 87       	std	Z+9, r25	; 0x09
     5ca:	80 87       	std	Z+8, r24	; 0x08
				
				PORTD = 0x00;
     5cc:	12 ba       	out	0x12, r1	; 18

				ADMUX = 0xC5; // prepare for ADC_5
     5ce:	e7 b8       	out	0x07, r14	; 7
     5d0:	2f c0       	rjmp	.+94     	; 0x630 <ADC_GET+0x18c>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_5---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 5 :
				PORTD = 0x20;
     5d2:	b2 ba       	out	0x12, r11	; 18
     5d4:	84 2f       	mov	r24, r20
     5d6:	8a 95       	dec	r24
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <ADC_GET+0x132>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     5da:	86 b1       	in	r24, 0x06	; 6
     5dc:	80 6c       	ori	r24, 0xC0	; 192
     5de:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     5e0:	34 9b       	sbis	0x06, 4	; 6
     5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <ADC_GET+0x13c>

				ADC_DATA[5] = ADC;
     5e4:	84 b1       	in	r24, 0x04	; 4
     5e6:	95 b1       	in	r25, 0x05	; 5
     5e8:	93 87       	std	Z+11, r25	; 0x0b
     5ea:	82 87       	std	Z+10, r24	; 0x0a
				
				PORTD = 0x00;
     5ec:	12 ba       	out	0x12, r1	; 18

				ADMUX = 0xC6; // prepare for ADC_6
     5ee:	a7 b8       	out	0x07, r10	; 7
     5f0:	1f c0       	rjmp	.+62     	; 0x630 <ADC_GET+0x18c>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_6---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 6 :
				PORTD = 0x40;
     5f2:	d2 ba       	out	0x12, r13	; 18
     5f4:	84 2f       	mov	r24, r20
     5f6:	8a 95       	dec	r24
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <ADC_GET+0x152>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     5fa:	86 b1       	in	r24, 0x06	; 6
     5fc:	80 6c       	ori	r24, 0xC0	; 192
     5fe:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     600:	34 9b       	sbis	0x06, 4	; 6
     602:	fe cf       	rjmp	.-4      	; 0x600 <ADC_GET+0x15c>

				ADC_DATA[6] = ADC;
     604:	84 b1       	in	r24, 0x04	; 4
     606:	95 b1       	in	r25, 0x05	; 5
     608:	95 87       	std	Z+13, r25	; 0x0d
     60a:	84 87       	std	Z+12, r24	; 0x0c
				
				PORTD = 0x00;
     60c:	12 ba       	out	0x12, r1	; 18

				ADMUX = 0xC7; // prepare for ADC_7
     60e:	f7 b8       	out	0x07, r15	; 7
     610:	0f c0       	rjmp	.+30     	; 0x630 <ADC_GET+0x18c>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_7---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 7 :
				PORTD = 0x80;
     612:	12 bb       	out	0x12, r17	; 18
     614:	84 2f       	mov	r24, r20
     616:	8a 95       	dec	r24
     618:	f1 f7       	brne	.-4      	; 0x616 <ADC_GET+0x172>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     61a:	86 b1       	in	r24, 0x06	; 6
     61c:	80 6c       	ori	r24, 0xC0	; 192
     61e:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     620:	34 9b       	sbis	0x06, 4	; 6
     622:	fe cf       	rjmp	.-4      	; 0x620 <ADC_GET+0x17c>

				ADC_DATA[7] = ADC;
     624:	84 b1       	in	r24, 0x04	; 4
     626:	95 b1       	in	r25, 0x05	; 5
     628:	97 87       	std	Z+15, r25	; 0x0f
     62a:	86 87       	std	Z+14, r24	; 0x0e
				
				PORTD = 0x00;
     62c:	12 ba       	out	0x12, r1	; 18
				
				ADMUX = 0xC0; // prepare for ADC_0
     62e:	07 b9       	out	0x07, r16	; 7
	//------------IR order-----------//	
	// 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 //
	
	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	28 30       	cpi	r18, 0x08	; 8
     636:	31 05       	cpc	r19, r1
     638:	09 f0       	breq	.+2      	; 0x63c <ADC_GET+0x198>
     63a:	59 cf       	rjmp	.-334    	; 0x4ee <ADC_GET+0x4a>

		}

	}

}
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	bf 90       	pop	r11
     64a:	af 90       	pop	r10
     64c:	9f 90       	pop	r9
     64e:	8f 90       	pop	r8
     650:	08 95       	ret

00000652 <ADC_MAX_MIN>:

// Get ADC max and min value from ADC_DATA[i]
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA) {
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec 01       	movw	r28, r24
     658:	da 01       	movw	r26, r20
     65a:	fb 01       	movw	r30, r22
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	50 e0       	ldi	r21, 0x00	; 0

	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
						
		if( ADC_MAX[i] < ADC_DATA[i] ) // ADC_MAX
     660:	2d 91       	ld	r18, X+
     662:	3c 91       	ld	r19, X
     664:	11 97       	sbiw	r26, 0x01	; 1
     666:	88 81       	ld	r24, Y
     668:	99 81       	ldd	r25, Y+1	; 0x01
     66a:	82 17       	cp	r24, r18
     66c:	93 07       	cpc	r25, r19
     66e:	14 f4       	brge	.+4      	; 0x674 <ADC_MAX_MIN+0x22>
			ADC_MAX[i] = ADC_DATA[i];
     670:	39 83       	std	Y+1, r19	; 0x01
     672:	28 83       	st	Y, r18
		
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
     674:	2d 91       	ld	r18, X+
     676:	3c 91       	ld	r19, X
     678:	11 97       	sbiw	r26, 0x01	; 1
     67a:	80 81       	ld	r24, Z
     67c:	91 81       	ldd	r25, Z+1	; 0x01
     67e:	28 17       	cp	r18, r24
     680:	39 07       	cpc	r19, r25
     682:	14 f4       	brge	.+4      	; 0x688 <ADC_MAX_MIN+0x36>
			ADC_MIN[i] = ADC_DATA[i];	
     684:	31 83       	std	Z+1, r19	; 0x01
     686:	20 83       	st	Z, r18
// Get ADC max and min value from ADC_DATA[i]
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA) {

	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
     688:	4f 5f       	subi	r20, 0xFF	; 255
     68a:	5f 4f       	sbci	r21, 0xFF	; 255
     68c:	22 96       	adiw	r28, 0x02	; 2
     68e:	12 96       	adiw	r26, 0x02	; 2
     690:	32 96       	adiw	r30, 0x02	; 2
     692:	48 30       	cpi	r20, 0x08	; 8
     694:	51 05       	cpc	r21, r1
     696:	21 f7       	brne	.-56     	; 0x660 <ADC_MAX_MIN+0xe>
		
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
			ADC_MIN[i] = ADC_DATA[i];	
	
	}
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <ADC_NORMALIZE>:


// Get normalized ADC value (white base / black line / resolution=100)
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN) {
     69e:	2f 92       	push	r2
     6a0:	3f 92       	push	r3
     6a2:	4f 92       	push	r4
     6a4:	5f 92       	push	r5
     6a6:	6f 92       	push	r6
     6a8:	7f 92       	push	r7
     6aa:	8f 92       	push	r8
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	df 93       	push	r29
     6c0:	cf 93       	push	r28
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <ADC_NORMALIZE+0x26>
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <ADC_NORMALIZE+0x28>
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	9a 83       	std	Y+2, r25	; 0x02
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	1b 01       	movw	r2, r22
     6d0:	2a 01       	movw	r4, r20
     6d2:	39 01       	movw	r6, r18
     6d4:	1c 82       	std	Y+4, r1	; 0x04
     6d6:	1b 82       	std	Y+3, r1	; 0x03
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
     6d8:	eb 81       	ldd	r30, Y+3	; 0x03
     6da:	fc 81       	ldd	r31, Y+4	; 0x04
     6dc:	e4 0d       	add	r30, r4
     6de:	f5 1d       	adc	r31, r5
     6e0:	e0 80       	ld	r14, Z
     6e2:	f1 80       	ldd	r15, Z+1	; 0x01
		temp_2 = ADC_MAX[i] - ADC_MIN[i];

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
     6e4:	89 80       	ldd	r8, Y+1	; 0x01
     6e6:	9a 80       	ldd	r9, Y+2	; 0x02
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	9c 81       	ldd	r25, Y+4	; 0x04
     6ec:	88 0e       	add	r8, r24
     6ee:	99 1e       	adc	r9, r25
     6f0:	fc 01       	movw	r30, r24
     6f2:	e2 0d       	add	r30, r2
     6f4:	f3 1d       	adc	r31, r3
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	b7 01       	movw	r22, r14
     6fc:	68 1b       	sub	r22, r24
     6fe:	79 0b       	sbc	r23, r25
     700:	88 27       	eor	r24, r24
     702:	77 fd       	sbrc	r23, 7
     704:	80 95       	com	r24
     706:	98 2f       	mov	r25, r24
     708:	0e 94 b5 08 	call	0x116a	; 0x116a <__floatsisf>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	48 ec       	ldi	r20, 0xC8	; 200
     712:	52 e4       	ldi	r21, 0x42	; 66
     714:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__mulsf3>
     718:	5b 01       	movw	r10, r22
     71a:	6c 01       	movw	r12, r24
     71c:	eb 81       	ldd	r30, Y+3	; 0x03
     71e:	fc 81       	ldd	r31, Y+4	; 0x04
     720:	e6 0d       	add	r30, r6
     722:	f7 1d       	adc	r31, r7
     724:	80 81       	ld	r24, Z
     726:	91 81       	ldd	r25, Z+1	; 0x01
     728:	e8 1a       	sub	r14, r24
     72a:	f9 0a       	sbc	r15, r25
     72c:	00 27       	eor	r16, r16
     72e:	f7 fc       	sbrc	r15, 7
     730:	00 95       	com	r16
     732:	10 2f       	mov	r17, r16
     734:	c8 01       	movw	r24, r16
     736:	b7 01       	movw	r22, r14
     738:	0e 94 b5 08 	call	0x116a	; 0x116a <__floatsisf>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	c6 01       	movw	r24, r12
     742:	b5 01       	movw	r22, r10
     744:	0e 94 09 08 	call	0x1012	; 0x1012 <__divsf3>
     748:	0e 94 13 09 	call	0x1226	; 0x1226 <__fixsfsi>
     74c:	f4 01       	movw	r30, r8
     74e:	71 83       	std	Z+1, r23	; 0x01
     750:	60 83       	st	Z, r22
     752:	8b 81       	ldd	r24, Y+3	; 0x03
     754:	9c 81       	ldd	r25, Y+4	; 0x04
     756:	02 96       	adiw	r24, 0x02	; 2
     758:	9c 83       	std	Y+4, r25	; 0x04
     75a:	8b 83       	std	Y+3, r24	; 0x03
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN) {
	
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
     75c:	40 97       	sbiw	r24, 0x10	; 16
     75e:	09 f0       	breq	.+2      	; 0x762 <ADC_NORMALIZE+0xc4>
     760:	bb cf       	rjmp	.-138    	; 0x6d8 <ADC_NORMALIZE+0x3a>

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);

	}

}
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	cf 91       	pop	r28
     76c:	df 91       	pop	r29
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	bf 90       	pop	r11
     77c:	af 90       	pop	r10
     77e:	9f 90       	pop	r9
     780:	8f 90       	pop	r8
     782:	7f 90       	pop	r7
     784:	6f 90       	pop	r6
     786:	5f 90       	pop	r5
     788:	4f 90       	pop	r4
     78a:	3f 90       	pop	r3
     78c:	2f 90       	pop	r2
     78e:	08 95       	ret

00000790 <DATA_WEIGHT>:

void DATA_WEIGHT(int *DIRECTION, int *WEIGHT_DATA, const int *NORM_DATA) {
     790:	cf 92       	push	r12
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	60 97       	sbiw	r28, 0x10	; 16
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	8c 01       	movw	r16, r24
     7b2:	6a 01       	movw	r12, r20

	int i=0;
	int cnt=0;

	//int weight[8] = {-100, -125, -150, -200, 200, 150, 125, 100};
	int weight[8] = {-80, -70, -50, 0, 0, 50, 70, 80};
     7b4:	de 01       	movw	r26, r28
     7b6:	11 96       	adiw	r26, 0x01	; 1
     7b8:	e0 e1       	ldi	r30, 0x10	; 16
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	80 e1       	ldi	r24, 0x10	; 16
     7be:	01 90       	ld	r0, Z+
     7c0:	0d 92       	st	X+, r0
     7c2:	81 50       	subi	r24, 0x01	; 1
     7c4:	e1 f7       	brne	.-8      	; 0x7be <DATA_WEIGHT+0x2e>
     7c6:	ab 01       	movw	r20, r22
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e0       	ldi	r27, 0x00	; 0

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		if(NORM_DATA[i]>=(int)(RESOLUTION*0.6)) {

			WEIGHT_DATA[i] = weight[i];
     7d0:	7e 01       	movw	r14, r28
     7d2:	08 94       	sec
     7d4:	e1 1c       	adc	r14, r1
     7d6:	f1 1c       	adc	r15, r1
	//int weight[8] = {-100, -125, -150, -200, 200, 150, 125, 100};
	int weight[8] = {-80, -70, -50, 0, 0, 50, 70, 80};

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		if(NORM_DATA[i]>=(int)(RESOLUTION*0.6)) {
     7d8:	f6 01       	movw	r30, r12
     7da:	ea 0f       	add	r30, r26
     7dc:	fb 1f       	adc	r31, r27
     7de:	80 81       	ld	r24, Z
     7e0:	91 81       	ldd	r25, Z+1	; 0x01
     7e2:	cc 97       	sbiw	r24, 0x3c	; 60
     7e4:	94 f0       	brlt	.+36     	; 0x80a <DATA_WEIGHT+0x7a>

			WEIGHT_DATA[i] = weight[i];
     7e6:	f7 01       	movw	r30, r14
     7e8:	ea 0f       	add	r30, r26
     7ea:	fb 1f       	adc	r31, r27
     7ec:	20 81       	ld	r18, Z
     7ee:	31 81       	ldd	r19, Z+1	; 0x01
     7f0:	fa 01       	movw	r30, r20
     7f2:	31 83       	std	Z+1, r19	; 0x01
     7f4:	20 83       	st	Z, r18
			*DIRECTION = *DIRECTION + weight[i];
     7f6:	f8 01       	movw	r30, r16
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	82 0f       	add	r24, r18
     7fe:	93 1f       	adc	r25, r19
     800:	91 83       	std	Z+1, r25	; 0x01
     802:	80 83       	st	Z, r24
			cnt++;
     804:	6f 5f       	subi	r22, 0xFF	; 255
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	03 c0       	rjmp	.+6      	; 0x810 <DATA_WEIGHT+0x80>

		}
		else {

			WEIGHT_DATA[i] = 0;
     80a:	fa 01       	movw	r30, r20
     80c:	11 82       	std	Z+1, r1	; 0x01
     80e:	10 82       	st	Z, r1
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	4e 5f       	subi	r20, 0xFE	; 254
     814:	5f 4f       	sbci	r21, 0xFF	; 255
	int cnt=0;

	//int weight[8] = {-100, -125, -150, -200, 200, 150, 125, 100};
	int weight[8] = {-80, -70, -50, 0, 0, 50, 70, 80};

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
     816:	a0 31       	cpi	r26, 0x10	; 16
     818:	b1 05       	cpc	r27, r1
     81a:	f1 f6       	brne	.-68     	; 0x7d8 <DATA_WEIGHT+0x48>

		}

	}

	if(cnt!=0) *DIRECTION = (int)(*DIRECTION/cnt);
     81c:	61 15       	cp	r22, r1
     81e:	71 05       	cpc	r23, r1
     820:	39 f0       	breq	.+14     	; 0x830 <DATA_WEIGHT+0xa0>
     822:	f8 01       	movw	r30, r16
     824:	80 81       	ld	r24, Z
     826:	91 81       	ldd	r25, Z+1	; 0x01
     828:	0e 94 17 0b 	call	0x162e	; 0x162e <__divmodhi4>
     82c:	71 83       	std	Z+1, r23	; 0x01
     82e:	60 83       	st	Z, r22

}
     830:	60 96       	adiw	r28, 0x10	; 16
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	cf 91       	pop	r28
     83e:	df 91       	pop	r29
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	08 95       	ret

0000084e <MOTOR>:
	}

}
*/

void MOTOR(char *step, const char dir, const int speed) {
     84e:	fc 01       	movw	r30, r24
	// 1 clock(step) = 1.8 degree //
	//int step_f[4] = {0x59, 0x6A, 0xA6, 0x95};
	//int step_r[4] = {0x50, 0x60, 0xA0, 0x90};
	//int step_l[4] = {0x09, 0x0A, 0x06, 0x05};

	OCR0 = speed;
     850:	41 bf       	out	0x31, r20	; 49

	switch(dir) {
     852:	62 30       	cpi	r22, 0x02	; 2
     854:	c9 f0       	breq	.+50     	; 0x888 <MOTOR+0x3a>
     856:	63 30       	cpi	r22, 0x03	; 3
     858:	49 f1       	breq	.+82     	; 0x8ac <MOTOR+0x5e>
     85a:	66 23       	and	r22, r22
     85c:	e1 f5       	brne	.+120    	; 0x8d6 <MOTOR+0x88>
		
		case FORWARD :

			switch(*step) {
     85e:	80 81       	ld	r24, Z
     860:	8a 36       	cpi	r24, 0x6A	; 106
     862:	61 f0       	breq	.+24     	; 0x87c <MOTOR+0x2e>
     864:	8b 36       	cpi	r24, 0x6B	; 107
     866:	18 f4       	brcc	.+6      	; 0x86e <MOTOR+0x20>
     868:	89 35       	cpi	r24, 0x59	; 89
     86a:	61 f4       	brne	.+24     	; 0x884 <MOTOR+0x36>
     86c:	05 c0       	rjmp	.+10     	; 0x878 <MOTOR+0x2a>
     86e:	85 39       	cpi	r24, 0x95	; 149
     870:	49 f0       	breq	.+18     	; 0x884 <MOTOR+0x36>
     872:	86 3a       	cpi	r24, 0xA6	; 166
     874:	39 f4       	brne	.+14     	; 0x884 <MOTOR+0x36>
     876:	04 c0       	rjmp	.+8      	; 0x880 <MOTOR+0x32>
				case 0x59 : *step = 0x6A; break;
     878:	8a e6       	ldi	r24, 0x6A	; 106
     87a:	2c c0       	rjmp	.+88     	; 0x8d4 <MOTOR+0x86>
				case 0x6A : *step = 0xA6; break;
     87c:	86 ea       	ldi	r24, 0xA6	; 166
     87e:	2a c0       	rjmp	.+84     	; 0x8d4 <MOTOR+0x86>
				case 0xA6 : *step = 0x95; break;
     880:	85 e9       	ldi	r24, 0x95	; 149
     882:	28 c0       	rjmp	.+80     	; 0x8d4 <MOTOR+0x86>
				case 0x95 : *step = 0x59; break;
				default   : *step = 0x59;
     884:	89 e5       	ldi	r24, 0x59	; 89
     886:	26 c0       	rjmp	.+76     	; 0x8d4 <MOTOR+0x86>

			break;

		case RIGHT :

			switch(*step) {
     888:	80 81       	ld	r24, Z
     88a:	86 30       	cpi	r24, 0x06	; 6
     88c:	59 f0       	breq	.+22     	; 0x8a4 <MOTOR+0x56>
     88e:	87 30       	cpi	r24, 0x07	; 7
     890:	58 f0       	brcs	.+22     	; 0x8a8 <MOTOR+0x5a>
     892:	89 30       	cpi	r24, 0x09	; 9
     894:	19 f0       	breq	.+6      	; 0x89c <MOTOR+0x4e>
     896:	8a 30       	cpi	r24, 0x0A	; 10
     898:	39 f4       	brne	.+14     	; 0x8a8 <MOTOR+0x5a>
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <MOTOR+0x52>
				case 0x09 : *step = 0x0A; break;
     89c:	8a e0       	ldi	r24, 0x0A	; 10
     89e:	1a c0       	rjmp	.+52     	; 0x8d4 <MOTOR+0x86>
				case 0x0A : *step = 0x06; break;
     8a0:	86 e0       	ldi	r24, 0x06	; 6
     8a2:	18 c0       	rjmp	.+48     	; 0x8d4 <MOTOR+0x86>
				case 0x06 : *step = 0x05; break;
     8a4:	85 e0       	ldi	r24, 0x05	; 5
     8a6:	16 c0       	rjmp	.+44     	; 0x8d4 <MOTOR+0x86>
				case 0x05 : *step = 0x09; break;
				default   : *step = 0x09;
     8a8:	89 e0       	ldi	r24, 0x09	; 9
     8aa:	14 c0       	rjmp	.+40     	; 0x8d4 <MOTOR+0x86>

			break;

		case LEFT :

			switch(*step) {
     8ac:	80 81       	ld	r24, Z
     8ae:	80 36       	cpi	r24, 0x60	; 96
     8b0:	61 f0       	breq	.+24     	; 0x8ca <MOTOR+0x7c>
     8b2:	81 36       	cpi	r24, 0x61	; 97
     8b4:	18 f4       	brcc	.+6      	; 0x8bc <MOTOR+0x6e>
     8b6:	80 35       	cpi	r24, 0x50	; 80
     8b8:	61 f4       	brne	.+24     	; 0x8d2 <MOTOR+0x84>
     8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <MOTOR+0x78>
     8bc:	80 39       	cpi	r24, 0x90	; 144
     8be:	49 f0       	breq	.+18     	; 0x8d2 <MOTOR+0x84>
     8c0:	80 3a       	cpi	r24, 0xA0	; 160
     8c2:	39 f4       	brne	.+14     	; 0x8d2 <MOTOR+0x84>
     8c4:	04 c0       	rjmp	.+8      	; 0x8ce <MOTOR+0x80>
				case 0x50 : *step = 0x60; break;
     8c6:	80 e6       	ldi	r24, 0x60	; 96
     8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <MOTOR+0x86>
				case 0x60 : *step = 0xA0; break;
     8ca:	80 ea       	ldi	r24, 0xA0	; 160
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <MOTOR+0x86>
				case 0xA0 : *step = 0x90; break;
     8ce:	80 e9       	ldi	r24, 0x90	; 144
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <MOTOR+0x86>
				case 0x90 : *step = 0x50; break;
				default   : *step = 0x50;
     8d2:	80 e5       	ldi	r24, 0x50	; 80
     8d4:	80 83       	st	Z, r24
			break;


	}

	PORTC = *step;
     8d6:	80 81       	ld	r24, Z
     8d8:	85 bb       	out	0x15, r24	; 21

}
     8da:	08 95       	ret

000008dc <MOTOR_R>:


void MOTOR_R(const int dir, const int rad) {
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	df 93       	push	r29
     8e6:	cf 93       	push	r28
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	60 97       	sbiw	r28, 0x10	; 16
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	8b 01       	movw	r16, r22
	
	// 1-2 phase excitation //
	// 2 clock(step) = 1.8 degree //
	int step[8] = {0x10, 0x50, 0x40, 0x60, 0x20, 0xA0, 0x80, 0x90};
     8fa:	de 01       	movw	r26, r28
     8fc:	11 96       	adiw	r26, 0x01	; 1
     8fe:	e0 e3       	ldi	r30, 0x30	; 48
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	20 e1       	ldi	r18, 0x10	; 16
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
     908:	21 50       	subi	r18, 0x01	; 1
     90a:	e1 f7       	brne	.-8      	; 0x904 <MOTOR_R+0x28>

	int n=0;
	int temp=0;
	
	// Forward
	if(dir==0) {
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	d9 f4       	brne	.+54     	; 0x946 <MOTOR_R+0x6a>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	e0 e0       	ldi	r30, 0x00	; 0
     916:	f0 e0       	ldi	r31, 0x00	; 0
		
		while(n<rad) {
			
			PORTC = step[temp];
     918:	de 01       	movw	r26, r28
     91a:	11 96       	adiw	r26, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     91c:	40 ee       	ldi	r20, 0xE0	; 224
     91e:	5e e2       	ldi	r21, 0x2E	; 46
     920:	0e c0       	rjmp	.+28     	; 0x93e <MOTOR_R+0x62>
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	ea 0f       	add	r30, r26
     928:	fb 1f       	adc	r31, r27
     92a:	80 81       	ld	r24, Z
     92c:	85 bb       	out	0x15, r24	; 21
			temp = (++n)%PH_EX;
     92e:	2f 5f       	subi	r18, 0xFF	; 255
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	f9 01       	movw	r30, r18
     934:	e3 70       	andi	r30, 0x03	; 3
     936:	f0 70       	andi	r31, 0x00	; 0
     938:	ca 01       	movw	r24, r20
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <MOTOR_R+0x5e>
	int temp=0;
	
	// Forward
	if(dir==0) {
		
		while(n<rad) {
     93e:	20 17       	cp	r18, r16
     940:	31 07       	cpc	r19, r17
     942:	7c f3       	brlt	.-34     	; 0x922 <MOTOR_R+0x46>
     944:	23 c0       	rjmp	.+70     	; 0x98c <MOTOR_R+0xb0>

		}

	}
	// Backward
	else if(dir==1) {
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	09 f5       	brne	.+66     	; 0x98c <MOTOR_R+0xb0>
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	50 e0       	ldi	r21, 0x00	; 0
		
		while(n<rad) {
			
			PORTC = step[7-temp];
     952:	97 e0       	ldi	r25, 0x07	; 7
     954:	e9 2e       	mov	r14, r25
     956:	f1 2c       	mov	r15, r1
     958:	be 01       	movw	r22, r28
     95a:	6f 5f       	subi	r22, 0xFF	; 255
     95c:	7f 4f       	sbci	r23, 0xFF	; 255
     95e:	a0 ee       	ldi	r26, 0xE0	; 224
     960:	be e2       	ldi	r27, 0x2E	; 46
     962:	11 c0       	rjmp	.+34     	; 0x986 <MOTOR_R+0xaa>
     964:	f7 01       	movw	r30, r14
     966:	e4 1b       	sub	r30, r20
     968:	f5 0b       	sbc	r31, r21
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	e6 0f       	add	r30, r22
     970:	f7 1f       	adc	r31, r23
     972:	80 81       	ld	r24, Z
     974:	85 bb       	out	0x15, r24	; 21
			temp = (++n)%PH_EX;
     976:	2f 5f       	subi	r18, 0xFF	; 255
     978:	3f 4f       	sbci	r19, 0xFF	; 255
     97a:	a9 01       	movw	r20, r18
     97c:	43 70       	andi	r20, 0x03	; 3
     97e:	50 70       	andi	r21, 0x00	; 0
     980:	cd 01       	movw	r24, r26
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	f1 f7       	brne	.-4      	; 0x982 <MOTOR_R+0xa6>

	}
	// Backward
	else if(dir==1) {
		
		while(n<rad) {
     986:	20 17       	cp	r18, r16
     988:	31 07       	cpc	r19, r17
     98a:	64 f3       	brlt	.-40     	; 0x964 <MOTOR_R+0x88>
		}


	}

}
     98c:	60 96       	adiw	r28, 0x10	; 16
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	cf 91       	pop	r28
     99a:	df 91       	pop	r29
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	08 95       	ret

000009a6 <MOTOR_L>:

void MOTOR_L(const int dir, const int rad) {
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	60 97       	sbiw	r28, 0x10	; 16
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	8b 01       	movw	r16, r22
	
	// 1-2 phase excitation //
	// 2 clock(step) = 1.8 degree //
	int step[8] = {0x09, 0x08, 0x0A, 0x02, 0x06, 0x04, 0x05, 0x01};
     9c4:	de 01       	movw	r26, r28
     9c6:	11 96       	adiw	r26, 0x01	; 1
     9c8:	e0 e2       	ldi	r30, 0x20	; 32
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	20 e1       	ldi	r18, 0x10	; 16
     9ce:	01 90       	ld	r0, Z+
     9d0:	0d 92       	st	X+, r0
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <MOTOR_L+0x28>

	int n=0;
	int temp=0;
	
	// Forward
	if(dir==0) {
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	d9 f4       	brne	.+54     	; 0xa10 <MOTOR_L+0x6a>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	e0 e0       	ldi	r30, 0x00	; 0
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
		
		while(n<rad) {
			
			PORTC = step[temp];
     9e2:	de 01       	movw	r26, r28
     9e4:	11 96       	adiw	r26, 0x01	; 1
     9e6:	40 ee       	ldi	r20, 0xE0	; 224
     9e8:	5e e2       	ldi	r21, 0x2E	; 46
     9ea:	0e c0       	rjmp	.+28     	; 0xa08 <MOTOR_L+0x62>
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	ea 0f       	add	r30, r26
     9f2:	fb 1f       	adc	r31, r27
     9f4:	80 81       	ld	r24, Z
     9f6:	85 bb       	out	0x15, r24	; 21
			temp = (++n)%8;
     9f8:	2f 5f       	subi	r18, 0xFF	; 255
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	f9 01       	movw	r30, r18
     9fe:	e7 70       	andi	r30, 0x07	; 7
     a00:	f0 70       	andi	r31, 0x00	; 0
     a02:	ca 01       	movw	r24, r20
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <MOTOR_L+0x5e>
	int temp=0;
	
	// Forward
	if(dir==0) {
		
		while(n<rad) {
     a08:	20 17       	cp	r18, r16
     a0a:	31 07       	cpc	r19, r17
     a0c:	7c f3       	brlt	.-34     	; 0x9ec <MOTOR_L+0x46>
     a0e:	23 c0       	rjmp	.+70     	; 0xa56 <MOTOR_L+0xb0>

		}

	}
	// Backward
	else if(dir==1){
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	09 f5       	brne	.+66     	; 0xa56 <MOTOR_L+0xb0>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e0       	ldi	r21, 0x00	; 0
		
		while(n<rad) {
			
			PORTC = step[7-temp];
     a1c:	97 e0       	ldi	r25, 0x07	; 7
     a1e:	e9 2e       	mov	r14, r25
     a20:	f1 2c       	mov	r15, r1
     a22:	be 01       	movw	r22, r28
     a24:	6f 5f       	subi	r22, 0xFF	; 255
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	a0 ee       	ldi	r26, 0xE0	; 224
     a2a:	be e2       	ldi	r27, 0x2E	; 46
     a2c:	11 c0       	rjmp	.+34     	; 0xa50 <MOTOR_L+0xaa>
     a2e:	f7 01       	movw	r30, r14
     a30:	e4 1b       	sub	r30, r20
     a32:	f5 0b       	sbc	r31, r21
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	e6 0f       	add	r30, r22
     a3a:	f7 1f       	adc	r31, r23
     a3c:	80 81       	ld	r24, Z
     a3e:	85 bb       	out	0x15, r24	; 21
			temp = (++n)%8;
     a40:	2f 5f       	subi	r18, 0xFF	; 255
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	a9 01       	movw	r20, r18
     a46:	47 70       	andi	r20, 0x07	; 7
     a48:	50 70       	andi	r21, 0x00	; 0
     a4a:	cd 01       	movw	r24, r26
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <MOTOR_L+0xa6>

	}
	// Backward
	else if(dir==1){
		
		while(n<rad) {
     a50:	20 17       	cp	r18, r16
     a52:	31 07       	cpc	r19, r17
     a54:	64 f3       	brlt	.-40     	; 0xa2e <MOTOR_L+0x88>
		}


	}

}
     a56:	60 96       	adiw	r28, 0x10	; 16
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	cf 91       	pop	r28
     a64:	df 91       	pop	r29
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	08 95       	ret

00000a70 <Uart_Putch0>:

/* function of transmiting the data to computer */
void Uart_Putch0( unsigned char data )
{
	
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
     a70:	5d 9b       	sbis	0x0b, 5	; 11
     a72:	fe cf       	rjmp	.-4      	; 0xa70 <Uart_Putch0>
	
	UDR0 = data; /* Put data into buffer, sends the data */
     a74:	8c b9       	out	0x0c, r24	; 12
}
     a76:	08 95       	ret

00000a78 <Uart_Getch0>:

/* function of transmiting the data to MCU */
unsigned char Uart_Getch0( void )
{
	
	while ( !(UCSR0A & (1<<RXC0))); /* Wait for data to be received */
     a78:	5f 9b       	sbis	0x0b, 7	; 11
     a7a:	fe cf       	rjmp	.-4      	; 0xa78 <Uart_Getch0>
	
	return UDR0; /* Get and return received data from buffer */
     a7c:	8c b1       	in	r24, 0x0c	; 12
}
     a7e:	08 95       	ret

00000a80 <Uart_U16Bit_PutNum0>:

void Uart_U16Bit_PutNum0( unsigned int NumData ) 
{ 
     a80:	9c 01       	movw	r18, r24

/* function of transmiting the data to computer */
void Uart_Putch0( unsigned char data )
{
	
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
     a82:	5d 9b       	sbis	0x0b, 5	; 11
     a84:	fe cf       	rjmp	.-4      	; 0xa82 <Uart_U16Bit_PutNum0+0x2>

     //TempData = (NumData%10000)/1000; 
     //Uart_Putch0(TempData+48);                 // 1000
  
     TempData = (NumData%1000)/100; 
     Uart_Putch0(TempData+48);                 // 100
     a86:	c9 01       	movw	r24, r18
     a88:	68 ee       	ldi	r22, 0xE8	; 232
     a8a:	73 e0       	ldi	r23, 0x03	; 3
     a8c:	0e 94 03 0b 	call	0x1606	; 0x1606 <__udivmodhi4>
     a90:	64 e6       	ldi	r22, 0x64	; 100
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	0e 94 03 0b 	call	0x1606	; 0x1606 <__udivmodhi4>
     a98:	60 5d       	subi	r22, 0xD0	; 208
void Uart_Putch0( unsigned char data )
{
	
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
	
	UDR0 = data; /* Put data into buffer, sends the data */
     a9a:	6c b9       	out	0x0c, r22	; 12

/* function of transmiting the data to computer */
void Uart_Putch0( unsigned char data )
{
	
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
     a9c:	5d 9b       	sbis	0x0b, 5	; 11
     a9e:	fe cf       	rjmp	.-4      	; 0xa9c <Uart_U16Bit_PutNum0+0x1c>
  
     TempData = (NumData%1000)/100; 
     Uart_Putch0(TempData+48);                 // 100
  
     TempData = (NumData%100)/10; 
     Uart_Putch0(TempData+48);                  // 10
     aa0:	c9 01       	movw	r24, r18
     aa2:	64 e6       	ldi	r22, 0x64	; 100
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	0e 94 03 0b 	call	0x1606	; 0x1606 <__udivmodhi4>
     aaa:	6a e0       	ldi	r22, 0x0A	; 10
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	0e 94 03 0b 	call	0x1606	; 0x1606 <__udivmodhi4>
     ab2:	60 5d       	subi	r22, 0xD0	; 208
void Uart_Putch0( unsigned char data )
{
	
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
	
	UDR0 = data; /* Put data into buffer, sends the data */
     ab4:	6c b9       	out	0x0c, r22	; 12

/* function of transmiting the data to computer */
void Uart_Putch0( unsigned char data )
{
	
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
     ab6:	5d 9b       	sbis	0x0b, 5	; 11
     ab8:	fe cf       	rjmp	.-4      	; 0xab6 <Uart_U16Bit_PutNum0+0x36>
     Uart_Putch0(TempData+48);                 // 100
  
     TempData = (NumData%100)/10; 
     Uart_Putch0(TempData+48);                  // 10
     TempData = NumData%10; 
  Uart_Putch0(TempData+48);
     aba:	c9 01       	movw	r24, r18
     abc:	6a e0       	ldi	r22, 0x0A	; 10
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	0e 94 03 0b 	call	0x1606	; 0x1606 <__udivmodhi4>
     ac4:	80 5d       	subi	r24, 0xD0	; 208
void Uart_Putch0( unsigned char data )
{
	
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
	
	UDR0 = data; /* Put data into buffer, sends the data */
     ac6:	8c b9       	out	0x0c, r24	; 12
		Uart_Putch0('-');
		Uart_U16Bit_PutNum0('VARIABLE');
		'VARIABLE' = -1*'VARIABLE';
	}*/

}
     ac8:	08 95       	ret

00000aca <_fpadd_parts>:
     aca:	a0 e0       	ldi	r26, 0x00	; 0
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	eb e6       	ldi	r30, 0x6B	; 107
     ad0:	f5 e0       	ldi	r31, 0x05	; 5
     ad2:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__prologue_saves__>
     ad6:	dc 01       	movw	r26, r24
     ad8:	2b 01       	movw	r4, r22
     ada:	fa 01       	movw	r30, r20
     adc:	9c 91       	ld	r25, X
     ade:	92 30       	cpi	r25, 0x02	; 2
     ae0:	08 f4       	brcc	.+2      	; 0xae4 <_fpadd_parts+0x1a>
     ae2:	39 c1       	rjmp	.+626    	; 0xd56 <_fpadd_parts+0x28c>
     ae4:	eb 01       	movw	r28, r22
     ae6:	88 81       	ld	r24, Y
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	08 f4       	brcc	.+2      	; 0xaee <_fpadd_parts+0x24>
     aec:	33 c1       	rjmp	.+614    	; 0xd54 <_fpadd_parts+0x28a>
     aee:	94 30       	cpi	r25, 0x04	; 4
     af0:	69 f4       	brne	.+26     	; 0xb0c <_fpadd_parts+0x42>
     af2:	84 30       	cpi	r24, 0x04	; 4
     af4:	09 f0       	breq	.+2      	; 0xaf8 <_fpadd_parts+0x2e>
     af6:	2f c1       	rjmp	.+606    	; 0xd56 <_fpadd_parts+0x28c>
     af8:	11 96       	adiw	r26, 0x01	; 1
     afa:	9c 91       	ld	r25, X
     afc:	11 97       	sbiw	r26, 0x01	; 1
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	98 17       	cp	r25, r24
     b02:	09 f4       	brne	.+2      	; 0xb06 <_fpadd_parts+0x3c>
     b04:	28 c1       	rjmp	.+592    	; 0xd56 <_fpadd_parts+0x28c>
     b06:	a0 e4       	ldi	r26, 0x40	; 64
     b08:	b1 e0       	ldi	r27, 0x01	; 1
     b0a:	25 c1       	rjmp	.+586    	; 0xd56 <_fpadd_parts+0x28c>
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	09 f4       	brne	.+2      	; 0xb12 <_fpadd_parts+0x48>
     b10:	21 c1       	rjmp	.+578    	; 0xd54 <_fpadd_parts+0x28a>
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	a9 f4       	brne	.+42     	; 0xb40 <_fpadd_parts+0x76>
     b16:	92 30       	cpi	r25, 0x02	; 2
     b18:	09 f0       	breq	.+2      	; 0xb1c <_fpadd_parts+0x52>
     b1a:	1d c1       	rjmp	.+570    	; 0xd56 <_fpadd_parts+0x28c>
     b1c:	9a 01       	movw	r18, r20
     b1e:	ad 01       	movw	r20, r26
     b20:	88 e0       	ldi	r24, 0x08	; 8
     b22:	ea 01       	movw	r28, r20
     b24:	09 90       	ld	r0, Y+
     b26:	ae 01       	movw	r20, r28
     b28:	e9 01       	movw	r28, r18
     b2a:	09 92       	st	Y+, r0
     b2c:	9e 01       	movw	r18, r28
     b2e:	81 50       	subi	r24, 0x01	; 1
     b30:	c1 f7       	brne	.-16     	; 0xb22 <_fpadd_parts+0x58>
     b32:	e2 01       	movw	r28, r4
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	11 96       	adiw	r26, 0x01	; 1
     b38:	9c 91       	ld	r25, X
     b3a:	89 23       	and	r24, r25
     b3c:	81 83       	std	Z+1, r24	; 0x01
     b3e:	08 c1       	rjmp	.+528    	; 0xd50 <_fpadd_parts+0x286>
     b40:	92 30       	cpi	r25, 0x02	; 2
     b42:	09 f4       	brne	.+2      	; 0xb46 <_fpadd_parts+0x7c>
     b44:	07 c1       	rjmp	.+526    	; 0xd54 <_fpadd_parts+0x28a>
     b46:	12 96       	adiw	r26, 0x02	; 2
     b48:	2d 90       	ld	r2, X+
     b4a:	3c 90       	ld	r3, X
     b4c:	13 97       	sbiw	r26, 0x03	; 3
     b4e:	eb 01       	movw	r28, r22
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	9b 81       	ldd	r25, Y+3	; 0x03
     b54:	14 96       	adiw	r26, 0x04	; 4
     b56:	ad 90       	ld	r10, X+
     b58:	bd 90       	ld	r11, X+
     b5a:	cd 90       	ld	r12, X+
     b5c:	dc 90       	ld	r13, X
     b5e:	17 97       	sbiw	r26, 0x07	; 7
     b60:	ec 80       	ldd	r14, Y+4	; 0x04
     b62:	fd 80       	ldd	r15, Y+5	; 0x05
     b64:	0e 81       	ldd	r16, Y+6	; 0x06
     b66:	1f 81       	ldd	r17, Y+7	; 0x07
     b68:	91 01       	movw	r18, r2
     b6a:	28 1b       	sub	r18, r24
     b6c:	39 0b       	sbc	r19, r25
     b6e:	b9 01       	movw	r22, r18
     b70:	37 ff       	sbrs	r19, 7
     b72:	04 c0       	rjmp	.+8      	; 0xb7c <_fpadd_parts+0xb2>
     b74:	66 27       	eor	r22, r22
     b76:	77 27       	eor	r23, r23
     b78:	62 1b       	sub	r22, r18
     b7a:	73 0b       	sbc	r23, r19
     b7c:	60 32       	cpi	r22, 0x20	; 32
     b7e:	71 05       	cpc	r23, r1
     b80:	0c f0       	brlt	.+2      	; 0xb84 <_fpadd_parts+0xba>
     b82:	61 c0       	rjmp	.+194    	; 0xc46 <_fpadd_parts+0x17c>
     b84:	12 16       	cp	r1, r18
     b86:	13 06       	cpc	r1, r19
     b88:	6c f5       	brge	.+90     	; 0xbe4 <_fpadd_parts+0x11a>
     b8a:	37 01       	movw	r6, r14
     b8c:	48 01       	movw	r8, r16
     b8e:	06 2e       	mov	r0, r22
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <_fpadd_parts+0xd0>
     b92:	96 94       	lsr	r9
     b94:	87 94       	ror	r8
     b96:	77 94       	ror	r7
     b98:	67 94       	ror	r6
     b9a:	0a 94       	dec	r0
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <_fpadd_parts+0xc8>
     b9e:	21 e0       	ldi	r18, 0x01	; 1
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <_fpadd_parts+0xe6>
     ba8:	22 0f       	add	r18, r18
     baa:	33 1f       	adc	r19, r19
     bac:	44 1f       	adc	r20, r20
     bae:	55 1f       	adc	r21, r21
     bb0:	6a 95       	dec	r22
     bb2:	d2 f7       	brpl	.-12     	; 0xba8 <_fpadd_parts+0xde>
     bb4:	21 50       	subi	r18, 0x01	; 1
     bb6:	30 40       	sbci	r19, 0x00	; 0
     bb8:	40 40       	sbci	r20, 0x00	; 0
     bba:	50 40       	sbci	r21, 0x00	; 0
     bbc:	2e 21       	and	r18, r14
     bbe:	3f 21       	and	r19, r15
     bc0:	40 23       	and	r20, r16
     bc2:	51 23       	and	r21, r17
     bc4:	21 15       	cp	r18, r1
     bc6:	31 05       	cpc	r19, r1
     bc8:	41 05       	cpc	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	21 f0       	breq	.+8      	; 0xbd6 <_fpadd_parts+0x10c>
     bce:	21 e0       	ldi	r18, 0x01	; 1
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	79 01       	movw	r14, r18
     bd8:	8a 01       	movw	r16, r20
     bda:	e6 28       	or	r14, r6
     bdc:	f7 28       	or	r15, r7
     bde:	08 29       	or	r16, r8
     be0:	19 29       	or	r17, r9
     be2:	3c c0       	rjmp	.+120    	; 0xc5c <_fpadd_parts+0x192>
     be4:	23 2b       	or	r18, r19
     be6:	d1 f1       	breq	.+116    	; 0xc5c <_fpadd_parts+0x192>
     be8:	26 0e       	add	r2, r22
     bea:	37 1e       	adc	r3, r23
     bec:	35 01       	movw	r6, r10
     bee:	46 01       	movw	r8, r12
     bf0:	06 2e       	mov	r0, r22
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <_fpadd_parts+0x132>
     bf4:	96 94       	lsr	r9
     bf6:	87 94       	ror	r8
     bf8:	77 94       	ror	r7
     bfa:	67 94       	ror	r6
     bfc:	0a 94       	dec	r0
     bfe:	d2 f7       	brpl	.-12     	; 0xbf4 <_fpadd_parts+0x12a>
     c00:	21 e0       	ldi	r18, 0x01	; 1
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <_fpadd_parts+0x148>
     c0a:	22 0f       	add	r18, r18
     c0c:	33 1f       	adc	r19, r19
     c0e:	44 1f       	adc	r20, r20
     c10:	55 1f       	adc	r21, r21
     c12:	6a 95       	dec	r22
     c14:	d2 f7       	brpl	.-12     	; 0xc0a <_fpadd_parts+0x140>
     c16:	21 50       	subi	r18, 0x01	; 1
     c18:	30 40       	sbci	r19, 0x00	; 0
     c1a:	40 40       	sbci	r20, 0x00	; 0
     c1c:	50 40       	sbci	r21, 0x00	; 0
     c1e:	2a 21       	and	r18, r10
     c20:	3b 21       	and	r19, r11
     c22:	4c 21       	and	r20, r12
     c24:	5d 21       	and	r21, r13
     c26:	21 15       	cp	r18, r1
     c28:	31 05       	cpc	r19, r1
     c2a:	41 05       	cpc	r20, r1
     c2c:	51 05       	cpc	r21, r1
     c2e:	21 f0       	breq	.+8      	; 0xc38 <_fpadd_parts+0x16e>
     c30:	21 e0       	ldi	r18, 0x01	; 1
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	59 01       	movw	r10, r18
     c3a:	6a 01       	movw	r12, r20
     c3c:	a6 28       	or	r10, r6
     c3e:	b7 28       	or	r11, r7
     c40:	c8 28       	or	r12, r8
     c42:	d9 28       	or	r13, r9
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <_fpadd_parts+0x192>
     c46:	82 15       	cp	r24, r2
     c48:	93 05       	cpc	r25, r3
     c4a:	2c f0       	brlt	.+10     	; 0xc56 <_fpadd_parts+0x18c>
     c4c:	1c 01       	movw	r2, r24
     c4e:	aa 24       	eor	r10, r10
     c50:	bb 24       	eor	r11, r11
     c52:	65 01       	movw	r12, r10
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <_fpadd_parts+0x192>
     c56:	ee 24       	eor	r14, r14
     c58:	ff 24       	eor	r15, r15
     c5a:	87 01       	movw	r16, r14
     c5c:	11 96       	adiw	r26, 0x01	; 1
     c5e:	9c 91       	ld	r25, X
     c60:	d2 01       	movw	r26, r4
     c62:	11 96       	adiw	r26, 0x01	; 1
     c64:	8c 91       	ld	r24, X
     c66:	98 17       	cp	r25, r24
     c68:	09 f4       	brne	.+2      	; 0xc6c <_fpadd_parts+0x1a2>
     c6a:	45 c0       	rjmp	.+138    	; 0xcf6 <_fpadd_parts+0x22c>
     c6c:	99 23       	and	r25, r25
     c6e:	39 f0       	breq	.+14     	; 0xc7e <_fpadd_parts+0x1b4>
     c70:	a8 01       	movw	r20, r16
     c72:	97 01       	movw	r18, r14
     c74:	2a 19       	sub	r18, r10
     c76:	3b 09       	sbc	r19, r11
     c78:	4c 09       	sbc	r20, r12
     c7a:	5d 09       	sbc	r21, r13
     c7c:	06 c0       	rjmp	.+12     	; 0xc8a <_fpadd_parts+0x1c0>
     c7e:	a6 01       	movw	r20, r12
     c80:	95 01       	movw	r18, r10
     c82:	2e 19       	sub	r18, r14
     c84:	3f 09       	sbc	r19, r15
     c86:	40 0b       	sbc	r20, r16
     c88:	51 0b       	sbc	r21, r17
     c8a:	57 fd       	sbrc	r21, 7
     c8c:	08 c0       	rjmp	.+16     	; 0xc9e <_fpadd_parts+0x1d4>
     c8e:	11 82       	std	Z+1, r1	; 0x01
     c90:	33 82       	std	Z+3, r3	; 0x03
     c92:	22 82       	std	Z+2, r2	; 0x02
     c94:	24 83       	std	Z+4, r18	; 0x04
     c96:	35 83       	std	Z+5, r19	; 0x05
     c98:	46 83       	std	Z+6, r20	; 0x06
     c9a:	57 83       	std	Z+7, r21	; 0x07
     c9c:	1d c0       	rjmp	.+58     	; 0xcd8 <_fpadd_parts+0x20e>
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	81 83       	std	Z+1, r24	; 0x01
     ca2:	33 82       	std	Z+3, r3	; 0x03
     ca4:	22 82       	std	Z+2, r2	; 0x02
     ca6:	88 27       	eor	r24, r24
     ca8:	99 27       	eor	r25, r25
     caa:	dc 01       	movw	r26, r24
     cac:	82 1b       	sub	r24, r18
     cae:	93 0b       	sbc	r25, r19
     cb0:	a4 0b       	sbc	r26, r20
     cb2:	b5 0b       	sbc	r27, r21
     cb4:	84 83       	std	Z+4, r24	; 0x04
     cb6:	95 83       	std	Z+5, r25	; 0x05
     cb8:	a6 83       	std	Z+6, r26	; 0x06
     cba:	b7 83       	std	Z+7, r27	; 0x07
     cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <_fpadd_parts+0x20e>
     cbe:	22 0f       	add	r18, r18
     cc0:	33 1f       	adc	r19, r19
     cc2:	44 1f       	adc	r20, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	24 83       	std	Z+4, r18	; 0x04
     cc8:	35 83       	std	Z+5, r19	; 0x05
     cca:	46 83       	std	Z+6, r20	; 0x06
     ccc:	57 83       	std	Z+7, r21	; 0x07
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	93 83       	std	Z+3, r25	; 0x03
     cd6:	82 83       	std	Z+2, r24	; 0x02
     cd8:	24 81       	ldd	r18, Z+4	; 0x04
     cda:	35 81       	ldd	r19, Z+5	; 0x05
     cdc:	46 81       	ldd	r20, Z+6	; 0x06
     cde:	57 81       	ldd	r21, Z+7	; 0x07
     ce0:	da 01       	movw	r26, r20
     ce2:	c9 01       	movw	r24, r18
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	a1 09       	sbc	r26, r1
     ce8:	b1 09       	sbc	r27, r1
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	af 4f       	sbci	r26, 0xFF	; 255
     cf0:	bf 43       	sbci	r27, 0x3F	; 63
     cf2:	28 f3       	brcs	.-54     	; 0xcbe <_fpadd_parts+0x1f4>
     cf4:	0b c0       	rjmp	.+22     	; 0xd0c <_fpadd_parts+0x242>
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	33 82       	std	Z+3, r3	; 0x03
     cfa:	22 82       	std	Z+2, r2	; 0x02
     cfc:	ea 0c       	add	r14, r10
     cfe:	fb 1c       	adc	r15, r11
     d00:	0c 1d       	adc	r16, r12
     d02:	1d 1d       	adc	r17, r13
     d04:	e4 82       	std	Z+4, r14	; 0x04
     d06:	f5 82       	std	Z+5, r15	; 0x05
     d08:	06 83       	std	Z+6, r16	; 0x06
     d0a:	17 83       	std	Z+7, r17	; 0x07
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	80 83       	st	Z, r24
     d10:	24 81       	ldd	r18, Z+4	; 0x04
     d12:	35 81       	ldd	r19, Z+5	; 0x05
     d14:	46 81       	ldd	r20, Z+6	; 0x06
     d16:	57 81       	ldd	r21, Z+7	; 0x07
     d18:	57 ff       	sbrs	r21, 7
     d1a:	1a c0       	rjmp	.+52     	; 0xd50 <_fpadd_parts+0x286>
     d1c:	c9 01       	movw	r24, r18
     d1e:	aa 27       	eor	r26, r26
     d20:	97 fd       	sbrc	r25, 7
     d22:	a0 95       	com	r26
     d24:	ba 2f       	mov	r27, r26
     d26:	81 70       	andi	r24, 0x01	; 1
     d28:	90 70       	andi	r25, 0x00	; 0
     d2a:	a0 70       	andi	r26, 0x00	; 0
     d2c:	b0 70       	andi	r27, 0x00	; 0
     d2e:	56 95       	lsr	r21
     d30:	47 95       	ror	r20
     d32:	37 95       	ror	r19
     d34:	27 95       	ror	r18
     d36:	82 2b       	or	r24, r18
     d38:	93 2b       	or	r25, r19
     d3a:	a4 2b       	or	r26, r20
     d3c:	b5 2b       	or	r27, r21
     d3e:	84 83       	std	Z+4, r24	; 0x04
     d40:	95 83       	std	Z+5, r25	; 0x05
     d42:	a6 83       	std	Z+6, r26	; 0x06
     d44:	b7 83       	std	Z+7, r27	; 0x07
     d46:	82 81       	ldd	r24, Z+2	; 0x02
     d48:	93 81       	ldd	r25, Z+3	; 0x03
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	93 83       	std	Z+3, r25	; 0x03
     d4e:	82 83       	std	Z+2, r24	; 0x02
     d50:	df 01       	movw	r26, r30
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <_fpadd_parts+0x28c>
     d54:	d2 01       	movw	r26, r4
     d56:	cd 01       	movw	r24, r26
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	e2 e1       	ldi	r30, 0x12	; 18
     d5e:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__epilogue_restores__>

00000d62 <__subsf3>:
     d62:	a0 e2       	ldi	r26, 0x20	; 32
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 eb       	ldi	r30, 0xB7	; 183
     d68:	f6 e0       	ldi	r31, 0x06	; 6
     d6a:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__prologue_saves__+0x18>
     d6e:	69 83       	std	Y+1, r22	; 0x01
     d70:	7a 83       	std	Y+2, r23	; 0x02
     d72:	8b 83       	std	Y+3, r24	; 0x03
     d74:	9c 83       	std	Y+4, r25	; 0x04
     d76:	2d 83       	std	Y+5, r18	; 0x05
     d78:	3e 83       	std	Y+6, r19	; 0x06
     d7a:	4f 83       	std	Y+7, r20	; 0x07
     d7c:	58 87       	std	Y+8, r21	; 0x08
     d7e:	e9 e0       	ldi	r30, 0x09	; 9
     d80:	ee 2e       	mov	r14, r30
     d82:	f1 2c       	mov	r15, r1
     d84:	ec 0e       	add	r14, r28
     d86:	fd 1e       	adc	r15, r29
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	b7 01       	movw	r22, r14
     d8e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__unpack_f>
     d92:	8e 01       	movw	r16, r28
     d94:	0f 5e       	subi	r16, 0xEF	; 239
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	ce 01       	movw	r24, r28
     d9a:	05 96       	adiw	r24, 0x05	; 5
     d9c:	b8 01       	movw	r22, r16
     d9e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__unpack_f>
     da2:	8a 89       	ldd	r24, Y+18	; 0x12
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	89 27       	eor	r24, r25
     da8:	8a 8b       	std	Y+18, r24	; 0x12
     daa:	c7 01       	movw	r24, r14
     dac:	b8 01       	movw	r22, r16
     dae:	ae 01       	movw	r20, r28
     db0:	47 5e       	subi	r20, 0xE7	; 231
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	0e 94 65 05 	call	0xaca	; 0xaca <_fpadd_parts>
     db8:	0e 94 b6 09 	call	0x136c	; 0x136c <__pack_f>
     dbc:	a0 96       	adiw	r28, 0x20	; 32
     dbe:	e6 e0       	ldi	r30, 0x06	; 6
     dc0:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__epilogue_restores__+0x18>

00000dc4 <__addsf3>:
     dc4:	a0 e2       	ldi	r26, 0x20	; 32
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e8 ee       	ldi	r30, 0xE8	; 232
     dca:	f6 e0       	ldi	r31, 0x06	; 6
     dcc:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__prologue_saves__+0x18>
     dd0:	69 83       	std	Y+1, r22	; 0x01
     dd2:	7a 83       	std	Y+2, r23	; 0x02
     dd4:	8b 83       	std	Y+3, r24	; 0x03
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	2d 83       	std	Y+5, r18	; 0x05
     dda:	3e 83       	std	Y+6, r19	; 0x06
     ddc:	4f 83       	std	Y+7, r20	; 0x07
     dde:	58 87       	std	Y+8, r21	; 0x08
     de0:	f9 e0       	ldi	r31, 0x09	; 9
     de2:	ef 2e       	mov	r14, r31
     de4:	f1 2c       	mov	r15, r1
     de6:	ec 0e       	add	r14, r28
     de8:	fd 1e       	adc	r15, r29
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	b7 01       	movw	r22, r14
     df0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__unpack_f>
     df4:	8e 01       	movw	r16, r28
     df6:	0f 5e       	subi	r16, 0xEF	; 239
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	ce 01       	movw	r24, r28
     dfc:	05 96       	adiw	r24, 0x05	; 5
     dfe:	b8 01       	movw	r22, r16
     e00:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__unpack_f>
     e04:	c7 01       	movw	r24, r14
     e06:	b8 01       	movw	r22, r16
     e08:	ae 01       	movw	r20, r28
     e0a:	47 5e       	subi	r20, 0xE7	; 231
     e0c:	5f 4f       	sbci	r21, 0xFF	; 255
     e0e:	0e 94 65 05 	call	0xaca	; 0xaca <_fpadd_parts>
     e12:	0e 94 b6 09 	call	0x136c	; 0x136c <__pack_f>
     e16:	a0 96       	adiw	r28, 0x20	; 32
     e18:	e6 e0       	ldi	r30, 0x06	; 6
     e1a:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__epilogue_restores__+0x18>

00000e1e <__mulsf3>:
     e1e:	a0 e2       	ldi	r26, 0x20	; 32
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e1       	ldi	r30, 0x15	; 21
     e24:	f7 e0       	ldi	r31, 0x07	; 7
     e26:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__prologue_saves__>
     e2a:	69 83       	std	Y+1, r22	; 0x01
     e2c:	7a 83       	std	Y+2, r23	; 0x02
     e2e:	8b 83       	std	Y+3, r24	; 0x03
     e30:	9c 83       	std	Y+4, r25	; 0x04
     e32:	2d 83       	std	Y+5, r18	; 0x05
     e34:	3e 83       	std	Y+6, r19	; 0x06
     e36:	4f 83       	std	Y+7, r20	; 0x07
     e38:	58 87       	std	Y+8, r21	; 0x08
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	be 01       	movw	r22, r28
     e40:	67 5f       	subi	r22, 0xF7	; 247
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__unpack_f>
     e48:	ce 01       	movw	r24, r28
     e4a:	05 96       	adiw	r24, 0x05	; 5
     e4c:	be 01       	movw	r22, r28
     e4e:	6f 5e       	subi	r22, 0xEF	; 239
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__unpack_f>
     e56:	99 85       	ldd	r25, Y+9	; 0x09
     e58:	92 30       	cpi	r25, 0x02	; 2
     e5a:	88 f0       	brcs	.+34     	; 0xe7e <__mulsf3+0x60>
     e5c:	89 89       	ldd	r24, Y+17	; 0x11
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	c8 f0       	brcs	.+50     	; 0xe94 <__mulsf3+0x76>
     e62:	94 30       	cpi	r25, 0x04	; 4
     e64:	19 f4       	brne	.+6      	; 0xe6c <__mulsf3+0x4e>
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	51 f4       	brne	.+20     	; 0xe7e <__mulsf3+0x60>
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <__mulsf3+0x56>
     e6c:	84 30       	cpi	r24, 0x04	; 4
     e6e:	29 f4       	brne	.+10     	; 0xe7a <__mulsf3+0x5c>
     e70:	92 30       	cpi	r25, 0x02	; 2
     e72:	81 f4       	brne	.+32     	; 0xe94 <__mulsf3+0x76>
     e74:	80 e4       	ldi	r24, 0x40	; 64
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	c6 c0       	rjmp	.+396    	; 0x1006 <__mulsf3+0x1e8>
     e7a:	92 30       	cpi	r25, 0x02	; 2
     e7c:	49 f4       	brne	.+18     	; 0xe90 <__mulsf3+0x72>
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	9a 85       	ldd	r25, Y+10	; 0x0a
     e82:	8a 89       	ldd	r24, Y+18	; 0x12
     e84:	98 13       	cpse	r25, r24
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	2a 87       	std	Y+10, r18	; 0x0a
     e8a:	ce 01       	movw	r24, r28
     e8c:	09 96       	adiw	r24, 0x09	; 9
     e8e:	bb c0       	rjmp	.+374    	; 0x1006 <__mulsf3+0x1e8>
     e90:	82 30       	cpi	r24, 0x02	; 2
     e92:	49 f4       	brne	.+18     	; 0xea6 <__mulsf3+0x88>
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	8a 89       	ldd	r24, Y+18	; 0x12
     e9a:	98 13       	cpse	r25, r24
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	2a 8b       	std	Y+18, r18	; 0x12
     ea0:	ce 01       	movw	r24, r28
     ea2:	41 96       	adiw	r24, 0x11	; 17
     ea4:	b0 c0       	rjmp	.+352    	; 0x1006 <__mulsf3+0x1e8>
     ea6:	2d 84       	ldd	r2, Y+13	; 0x0d
     ea8:	3e 84       	ldd	r3, Y+14	; 0x0e
     eaa:	4f 84       	ldd	r4, Y+15	; 0x0f
     eac:	58 88       	ldd	r5, Y+16	; 0x10
     eae:	6d 88       	ldd	r6, Y+21	; 0x15
     eb0:	7e 88       	ldd	r7, Y+22	; 0x16
     eb2:	8f 88       	ldd	r8, Y+23	; 0x17
     eb4:	98 8c       	ldd	r9, Y+24	; 0x18
     eb6:	ee 24       	eor	r14, r14
     eb8:	ff 24       	eor	r15, r15
     eba:	87 01       	movw	r16, r14
     ebc:	aa 24       	eor	r10, r10
     ebe:	bb 24       	eor	r11, r11
     ec0:	65 01       	movw	r12, r10
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	e0 e0       	ldi	r30, 0x00	; 0
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	c1 01       	movw	r24, r2
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	90 70       	andi	r25, 0x00	; 0
     ed4:	89 2b       	or	r24, r25
     ed6:	e9 f0       	breq	.+58     	; 0xf12 <__mulsf3+0xf4>
     ed8:	e6 0c       	add	r14, r6
     eda:	f7 1c       	adc	r15, r7
     edc:	08 1d       	adc	r16, r8
     ede:	19 1d       	adc	r17, r9
     ee0:	9a 01       	movw	r18, r20
     ee2:	ab 01       	movw	r20, r22
     ee4:	2a 0d       	add	r18, r10
     ee6:	3b 1d       	adc	r19, r11
     ee8:	4c 1d       	adc	r20, r12
     eea:	5d 1d       	adc	r21, r13
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	a0 e0       	ldi	r26, 0x00	; 0
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e6 14       	cp	r14, r6
     ef6:	f7 04       	cpc	r15, r7
     ef8:	08 05       	cpc	r16, r8
     efa:	19 05       	cpc	r17, r9
     efc:	20 f4       	brcc	.+8      	; 0xf06 <__mulsf3+0xe8>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	a0 e0       	ldi	r26, 0x00	; 0
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ba 01       	movw	r22, r20
     f08:	a9 01       	movw	r20, r18
     f0a:	48 0f       	add	r20, r24
     f0c:	59 1f       	adc	r21, r25
     f0e:	6a 1f       	adc	r22, r26
     f10:	7b 1f       	adc	r23, r27
     f12:	aa 0c       	add	r10, r10
     f14:	bb 1c       	adc	r11, r11
     f16:	cc 1c       	adc	r12, r12
     f18:	dd 1c       	adc	r13, r13
     f1a:	97 fe       	sbrs	r9, 7
     f1c:	08 c0       	rjmp	.+16     	; 0xf2e <__mulsf3+0x110>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a0 e0       	ldi	r26, 0x00	; 0
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	a8 2a       	or	r10, r24
     f28:	b9 2a       	or	r11, r25
     f2a:	ca 2a       	or	r12, r26
     f2c:	db 2a       	or	r13, r27
     f2e:	31 96       	adiw	r30, 0x01	; 1
     f30:	e0 32       	cpi	r30, 0x20	; 32
     f32:	f1 05       	cpc	r31, r1
     f34:	49 f0       	breq	.+18     	; 0xf48 <__mulsf3+0x12a>
     f36:	66 0c       	add	r6, r6
     f38:	77 1c       	adc	r7, r7
     f3a:	88 1c       	adc	r8, r8
     f3c:	99 1c       	adc	r9, r9
     f3e:	56 94       	lsr	r5
     f40:	47 94       	ror	r4
     f42:	37 94       	ror	r3
     f44:	27 94       	ror	r2
     f46:	c3 cf       	rjmp	.-122    	; 0xece <__mulsf3+0xb0>
     f48:	fa 85       	ldd	r31, Y+10	; 0x0a
     f4a:	ea 89       	ldd	r30, Y+18	; 0x12
     f4c:	2b 89       	ldd	r18, Y+19	; 0x13
     f4e:	3c 89       	ldd	r19, Y+20	; 0x14
     f50:	8b 85       	ldd	r24, Y+11	; 0x0b
     f52:	9c 85       	ldd	r25, Y+12	; 0x0c
     f54:	28 0f       	add	r18, r24
     f56:	39 1f       	adc	r19, r25
     f58:	2e 5f       	subi	r18, 0xFE	; 254
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	17 c0       	rjmp	.+46     	; 0xf8c <__mulsf3+0x16e>
     f5e:	ca 01       	movw	r24, r20
     f60:	81 70       	andi	r24, 0x01	; 1
     f62:	90 70       	andi	r25, 0x00	; 0
     f64:	89 2b       	or	r24, r25
     f66:	61 f0       	breq	.+24     	; 0xf80 <__mulsf3+0x162>
     f68:	16 95       	lsr	r17
     f6a:	07 95       	ror	r16
     f6c:	f7 94       	ror	r15
     f6e:	e7 94       	ror	r14
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e8       	ldi	r27, 0x80	; 128
     f78:	e8 2a       	or	r14, r24
     f7a:	f9 2a       	or	r15, r25
     f7c:	0a 2b       	or	r16, r26
     f7e:	1b 2b       	or	r17, r27
     f80:	76 95       	lsr	r23
     f82:	67 95       	ror	r22
     f84:	57 95       	ror	r21
     f86:	47 95       	ror	r20
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	77 fd       	sbrc	r23, 7
     f8e:	e7 cf       	rjmp	.-50     	; 0xf5e <__mulsf3+0x140>
     f90:	0c c0       	rjmp	.+24     	; 0xfaa <__mulsf3+0x18c>
     f92:	44 0f       	add	r20, r20
     f94:	55 1f       	adc	r21, r21
     f96:	66 1f       	adc	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	17 fd       	sbrc	r17, 7
     f9c:	41 60       	ori	r20, 0x01	; 1
     f9e:	ee 0c       	add	r14, r14
     fa0:	ff 1c       	adc	r15, r15
     fa2:	00 1f       	adc	r16, r16
     fa4:	11 1f       	adc	r17, r17
     fa6:	21 50       	subi	r18, 0x01	; 1
     fa8:	30 40       	sbci	r19, 0x00	; 0
     faa:	40 30       	cpi	r20, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	59 07       	cpc	r21, r25
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	69 07       	cpc	r22, r25
     fb4:	90 e4       	ldi	r25, 0x40	; 64
     fb6:	79 07       	cpc	r23, r25
     fb8:	60 f3       	brcs	.-40     	; 0xf92 <__mulsf3+0x174>
     fba:	2b 8f       	std	Y+27, r18	; 0x1b
     fbc:	3c 8f       	std	Y+28, r19	; 0x1c
     fbe:	db 01       	movw	r26, r22
     fc0:	ca 01       	movw	r24, r20
     fc2:	8f 77       	andi	r24, 0x7F	; 127
     fc4:	90 70       	andi	r25, 0x00	; 0
     fc6:	a0 70       	andi	r26, 0x00	; 0
     fc8:	b0 70       	andi	r27, 0x00	; 0
     fca:	80 34       	cpi	r24, 0x40	; 64
     fcc:	91 05       	cpc	r25, r1
     fce:	a1 05       	cpc	r26, r1
     fd0:	b1 05       	cpc	r27, r1
     fd2:	61 f4       	brne	.+24     	; 0xfec <__mulsf3+0x1ce>
     fd4:	47 fd       	sbrc	r20, 7
     fd6:	0a c0       	rjmp	.+20     	; 0xfec <__mulsf3+0x1ce>
     fd8:	e1 14       	cp	r14, r1
     fda:	f1 04       	cpc	r15, r1
     fdc:	01 05       	cpc	r16, r1
     fde:	11 05       	cpc	r17, r1
     fe0:	29 f0       	breq	.+10     	; 0xfec <__mulsf3+0x1ce>
     fe2:	40 5c       	subi	r20, 0xC0	; 192
     fe4:	5f 4f       	sbci	r21, 0xFF	; 255
     fe6:	6f 4f       	sbci	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	40 78       	andi	r20, 0x80	; 128
     fec:	1a 8e       	std	Y+26, r1	; 0x1a
     fee:	fe 17       	cp	r31, r30
     ff0:	11 f0       	breq	.+4      	; 0xff6 <__mulsf3+0x1d8>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	8a 8f       	std	Y+26, r24	; 0x1a
     ff6:	4d 8f       	std	Y+29, r20	; 0x1d
     ff8:	5e 8f       	std	Y+30, r21	; 0x1e
     ffa:	6f 8f       	std	Y+31, r22	; 0x1f
     ffc:	78 a3       	std	Y+32, r23	; 0x20
     ffe:	83 e0       	ldi	r24, 0x03	; 3
    1000:	89 8f       	std	Y+25, r24	; 0x19
    1002:	ce 01       	movw	r24, r28
    1004:	49 96       	adiw	r24, 0x19	; 25
    1006:	0e 94 b6 09 	call	0x136c	; 0x136c <__pack_f>
    100a:	a0 96       	adiw	r28, 0x20	; 32
    100c:	e2 e1       	ldi	r30, 0x12	; 18
    100e:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__epilogue_restores__>

00001012 <__divsf3>:
    1012:	a8 e1       	ldi	r26, 0x18	; 24
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ef e0       	ldi	r30, 0x0F	; 15
    1018:	f8 e0       	ldi	r31, 0x08	; 8
    101a:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__prologue_saves__+0x10>
    101e:	69 83       	std	Y+1, r22	; 0x01
    1020:	7a 83       	std	Y+2, r23	; 0x02
    1022:	8b 83       	std	Y+3, r24	; 0x03
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	2d 83       	std	Y+5, r18	; 0x05
    1028:	3e 83       	std	Y+6, r19	; 0x06
    102a:	4f 83       	std	Y+7, r20	; 0x07
    102c:	58 87       	std	Y+8, r21	; 0x08
    102e:	b9 e0       	ldi	r27, 0x09	; 9
    1030:	eb 2e       	mov	r14, r27
    1032:	f1 2c       	mov	r15, r1
    1034:	ec 0e       	add	r14, r28
    1036:	fd 1e       	adc	r15, r29
    1038:	ce 01       	movw	r24, r28
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	b7 01       	movw	r22, r14
    103e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__unpack_f>
    1042:	8e 01       	movw	r16, r28
    1044:	0f 5e       	subi	r16, 0xEF	; 239
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	ce 01       	movw	r24, r28
    104a:	05 96       	adiw	r24, 0x05	; 5
    104c:	b8 01       	movw	r22, r16
    104e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__unpack_f>
    1052:	29 85       	ldd	r18, Y+9	; 0x09
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	08 f4       	brcc	.+2      	; 0x105a <__divsf3+0x48>
    1058:	7e c0       	rjmp	.+252    	; 0x1156 <__stack+0x57>
    105a:	39 89       	ldd	r19, Y+17	; 0x11
    105c:	32 30       	cpi	r19, 0x02	; 2
    105e:	10 f4       	brcc	.+4      	; 0x1064 <__divsf3+0x52>
    1060:	b8 01       	movw	r22, r16
    1062:	7c c0       	rjmp	.+248    	; 0x115c <__stack+0x5d>
    1064:	8a 85       	ldd	r24, Y+10	; 0x0a
    1066:	9a 89       	ldd	r25, Y+18	; 0x12
    1068:	89 27       	eor	r24, r25
    106a:	8a 87       	std	Y+10, r24	; 0x0a
    106c:	24 30       	cpi	r18, 0x04	; 4
    106e:	11 f0       	breq	.+4      	; 0x1074 <__divsf3+0x62>
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 f4       	brne	.+12     	; 0x1080 <__divsf3+0x6e>
    1074:	23 17       	cp	r18, r19
    1076:	09 f0       	breq	.+2      	; 0x107a <__divsf3+0x68>
    1078:	6e c0       	rjmp	.+220    	; 0x1156 <__stack+0x57>
    107a:	60 e4       	ldi	r22, 0x40	; 64
    107c:	71 e0       	ldi	r23, 0x01	; 1
    107e:	6e c0       	rjmp	.+220    	; 0x115c <__stack+0x5d>
    1080:	34 30       	cpi	r19, 0x04	; 4
    1082:	39 f4       	brne	.+14     	; 0x1092 <__divsf3+0x80>
    1084:	1d 86       	std	Y+13, r1	; 0x0d
    1086:	1e 86       	std	Y+14, r1	; 0x0e
    1088:	1f 86       	std	Y+15, r1	; 0x0f
    108a:	18 8a       	std	Y+16, r1	; 0x10
    108c:	1c 86       	std	Y+12, r1	; 0x0c
    108e:	1b 86       	std	Y+11, r1	; 0x0b
    1090:	04 c0       	rjmp	.+8      	; 0x109a <__divsf3+0x88>
    1092:	32 30       	cpi	r19, 0x02	; 2
    1094:	21 f4       	brne	.+8      	; 0x109e <__divsf3+0x8c>
    1096:	84 e0       	ldi	r24, 0x04	; 4
    1098:	89 87       	std	Y+9, r24	; 0x09
    109a:	b7 01       	movw	r22, r14
    109c:	5f c0       	rjmp	.+190    	; 0x115c <__stack+0x5d>
    109e:	2b 85       	ldd	r18, Y+11	; 0x0b
    10a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    10a2:	8b 89       	ldd	r24, Y+19	; 0x13
    10a4:	9c 89       	ldd	r25, Y+20	; 0x14
    10a6:	28 1b       	sub	r18, r24
    10a8:	39 0b       	sbc	r19, r25
    10aa:	3c 87       	std	Y+12, r19	; 0x0c
    10ac:	2b 87       	std	Y+11, r18	; 0x0b
    10ae:	ed 84       	ldd	r14, Y+13	; 0x0d
    10b0:	fe 84       	ldd	r15, Y+14	; 0x0e
    10b2:	0f 85       	ldd	r16, Y+15	; 0x0f
    10b4:	18 89       	ldd	r17, Y+16	; 0x10
    10b6:	ad 88       	ldd	r10, Y+21	; 0x15
    10b8:	be 88       	ldd	r11, Y+22	; 0x16
    10ba:	cf 88       	ldd	r12, Y+23	; 0x17
    10bc:	d8 8c       	ldd	r13, Y+24	; 0x18
    10be:	ea 14       	cp	r14, r10
    10c0:	fb 04       	cpc	r15, r11
    10c2:	0c 05       	cpc	r16, r12
    10c4:	1d 05       	cpc	r17, r13
    10c6:	40 f4       	brcc	.+16     	; 0x10d8 <__divsf3+0xc6>
    10c8:	ee 0c       	add	r14, r14
    10ca:	ff 1c       	adc	r15, r15
    10cc:	00 1f       	adc	r16, r16
    10ce:	11 1f       	adc	r17, r17
    10d0:	21 50       	subi	r18, 0x01	; 1
    10d2:	30 40       	sbci	r19, 0x00	; 0
    10d4:	3c 87       	std	Y+12, r19	; 0x0c
    10d6:	2b 87       	std	Y+11, r18	; 0x0b
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a0 e0       	ldi	r26, 0x00	; 0
    10e6:	b0 e4       	ldi	r27, 0x40	; 64
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	ea 14       	cp	r14, r10
    10ee:	fb 04       	cpc	r15, r11
    10f0:	0c 05       	cpc	r16, r12
    10f2:	1d 05       	cpc	r17, r13
    10f4:	40 f0       	brcs	.+16     	; 0x1106 <__stack+0x7>
    10f6:	28 2b       	or	r18, r24
    10f8:	39 2b       	or	r19, r25
    10fa:	4a 2b       	or	r20, r26
    10fc:	5b 2b       	or	r21, r27
    10fe:	ea 18       	sub	r14, r10
    1100:	fb 08       	sbc	r15, r11
    1102:	0c 09       	sbc	r16, r12
    1104:	1d 09       	sbc	r17, r13
    1106:	b6 95       	lsr	r27
    1108:	a7 95       	ror	r26
    110a:	97 95       	ror	r25
    110c:	87 95       	ror	r24
    110e:	ee 0c       	add	r14, r14
    1110:	ff 1c       	adc	r15, r15
    1112:	00 1f       	adc	r16, r16
    1114:	11 1f       	adc	r17, r17
    1116:	6f 5f       	subi	r22, 0xFF	; 255
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	6f 31       	cpi	r22, 0x1F	; 31
    111c:	71 05       	cpc	r23, r1
    111e:	31 f7       	brne	.-52     	; 0x10ec <__divsf3+0xda>
    1120:	da 01       	movw	r26, r20
    1122:	c9 01       	movw	r24, r18
    1124:	8f 77       	andi	r24, 0x7F	; 127
    1126:	90 70       	andi	r25, 0x00	; 0
    1128:	a0 70       	andi	r26, 0x00	; 0
    112a:	b0 70       	andi	r27, 0x00	; 0
    112c:	80 34       	cpi	r24, 0x40	; 64
    112e:	91 05       	cpc	r25, r1
    1130:	a1 05       	cpc	r26, r1
    1132:	b1 05       	cpc	r27, r1
    1134:	61 f4       	brne	.+24     	; 0x114e <__stack+0x4f>
    1136:	27 fd       	sbrc	r18, 7
    1138:	0a c0       	rjmp	.+20     	; 0x114e <__stack+0x4f>
    113a:	e1 14       	cp	r14, r1
    113c:	f1 04       	cpc	r15, r1
    113e:	01 05       	cpc	r16, r1
    1140:	11 05       	cpc	r17, r1
    1142:	29 f0       	breq	.+10     	; 0x114e <__stack+0x4f>
    1144:	20 5c       	subi	r18, 0xC0	; 192
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	4f 4f       	sbci	r20, 0xFF	; 255
    114a:	5f 4f       	sbci	r21, 0xFF	; 255
    114c:	20 78       	andi	r18, 0x80	; 128
    114e:	2d 87       	std	Y+13, r18	; 0x0d
    1150:	3e 87       	std	Y+14, r19	; 0x0e
    1152:	4f 87       	std	Y+15, r20	; 0x0f
    1154:	58 8b       	std	Y+16, r21	; 0x10
    1156:	be 01       	movw	r22, r28
    1158:	67 5f       	subi	r22, 0xF7	; 247
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	cb 01       	movw	r24, r22
    115e:	0e 94 b6 09 	call	0x136c	; 0x136c <__pack_f>
    1162:	68 96       	adiw	r28, 0x18	; 24
    1164:	ea e0       	ldi	r30, 0x0A	; 10
    1166:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__epilogue_restores__+0x10>

0000116a <__floatsisf>:
    116a:	a8 e0       	ldi	r26, 0x08	; 8
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb eb       	ldi	r30, 0xBB	; 187
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__prologue_saves__+0x12>
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	83 e0       	ldi	r24, 0x03	; 3
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	da 01       	movw	r26, r20
    1180:	c9 01       	movw	r24, r18
    1182:	88 27       	eor	r24, r24
    1184:	b7 fd       	sbrc	r27, 7
    1186:	83 95       	inc	r24
    1188:	99 27       	eor	r25, r25
    118a:	aa 27       	eor	r26, r26
    118c:	bb 27       	eor	r27, r27
    118e:	b8 2e       	mov	r11, r24
    1190:	21 15       	cp	r18, r1
    1192:	31 05       	cpc	r19, r1
    1194:	41 05       	cpc	r20, r1
    1196:	51 05       	cpc	r21, r1
    1198:	19 f4       	brne	.+6      	; 0x11a0 <__floatsisf+0x36>
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	3a c0       	rjmp	.+116    	; 0x1214 <__floatsisf+0xaa>
    11a0:	88 23       	and	r24, r24
    11a2:	a9 f0       	breq	.+42     	; 0x11ce <__floatsisf+0x64>
    11a4:	20 30       	cpi	r18, 0x00	; 0
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	38 07       	cpc	r19, r24
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	48 07       	cpc	r20, r24
    11ae:	80 e8       	ldi	r24, 0x80	; 128
    11b0:	58 07       	cpc	r21, r24
    11b2:	29 f4       	brne	.+10     	; 0x11be <__floatsisf+0x54>
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	9f ec       	ldi	r25, 0xCF	; 207
    11bc:	30 c0       	rjmp	.+96     	; 0x121e <__floatsisf+0xb4>
    11be:	ee 24       	eor	r14, r14
    11c0:	ff 24       	eor	r15, r15
    11c2:	87 01       	movw	r16, r14
    11c4:	e2 1a       	sub	r14, r18
    11c6:	f3 0a       	sbc	r15, r19
    11c8:	04 0b       	sbc	r16, r20
    11ca:	15 0b       	sbc	r17, r21
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <__floatsisf+0x68>
    11ce:	79 01       	movw	r14, r18
    11d0:	8a 01       	movw	r16, r20
    11d2:	8e e1       	ldi	r24, 0x1E	; 30
    11d4:	c8 2e       	mov	r12, r24
    11d6:	d1 2c       	mov	r13, r1
    11d8:	dc 82       	std	Y+4, r13	; 0x04
    11da:	cb 82       	std	Y+3, r12	; 0x03
    11dc:	ed 82       	std	Y+5, r14	; 0x05
    11de:	fe 82       	std	Y+6, r15	; 0x06
    11e0:	0f 83       	std	Y+7, r16	; 0x07
    11e2:	18 87       	std	Y+8, r17	; 0x08
    11e4:	c8 01       	movw	r24, r16
    11e6:	b7 01       	movw	r22, r14
    11e8:	0e 94 67 09 	call	0x12ce	; 0x12ce <__clzsi2>
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	18 16       	cp	r1, r24
    11f0:	19 06       	cpc	r1, r25
    11f2:	84 f4       	brge	.+32     	; 0x1214 <__floatsisf+0xaa>
    11f4:	08 2e       	mov	r0, r24
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <__floatsisf+0x96>
    11f8:	ee 0c       	add	r14, r14
    11fa:	ff 1c       	adc	r15, r15
    11fc:	00 1f       	adc	r16, r16
    11fe:	11 1f       	adc	r17, r17
    1200:	0a 94       	dec	r0
    1202:	d2 f7       	brpl	.-12     	; 0x11f8 <__floatsisf+0x8e>
    1204:	ed 82       	std	Y+5, r14	; 0x05
    1206:	fe 82       	std	Y+6, r15	; 0x06
    1208:	0f 83       	std	Y+7, r16	; 0x07
    120a:	18 87       	std	Y+8, r17	; 0x08
    120c:	c8 1a       	sub	r12, r24
    120e:	d9 0a       	sbc	r13, r25
    1210:	dc 82       	std	Y+4, r13	; 0x04
    1212:	cb 82       	std	Y+3, r12	; 0x03
    1214:	ba 82       	std	Y+2, r11	; 0x02
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 b6 09 	call	0x136c	; 0x136c <__pack_f>
    121e:	28 96       	adiw	r28, 0x08	; 8
    1220:	e9 e0       	ldi	r30, 0x09	; 9
    1222:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__epilogue_restores__+0x12>

00001226 <__fixsfsi>:
    1226:	ac e0       	ldi	r26, 0x0C	; 12
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e9 e1       	ldi	r30, 0x19	; 25
    122c:	f9 e0       	ldi	r31, 0x09	; 9
    122e:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__prologue_saves__+0x20>
    1232:	69 83       	std	Y+1, r22	; 0x01
    1234:	7a 83       	std	Y+2, r23	; 0x02
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	be 01       	movw	r22, r28
    1240:	6b 5f       	subi	r22, 0xFB	; 251
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__unpack_f>
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	61 f1       	breq	.+88     	; 0x12a6 <__fixsfsi+0x80>
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	50 f1       	brcs	.+84     	; 0x12a6 <__fixsfsi+0x80>
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	21 f4       	brne	.+8      	; 0x125e <__fixsfsi+0x38>
    1256:	8e 81       	ldd	r24, Y+6	; 0x06
    1258:	88 23       	and	r24, r24
    125a:	51 f1       	breq	.+84     	; 0x12b0 <__fixsfsi+0x8a>
    125c:	2e c0       	rjmp	.+92     	; 0x12ba <__fixsfsi+0x94>
    125e:	2f 81       	ldd	r18, Y+7	; 0x07
    1260:	38 85       	ldd	r19, Y+8	; 0x08
    1262:	37 fd       	sbrc	r19, 7
    1264:	20 c0       	rjmp	.+64     	; 0x12a6 <__fixsfsi+0x80>
    1266:	6e 81       	ldd	r22, Y+6	; 0x06
    1268:	2f 31       	cpi	r18, 0x1F	; 31
    126a:	31 05       	cpc	r19, r1
    126c:	1c f0       	brlt	.+6      	; 0x1274 <__fixsfsi+0x4e>
    126e:	66 23       	and	r22, r22
    1270:	f9 f0       	breq	.+62     	; 0x12b0 <__fixsfsi+0x8a>
    1272:	23 c0       	rjmp	.+70     	; 0x12ba <__fixsfsi+0x94>
    1274:	8e e1       	ldi	r24, 0x1E	; 30
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	82 1b       	sub	r24, r18
    127a:	93 0b       	sbc	r25, r19
    127c:	29 85       	ldd	r18, Y+9	; 0x09
    127e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1280:	4b 85       	ldd	r20, Y+11	; 0x0b
    1282:	5c 85       	ldd	r21, Y+12	; 0x0c
    1284:	04 c0       	rjmp	.+8      	; 0x128e <__fixsfsi+0x68>
    1286:	56 95       	lsr	r21
    1288:	47 95       	ror	r20
    128a:	37 95       	ror	r19
    128c:	27 95       	ror	r18
    128e:	8a 95       	dec	r24
    1290:	d2 f7       	brpl	.-12     	; 0x1286 <__fixsfsi+0x60>
    1292:	66 23       	and	r22, r22
    1294:	b1 f0       	breq	.+44     	; 0x12c2 <__fixsfsi+0x9c>
    1296:	50 95       	com	r21
    1298:	40 95       	com	r20
    129a:	30 95       	com	r19
    129c:	21 95       	neg	r18
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	4f 4f       	sbci	r20, 0xFF	; 255
    12a2:	5f 4f       	sbci	r21, 0xFF	; 255
    12a4:	0e c0       	rjmp	.+28     	; 0x12c2 <__fixsfsi+0x9c>
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <__fixsfsi+0x9c>
    12b0:	2f ef       	ldi	r18, 0xFF	; 255
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f ef       	ldi	r20, 0xFF	; 255
    12b6:	5f e7       	ldi	r21, 0x7F	; 127
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <__fixsfsi+0x9c>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	50 e8       	ldi	r21, 0x80	; 128
    12c2:	b9 01       	movw	r22, r18
    12c4:	ca 01       	movw	r24, r20
    12c6:	2c 96       	adiw	r28, 0x0c	; 12
    12c8:	e2 e0       	ldi	r30, 0x02	; 2
    12ca:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__epilogue_restores__+0x20>

000012ce <__clzsi2>:
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	7b 01       	movw	r14, r22
    12d8:	8c 01       	movw	r16, r24
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	e8 16       	cp	r14, r24
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	f8 06       	cpc	r15, r24
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	08 07       	cpc	r16, r24
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	18 07       	cpc	r17, r24
    12ea:	88 f4       	brcc	.+34     	; 0x130e <__clzsi2+0x40>
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	e8 16       	cp	r14, r24
    12f0:	f1 04       	cpc	r15, r1
    12f2:	01 05       	cpc	r16, r1
    12f4:	11 05       	cpc	r17, r1
    12f6:	31 f0       	breq	.+12     	; 0x1304 <__clzsi2+0x36>
    12f8:	28 f0       	brcs	.+10     	; 0x1304 <__clzsi2+0x36>
    12fa:	88 e0       	ldi	r24, 0x08	; 8
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a0 e0       	ldi	r26, 0x00	; 0
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	17 c0       	rjmp	.+46     	; 0x1332 <__clzsi2+0x64>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	12 c0       	rjmp	.+36     	; 0x1332 <__clzsi2+0x64>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	e8 16       	cp	r14, r24
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	f8 06       	cpc	r15, r24
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	08 07       	cpc	r16, r24
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	18 07       	cpc	r17, r24
    131e:	28 f0       	brcs	.+10     	; 0x132a <__clzsi2+0x5c>
    1320:	88 e1       	ldi	r24, 0x18	; 24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a0 e0       	ldi	r26, 0x00	; 0
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <__clzsi2+0x64>
    132a:	80 e1       	ldi	r24, 0x10	; 16
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a0 e0       	ldi	r26, 0x00	; 0
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	20 e2       	ldi	r18, 0x20	; 32
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	28 1b       	sub	r18, r24
    133c:	39 0b       	sbc	r19, r25
    133e:	4a 0b       	sbc	r20, r26
    1340:	5b 0b       	sbc	r21, r27
    1342:	04 c0       	rjmp	.+8      	; 0x134c <__clzsi2+0x7e>
    1344:	16 95       	lsr	r17
    1346:	07 95       	ror	r16
    1348:	f7 94       	ror	r15
    134a:	e7 94       	ror	r14
    134c:	8a 95       	dec	r24
    134e:	d2 f7       	brpl	.-12     	; 0x1344 <__clzsi2+0x76>
    1350:	f7 01       	movw	r30, r14
    1352:	e8 5b       	subi	r30, 0xB8	; 184
    1354:	fe 4f       	sbci	r31, 0xFE	; 254
    1356:	80 81       	ld	r24, Z
    1358:	28 1b       	sub	r18, r24
    135a:	31 09       	sbc	r19, r1
    135c:	41 09       	sbc	r20, r1
    135e:	51 09       	sbc	r21, r1
    1360:	c9 01       	movw	r24, r18
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	08 95       	ret

0000136c <__pack_f>:
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	fc 01       	movw	r30, r24
    1378:	e4 80       	ldd	r14, Z+4	; 0x04
    137a:	f5 80       	ldd	r15, Z+5	; 0x05
    137c:	06 81       	ldd	r16, Z+6	; 0x06
    137e:	17 81       	ldd	r17, Z+7	; 0x07
    1380:	d1 80       	ldd	r13, Z+1	; 0x01
    1382:	80 81       	ld	r24, Z
    1384:	82 30       	cpi	r24, 0x02	; 2
    1386:	48 f4       	brcc	.+18     	; 0x139a <__pack_f+0x2e>
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	a0 e1       	ldi	r26, 0x10	; 16
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e8 2a       	or	r14, r24
    1392:	f9 2a       	or	r15, r25
    1394:	0a 2b       	or	r16, r26
    1396:	1b 2b       	or	r17, r27
    1398:	a5 c0       	rjmp	.+330    	; 0x14e4 <__pack_f+0x178>
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	09 f4       	brne	.+2      	; 0x13a0 <__pack_f+0x34>
    139e:	9f c0       	rjmp	.+318    	; 0x14de <__pack_f+0x172>
    13a0:	82 30       	cpi	r24, 0x02	; 2
    13a2:	21 f4       	brne	.+8      	; 0x13ac <__pack_f+0x40>
    13a4:	ee 24       	eor	r14, r14
    13a6:	ff 24       	eor	r15, r15
    13a8:	87 01       	movw	r16, r14
    13aa:	05 c0       	rjmp	.+10     	; 0x13b6 <__pack_f+0x4a>
    13ac:	e1 14       	cp	r14, r1
    13ae:	f1 04       	cpc	r15, r1
    13b0:	01 05       	cpc	r16, r1
    13b2:	11 05       	cpc	r17, r1
    13b4:	19 f4       	brne	.+6      	; 0x13bc <__pack_f+0x50>
    13b6:	e0 e0       	ldi	r30, 0x00	; 0
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	96 c0       	rjmp	.+300    	; 0x14e8 <__pack_f+0x17c>
    13bc:	62 81       	ldd	r22, Z+2	; 0x02
    13be:	73 81       	ldd	r23, Z+3	; 0x03
    13c0:	9f ef       	ldi	r25, 0xFF	; 255
    13c2:	62 38       	cpi	r22, 0x82	; 130
    13c4:	79 07       	cpc	r23, r25
    13c6:	0c f0       	brlt	.+2      	; 0x13ca <__pack_f+0x5e>
    13c8:	5b c0       	rjmp	.+182    	; 0x1480 <__pack_f+0x114>
    13ca:	22 e8       	ldi	r18, 0x82	; 130
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	26 1b       	sub	r18, r22
    13d0:	37 0b       	sbc	r19, r23
    13d2:	2a 31       	cpi	r18, 0x1A	; 26
    13d4:	31 05       	cpc	r19, r1
    13d6:	2c f0       	brlt	.+10     	; 0x13e2 <__pack_f+0x76>
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	2a c0       	rjmp	.+84     	; 0x1436 <__pack_f+0xca>
    13e2:	b8 01       	movw	r22, r16
    13e4:	a7 01       	movw	r20, r14
    13e6:	02 2e       	mov	r0, r18
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <__pack_f+0x86>
    13ea:	76 95       	lsr	r23
    13ec:	67 95       	ror	r22
    13ee:	57 95       	ror	r21
    13f0:	47 95       	ror	r20
    13f2:	0a 94       	dec	r0
    13f4:	d2 f7       	brpl	.-12     	; 0x13ea <__pack_f+0x7e>
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a0 e0       	ldi	r26, 0x00	; 0
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <__pack_f+0x9c>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	aa 1f       	adc	r26, r26
    1406:	bb 1f       	adc	r27, r27
    1408:	2a 95       	dec	r18
    140a:	d2 f7       	brpl	.-12     	; 0x1400 <__pack_f+0x94>
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	a1 09       	sbc	r26, r1
    1410:	b1 09       	sbc	r27, r1
    1412:	8e 21       	and	r24, r14
    1414:	9f 21       	and	r25, r15
    1416:	a0 23       	and	r26, r16
    1418:	b1 23       	and	r27, r17
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	a1 05       	cpc	r26, r1
    141e:	b1 05       	cpc	r27, r1
    1420:	21 f0       	breq	.+8      	; 0x142a <__pack_f+0xbe>
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	9a 01       	movw	r18, r20
    142c:	ab 01       	movw	r20, r22
    142e:	28 2b       	or	r18, r24
    1430:	39 2b       	or	r19, r25
    1432:	4a 2b       	or	r20, r26
    1434:	5b 2b       	or	r21, r27
    1436:	da 01       	movw	r26, r20
    1438:	c9 01       	movw	r24, r18
    143a:	8f 77       	andi	r24, 0x7F	; 127
    143c:	90 70       	andi	r25, 0x00	; 0
    143e:	a0 70       	andi	r26, 0x00	; 0
    1440:	b0 70       	andi	r27, 0x00	; 0
    1442:	80 34       	cpi	r24, 0x40	; 64
    1444:	91 05       	cpc	r25, r1
    1446:	a1 05       	cpc	r26, r1
    1448:	b1 05       	cpc	r27, r1
    144a:	39 f4       	brne	.+14     	; 0x145a <__pack_f+0xee>
    144c:	27 ff       	sbrs	r18, 7
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <__pack_f+0xf6>
    1450:	20 5c       	subi	r18, 0xC0	; 192
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	4f 4f       	sbci	r20, 0xFF	; 255
    1456:	5f 4f       	sbci	r21, 0xFF	; 255
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <__pack_f+0xf6>
    145a:	21 5c       	subi	r18, 0xC1	; 193
    145c:	3f 4f       	sbci	r19, 0xFF	; 255
    145e:	4f 4f       	sbci	r20, 0xFF	; 255
    1460:	5f 4f       	sbci	r21, 0xFF	; 255
    1462:	e0 e0       	ldi	r30, 0x00	; 0
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	20 30       	cpi	r18, 0x00	; 0
    1468:	a0 e0       	ldi	r26, 0x00	; 0
    146a:	3a 07       	cpc	r19, r26
    146c:	a0 e0       	ldi	r26, 0x00	; 0
    146e:	4a 07       	cpc	r20, r26
    1470:	a0 e4       	ldi	r26, 0x40	; 64
    1472:	5a 07       	cpc	r21, r26
    1474:	10 f0       	brcs	.+4      	; 0x147a <__pack_f+0x10e>
    1476:	e1 e0       	ldi	r30, 0x01	; 1
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	79 01       	movw	r14, r18
    147c:	8a 01       	movw	r16, r20
    147e:	27 c0       	rjmp	.+78     	; 0x14ce <__pack_f+0x162>
    1480:	60 38       	cpi	r22, 0x80	; 128
    1482:	71 05       	cpc	r23, r1
    1484:	64 f5       	brge	.+88     	; 0x14de <__pack_f+0x172>
    1486:	fb 01       	movw	r30, r22
    1488:	e1 58       	subi	r30, 0x81	; 129
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	d8 01       	movw	r26, r16
    148e:	c7 01       	movw	r24, r14
    1490:	8f 77       	andi	r24, 0x7F	; 127
    1492:	90 70       	andi	r25, 0x00	; 0
    1494:	a0 70       	andi	r26, 0x00	; 0
    1496:	b0 70       	andi	r27, 0x00	; 0
    1498:	80 34       	cpi	r24, 0x40	; 64
    149a:	91 05       	cpc	r25, r1
    149c:	a1 05       	cpc	r26, r1
    149e:	b1 05       	cpc	r27, r1
    14a0:	39 f4       	brne	.+14     	; 0x14b0 <__pack_f+0x144>
    14a2:	e7 fe       	sbrs	r14, 7
    14a4:	0d c0       	rjmp	.+26     	; 0x14c0 <__pack_f+0x154>
    14a6:	80 e4       	ldi	r24, 0x40	; 64
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	a0 e0       	ldi	r26, 0x00	; 0
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <__pack_f+0x14c>
    14b0:	8f e3       	ldi	r24, 0x3F	; 63
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e8 0e       	add	r14, r24
    14ba:	f9 1e       	adc	r15, r25
    14bc:	0a 1f       	adc	r16, r26
    14be:	1b 1f       	adc	r17, r27
    14c0:	17 ff       	sbrs	r17, 7
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <__pack_f+0x162>
    14c4:	16 95       	lsr	r17
    14c6:	07 95       	ror	r16
    14c8:	f7 94       	ror	r15
    14ca:	e7 94       	ror	r14
    14cc:	31 96       	adiw	r30, 0x01	; 1
    14ce:	87 e0       	ldi	r24, 0x07	; 7
    14d0:	16 95       	lsr	r17
    14d2:	07 95       	ror	r16
    14d4:	f7 94       	ror	r15
    14d6:	e7 94       	ror	r14
    14d8:	8a 95       	dec	r24
    14da:	d1 f7       	brne	.-12     	; 0x14d0 <__pack_f+0x164>
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <__pack_f+0x17c>
    14de:	ee 24       	eor	r14, r14
    14e0:	ff 24       	eor	r15, r15
    14e2:	87 01       	movw	r16, r14
    14e4:	ef ef       	ldi	r30, 0xFF	; 255
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	6e 2f       	mov	r22, r30
    14ea:	67 95       	ror	r22
    14ec:	66 27       	eor	r22, r22
    14ee:	67 95       	ror	r22
    14f0:	90 2f       	mov	r25, r16
    14f2:	9f 77       	andi	r25, 0x7F	; 127
    14f4:	d7 94       	ror	r13
    14f6:	dd 24       	eor	r13, r13
    14f8:	d7 94       	ror	r13
    14fa:	8e 2f       	mov	r24, r30
    14fc:	86 95       	lsr	r24
    14fe:	49 2f       	mov	r20, r25
    1500:	46 2b       	or	r20, r22
    1502:	58 2f       	mov	r21, r24
    1504:	5d 29       	or	r21, r13
    1506:	b7 01       	movw	r22, r14
    1508:	ca 01       	movw	r24, r20
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	08 95       	ret

00001516 <__unpack_f>:
    1516:	fc 01       	movw	r30, r24
    1518:	db 01       	movw	r26, r22
    151a:	40 81       	ld	r20, Z
    151c:	51 81       	ldd	r21, Z+1	; 0x01
    151e:	22 81       	ldd	r18, Z+2	; 0x02
    1520:	62 2f       	mov	r22, r18
    1522:	6f 77       	andi	r22, 0x7F	; 127
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	22 1f       	adc	r18, r18
    1528:	22 27       	eor	r18, r18
    152a:	22 1f       	adc	r18, r18
    152c:	93 81       	ldd	r25, Z+3	; 0x03
    152e:	89 2f       	mov	r24, r25
    1530:	88 0f       	add	r24, r24
    1532:	82 2b       	or	r24, r18
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	99 1f       	adc	r25, r25
    153a:	99 27       	eor	r25, r25
    153c:	99 1f       	adc	r25, r25
    153e:	11 96       	adiw	r26, 0x01	; 1
    1540:	9c 93       	st	X, r25
    1542:	11 97       	sbiw	r26, 0x01	; 1
    1544:	21 15       	cp	r18, r1
    1546:	31 05       	cpc	r19, r1
    1548:	a9 f5       	brne	.+106    	; 0x15b4 <__unpack_f+0x9e>
    154a:	41 15       	cp	r20, r1
    154c:	51 05       	cpc	r21, r1
    154e:	61 05       	cpc	r22, r1
    1550:	71 05       	cpc	r23, r1
    1552:	11 f4       	brne	.+4      	; 0x1558 <__unpack_f+0x42>
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	37 c0       	rjmp	.+110    	; 0x15c6 <__unpack_f+0xb0>
    1558:	82 e8       	ldi	r24, 0x82	; 130
    155a:	9f ef       	ldi	r25, 0xFF	; 255
    155c:	13 96       	adiw	r26, 0x03	; 3
    155e:	9c 93       	st	X, r25
    1560:	8e 93       	st	-X, r24
    1562:	12 97       	sbiw	r26, 0x02	; 2
    1564:	9a 01       	movw	r18, r20
    1566:	ab 01       	movw	r20, r22
    1568:	67 e0       	ldi	r22, 0x07	; 7
    156a:	22 0f       	add	r18, r18
    156c:	33 1f       	adc	r19, r19
    156e:	44 1f       	adc	r20, r20
    1570:	55 1f       	adc	r21, r21
    1572:	6a 95       	dec	r22
    1574:	d1 f7       	brne	.-12     	; 0x156a <__unpack_f+0x54>
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	8c 93       	st	X, r24
    157a:	0d c0       	rjmp	.+26     	; 0x1596 <__unpack_f+0x80>
    157c:	22 0f       	add	r18, r18
    157e:	33 1f       	adc	r19, r19
    1580:	44 1f       	adc	r20, r20
    1582:	55 1f       	adc	r21, r21
    1584:	12 96       	adiw	r26, 0x02	; 2
    1586:	8d 91       	ld	r24, X+
    1588:	9c 91       	ld	r25, X
    158a:	13 97       	sbiw	r26, 0x03	; 3
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	13 96       	adiw	r26, 0x03	; 3
    1590:	9c 93       	st	X, r25
    1592:	8e 93       	st	-X, r24
    1594:	12 97       	sbiw	r26, 0x02	; 2
    1596:	20 30       	cpi	r18, 0x00	; 0
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	38 07       	cpc	r19, r24
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	48 07       	cpc	r20, r24
    15a0:	80 e4       	ldi	r24, 0x40	; 64
    15a2:	58 07       	cpc	r21, r24
    15a4:	58 f3       	brcs	.-42     	; 0x157c <__unpack_f+0x66>
    15a6:	14 96       	adiw	r26, 0x04	; 4
    15a8:	2d 93       	st	X+, r18
    15aa:	3d 93       	st	X+, r19
    15ac:	4d 93       	st	X+, r20
    15ae:	5c 93       	st	X, r21
    15b0:	17 97       	sbiw	r26, 0x07	; 7
    15b2:	08 95       	ret
    15b4:	2f 3f       	cpi	r18, 0xFF	; 255
    15b6:	31 05       	cpc	r19, r1
    15b8:	79 f4       	brne	.+30     	; 0x15d8 <__unpack_f+0xc2>
    15ba:	41 15       	cp	r20, r1
    15bc:	51 05       	cpc	r21, r1
    15be:	61 05       	cpc	r22, r1
    15c0:	71 05       	cpc	r23, r1
    15c2:	19 f4       	brne	.+6      	; 0x15ca <__unpack_f+0xb4>
    15c4:	84 e0       	ldi	r24, 0x04	; 4
    15c6:	8c 93       	st	X, r24
    15c8:	08 95       	ret
    15ca:	64 ff       	sbrs	r22, 4
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <__unpack_f+0xbe>
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	8c 93       	st	X, r24
    15d2:	12 c0       	rjmp	.+36     	; 0x15f8 <__unpack_f+0xe2>
    15d4:	1c 92       	st	X, r1
    15d6:	10 c0       	rjmp	.+32     	; 0x15f8 <__unpack_f+0xe2>
    15d8:	2f 57       	subi	r18, 0x7F	; 127
    15da:	30 40       	sbci	r19, 0x00	; 0
    15dc:	13 96       	adiw	r26, 0x03	; 3
    15de:	3c 93       	st	X, r19
    15e0:	2e 93       	st	-X, r18
    15e2:	12 97       	sbiw	r26, 0x02	; 2
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	8c 93       	st	X, r24
    15e8:	87 e0       	ldi	r24, 0x07	; 7
    15ea:	44 0f       	add	r20, r20
    15ec:	55 1f       	adc	r21, r21
    15ee:	66 1f       	adc	r22, r22
    15f0:	77 1f       	adc	r23, r23
    15f2:	8a 95       	dec	r24
    15f4:	d1 f7       	brne	.-12     	; 0x15ea <__unpack_f+0xd4>
    15f6:	70 64       	ori	r23, 0x40	; 64
    15f8:	14 96       	adiw	r26, 0x04	; 4
    15fa:	4d 93       	st	X+, r20
    15fc:	5d 93       	st	X+, r21
    15fe:	6d 93       	st	X+, r22
    1600:	7c 93       	st	X, r23
    1602:	17 97       	sbiw	r26, 0x07	; 7
    1604:	08 95       	ret

00001606 <__udivmodhi4>:
    1606:	aa 1b       	sub	r26, r26
    1608:	bb 1b       	sub	r27, r27
    160a:	51 e1       	ldi	r21, 0x11	; 17
    160c:	07 c0       	rjmp	.+14     	; 0x161c <__udivmodhi4_ep>

0000160e <__udivmodhi4_loop>:
    160e:	aa 1f       	adc	r26, r26
    1610:	bb 1f       	adc	r27, r27
    1612:	a6 17       	cp	r26, r22
    1614:	b7 07       	cpc	r27, r23
    1616:	10 f0       	brcs	.+4      	; 0x161c <__udivmodhi4_ep>
    1618:	a6 1b       	sub	r26, r22
    161a:	b7 0b       	sbc	r27, r23

0000161c <__udivmodhi4_ep>:
    161c:	88 1f       	adc	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	5a 95       	dec	r21
    1622:	a9 f7       	brne	.-22     	; 0x160e <__udivmodhi4_loop>
    1624:	80 95       	com	r24
    1626:	90 95       	com	r25
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	08 95       	ret

0000162e <__divmodhi4>:
    162e:	97 fb       	bst	r25, 7
    1630:	09 2e       	mov	r0, r25
    1632:	07 26       	eor	r0, r23
    1634:	0a d0       	rcall	.+20     	; 0x164a <__divmodhi4_neg1>
    1636:	77 fd       	sbrc	r23, 7
    1638:	04 d0       	rcall	.+8      	; 0x1642 <__divmodhi4_neg2>
    163a:	e5 df       	rcall	.-54     	; 0x1606 <__udivmodhi4>
    163c:	06 d0       	rcall	.+12     	; 0x164a <__divmodhi4_neg1>
    163e:	00 20       	and	r0, r0
    1640:	1a f4       	brpl	.+6      	; 0x1648 <__divmodhi4_exit>

00001642 <__divmodhi4_neg2>:
    1642:	70 95       	com	r23
    1644:	61 95       	neg	r22
    1646:	7f 4f       	sbci	r23, 0xFF	; 255

00001648 <__divmodhi4_exit>:
    1648:	08 95       	ret

0000164a <__divmodhi4_neg1>:
    164a:	f6 f7       	brtc	.-4      	; 0x1648 <__divmodhi4_exit>
    164c:	90 95       	com	r25
    164e:	81 95       	neg	r24
    1650:	9f 4f       	sbci	r25, 0xFF	; 255
    1652:	08 95       	ret

00001654 <__prologue_saves__>:
    1654:	2f 92       	push	r2
    1656:	3f 92       	push	r3
    1658:	4f 92       	push	r4
    165a:	5f 92       	push	r5
    165c:	6f 92       	push	r6
    165e:	7f 92       	push	r7
    1660:	8f 92       	push	r8
    1662:	9f 92       	push	r9
    1664:	af 92       	push	r10
    1666:	bf 92       	push	r11
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	ca 1b       	sub	r28, r26
    167e:	db 0b       	sbc	r29, r27
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	09 94       	ijmp

0000168c <__epilogue_restores__>:
    168c:	2a 88       	ldd	r2, Y+18	; 0x12
    168e:	39 88       	ldd	r3, Y+17	; 0x11
    1690:	48 88       	ldd	r4, Y+16	; 0x10
    1692:	5f 84       	ldd	r5, Y+15	; 0x0f
    1694:	6e 84       	ldd	r6, Y+14	; 0x0e
    1696:	7d 84       	ldd	r7, Y+13	; 0x0d
    1698:	8c 84       	ldd	r8, Y+12	; 0x0c
    169a:	9b 84       	ldd	r9, Y+11	; 0x0b
    169c:	aa 84       	ldd	r10, Y+10	; 0x0a
    169e:	b9 84       	ldd	r11, Y+9	; 0x09
    16a0:	c8 84       	ldd	r12, Y+8	; 0x08
    16a2:	df 80       	ldd	r13, Y+7	; 0x07
    16a4:	ee 80       	ldd	r14, Y+6	; 0x06
    16a6:	fd 80       	ldd	r15, Y+5	; 0x05
    16a8:	0c 81       	ldd	r16, Y+4	; 0x04
    16aa:	1b 81       	ldd	r17, Y+3	; 0x03
    16ac:	aa 81       	ldd	r26, Y+2	; 0x02
    16ae:	b9 81       	ldd	r27, Y+1	; 0x01
    16b0:	ce 0f       	add	r28, r30
    16b2:	d1 1d       	adc	r29, r1
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	ed 01       	movw	r28, r26
    16c0:	08 95       	ret

000016c2 <_exit>:
    16c2:	f8 94       	cli

000016c4 <__stop_program>:
    16c4:	ff cf       	rjmp	.-2      	; 0x16c4 <__stop_program>
