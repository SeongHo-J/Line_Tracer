
linetracer_dc_mini.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00001282  00001316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800178  00800178  0000142e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000125  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000631  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029e  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000679  00000000  00000000  00001e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000024dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020d  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000220  00000000  00000000  000027b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000029d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	54 c0       	rjmp	.+168    	; 0xac <__vector_1>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e2 e8       	ldi	r30, 0x82	; 130
      3a:	f2 e1       	ldi	r31, 0x12	; 18
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	a8 37       	cpi	r26, 0x78	; 120
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	a8 e7       	ldi	r26, 0x78	; 120
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ac 39       	cpi	r26, 0x9C	; 156
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	4c d0       	rcall	.+152    	; 0xf2 <main>
      5a:	11 c9       	rjmp	.-3550   	; 0xfffff27e <__eeprom_end+0xff7ef27e>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <init_PORT>:
#define cbi(PORTX,BitX)	PORTX&=~(1<<BitX)	// Bit clear fuction

/* PORT initialize*/
void init_PORT(void) {

	DDRB = 0x0E; // [2] motor_left [1] motor_right
      5e:	8e e0       	ldi	r24, 0x0E	; 14
      60:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x00; // [6] reset switch [3:0]IR receiver 
      62:	14 ba       	out	0x14, r1	; 20
	DDRD = 0xF3; // [7:4] IR emitter [1:0] LED 
      64:	83 ef       	ldi	r24, 0xF3	; 243
      66:	81 bb       	out	0x11, r24	; 17

	PORTD = 0x00;
      68:	12 ba       	out	0x12, r1	; 18
	PORTB = 0x00;
      6a:	18 ba       	out	0x18, r1	; 24
}
      6c:	08 95       	ret

0000006e <init_EX_INTERRUPT>:

/* external interrupt initialize */

void init_EX_INTERRUPT(void) {
	
	MCUCR	= (0<<ISC11) |(0<<ISC10) |(1<<ISC01) |(0<<ISC00);
      6e:	82 e0       	ldi	r24, 0x02	; 2
      70:	85 bf       	out	0x35, r24	; 53
	GICR	= (0<<INT1 ) |(1<<INT0 );
      72:	80 e4       	ldi	r24, 0x40	; 64
      74:	8b bf       	out	0x3b, r24	; 59
}
      76:	08 95       	ret

00000078 <init_TIMER2>:


/* timer counter initialize */
void init_TIMER2(void) {
	
	TCCR2 = (0<<FOC2)  |(0<<WGM20) |(0<<COM21) |(0<<COM20) |(1<<WGM21) |(1<<CS22)  |(0<<CS21)  |(1<<CS20);
      78:	8d e0       	ldi	r24, 0x0D	; 13
      7a:	85 bd       	out	0x25, r24	; 37
	TIMSK = (1<<OCIE2) |(0<<TOIE2) |(0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(0<<TOIE1) |(0<<TOIE0);
      7c:	80 e8       	ldi	r24, 0x80	; 128
      7e:	89 bf       	out	0x39, r24	; 57
	TCNT2 = 0x00;
      80:	14 bc       	out	0x24, r1	; 36
	OCR2  = 150;
      82:	86 e9       	ldi	r24, 0x96	; 150
      84:	83 bd       	out	0x23, r24	; 35


}
      86:	08 95       	ret

00000088 <init_PWM>:
*/

/* PWM initialize */
void init_PWM(void) {

	TCCR1A	= (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<FOC1A) |(0<<FOC1B) |(0<<WGM11) |(1<<WGM10);
      88:	81 e0       	ldi	r24, 0x01	; 1
      8a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B	= (0<<ICNC1) |(0<<ICES1) |			  (0<<WGM13) |(1<<WGM12) |(0<<CS12)  |(1<<CS11)  |(0<<CS10) ;
      8c:	8a e0       	ldi	r24, 0x0A	; 10
      8e:	8e bd       	out	0x2e, r24	; 46
	TIMSK	= (1<<OCIE2) |(0<<TOIE2) |(0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(0<<TOIE1) |(0<<TOIE0);
      90:	80 e8       	ldi	r24, 0x80	; 128
      92:	89 bf       	out	0x39, r24	; 57
	TCNT1	= 0x00;
      94:	1d bc       	out	0x2d, r1	; 45
      96:	1c bc       	out	0x2c, r1	; 44
	
	//ICR1= 2000; // 1khz

	OCR1A = 0x0000;
      98:	1b bc       	out	0x2b, r1	; 43
      9a:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0x0000;
      9c:	19 bc       	out	0x29, r1	; 41
      9e:	18 bc       	out	0x28, r1	; 40

}
      a0:	08 95       	ret

000000a2 <init_ADC>:
void init_ADC(void) {
	
	//ADMUX  = (1<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2) |(0<<MUX1) |(0<<MUX0);
	//ADCSRA = (1<<ADEN) |(0<<ADSC) |(0<<ADFR) |(0<<ADFR)|(1<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0);

	ADMUX = 0xC0; // internal 2.56 voltage reference
      a2:	80 ec       	ldi	r24, 0xC0	; 192
      a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87; // ADC enable(ADEN=1) / prescaler : 128 division factor
      a6:	87 e8       	ldi	r24, 0x87	; 135
      a8:	86 b9       	out	0x06, r24	; 6

}
      aa:	08 95       	ret

000000ac <__vector_1>:

	return 0;

}

SIGNAL(INT0_vect) {
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	8f 93       	push	r24
      b8:	9f 93       	push	r25

	state++;
      ba:	80 91 78 01 	lds	r24, 0x0178
      be:	90 91 79 01 	lds	r25, 0x0179
      c2:	01 96       	adiw	r24, 0x01	; 1
      c4:	90 93 79 01 	sts	0x0179, r25
      c8:	80 93 78 01 	sts	0x0178, r24

	if(state>3) state = 3;
      cc:	80 91 78 01 	lds	r24, 0x0178
      d0:	90 91 79 01 	lds	r25, 0x0179
      d4:	04 97       	sbiw	r24, 0x04	; 4
      d6:	34 f0       	brlt	.+12     	; 0xe4 <__vector_1+0x38>
      d8:	83 e0       	ldi	r24, 0x03	; 3
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	90 93 79 01 	sts	0x0179, r25
      e0:	80 93 78 01 	sts	0x0178, r24

}
      e4:	9f 91       	pop	r25
      e6:	8f 91       	pop	r24
      e8:	0f 90       	pop	r0
      ea:	0f be       	out	0x3f, r0	; 63
      ec:	0f 90       	pop	r0
      ee:	1f 90       	pop	r1
      f0:	18 95       	reti

000000f2 <main>:
int NORM_DATA[4] = {0,};
int WEIGHT_DATA[4] = {0,};

volatile int SENSOR_DATA=0;

int main(void) {
      f2:	2f 92       	push	r2
      f4:	3f 92       	push	r3
      f6:	4f 92       	push	r4
      f8:	5f 92       	push	r5
      fa:	6f 92       	push	r6
      fc:	7f 92       	push	r7
      fe:	8f 92       	push	r8
     100:	9f 92       	push	r9
     102:	af 92       	push	r10
     104:	bf 92       	push	r11
     106:	cf 92       	push	r12
     108:	df 92       	push	r13
     10a:	ef 92       	push	r14
     10c:	ff 92       	push	r15
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
#define cbi(PORTX,BitX)	PORTX&=~(1<<BitX)	// Bit clear fuction

/* PORT initialize*/
void init_PORT(void) {

	DDRB = 0x0E; // [2] motor_left [1] motor_right
     116:	8e e0       	ldi	r24, 0x0E	; 14
     118:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x00; // [6] reset switch [3:0]IR receiver 
     11a:	14 ba       	out	0x14, r1	; 20
	DDRD = 0xF3; // [7:4] IR emitter [1:0] LED 
     11c:	83 ef       	ldi	r24, 0xF3	; 243
     11e:	81 bb       	out	0x11, r24	; 17

	PORTD = 0x00;
     120:	12 ba       	out	0x12, r1	; 18
	PORTB = 0x00;
     122:	18 ba       	out	0x18, r1	; 24

/* external interrupt initialize */

void init_EX_INTERRUPT(void) {
	
	MCUCR	= (0<<ISC11) |(0<<ISC10) |(1<<ISC01) |(0<<ISC00);
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	85 bf       	out	0x35, r24	; 53
	GICR	= (0<<INT1 ) |(1<<INT0 );
     128:	80 e4       	ldi	r24, 0x40	; 64
     12a:	8b bf       	out	0x3b, r24	; 59
*/

/* PWM initialize */
void init_PWM(void) {

	TCCR1A	= (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<FOC1A) |(0<<FOC1B) |(0<<WGM11) |(1<<WGM10);
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B	= (0<<ICNC1) |(0<<ICES1) |			  (0<<WGM13) |(1<<WGM12) |(0<<CS12)  |(1<<CS11)  |(0<<CS10) ;
     130:	8a e0       	ldi	r24, 0x0A	; 10
     132:	8e bd       	out	0x2e, r24	; 46
	TIMSK	= (1<<OCIE2) |(0<<TOIE2) |(0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(0<<TOIE1) |(0<<TOIE0);
     134:	80 e8       	ldi	r24, 0x80	; 128
     136:	89 bf       	out	0x39, r24	; 57
	TCNT1	= 0x00;
     138:	1d bc       	out	0x2d, r1	; 45
     13a:	1c bc       	out	0x2c, r1	; 44
	
	//ICR1= 2000; // 1khz

	OCR1A = 0x0000;
     13c:	1b bc       	out	0x2b, r1	; 43
     13e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0x0000;
     140:	19 bc       	out	0x29, r1	; 41
     142:	18 bc       	out	0x28, r1	; 40
void init_ADC(void) {
	
	//ADMUX  = (1<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2) |(0<<MUX1) |(0<<MUX0);
	//ADCSRA = (1<<ADEN) |(0<<ADSC) |(0<<ADFR) |(0<<ADFR)|(1<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0);

	ADMUX = 0xC0; // internal 2.56 voltage reference
     144:	80 ec       	ldi	r24, 0xC0	; 192
     146:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87; // ADC enable(ADEN=1) / prescaler : 128 division factor
     148:	87 e8       	ldi	r24, 0x87	; 135
     14a:	86 b9       	out	0x06, r24	; 6
	init_PORT();
	init_EX_INTERRUPT();
	init_PWM();
	init_ADC();

	sei();
     14c:	78 94       	sei
     14e:	0f 2e       	mov	r0, r31
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	6f 2e       	mov	r6, r31
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	7f 2e       	mov	r7, r31
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	8f 2e       	mov	r8, r31
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	9f 2e       	mov	r9, r31
     160:	f0 2d       	mov	r31, r0
				////////////////////////////////////////////////////////////////////////////////////
				//-------------------------------------WAIT---------------------------------------//
				////////////////////////////////////////////////////////////////////////////////////
				case WAIT :

					PORTD = 0x01; // WAIT check
     162:	22 24       	eor	r2, r2
     164:	23 94       	inc	r2
						OCR1B = CRUZE_SPEED - MV;

					}
					else{

						OCR1A = CRUZE_SPEED;
     166:	c9 e4       	ldi	r28, 0x49	; 73
     168:	d0 e0       	ldi	r29, 0x00	; 0
				////////////////////////////////////////////////////////////////////////////////////
				//-------------------------------------IDLE---------------------------------------//
				////////////////////////////////////////////////////////////////////////////////////
				case IDLE :

					PORTD = 0x03; // IDLE state check
     16a:	93 e0       	ldi	r25, 0x03	; 3
     16c:	39 2e       	mov	r3, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     16e:	80 ee       	ldi	r24, 0xE0	; 224
     170:	48 2e       	mov	r4, r24
     172:	8e e2       	ldi	r24, 0x2E	; 46
     174:	58 2e       	mov	r5, r24
	sei();

	while(1) {

		
		switch(state) {
     176:	80 91 78 01 	lds	r24, 0x0178
     17a:	90 91 79 01 	lds	r25, 0x0179
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	91 05       	cpc	r25, r1
     182:	79 f0       	breq	.+30     	; 0x1a2 <main+0xb0>
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	91 05       	cpc	r25, r1
     188:	1c f4       	brge	.+6      	; 0x190 <main+0x9e>
     18a:	89 2b       	or	r24, r25
     18c:	41 f0       	breq	.+16     	; 0x19e <main+0xac>
     18e:	86 c0       	rjmp	.+268    	; 0x29c <main+0x1aa>
     190:	82 30       	cpi	r24, 0x02	; 2
     192:	91 05       	cpc	r25, r1
     194:	99 f0       	breq	.+38     	; 0x1bc <main+0xca>
     196:	03 97       	sbiw	r24, 0x03	; 3
     198:	09 f0       	breq	.+2      	; 0x19c <main+0xaa>
     19a:	80 c0       	rjmp	.+256    	; 0x29c <main+0x1aa>
     19c:	14 c0       	rjmp	.+40     	; 0x1c6 <main+0xd4>
				////////////////////////////////////////////////////////////////////////////////////
				//-------------------------------------IDLE---------------------------------------//
				////////////////////////////////////////////////////////////////////////////////////
				case IDLE :

					PORTD = 0x03; // IDLE state check
     19e:	32 ba       	out	0x12, r3	; 18
     1a0:	7d c0       	rjmp	.+250    	; 0x29c <main+0x1aa>
				////////////////////////////////////////////////////////////////////////////////////
				//-------------------------------------NORM---------------------------------------//
				////////////////////////////////////////////////////////////////////////////////////
				case NORM :

					PORTD = 0x02; // NORM state check
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	82 bb       	out	0x12, r24	; 18

					ADC_GET(ADC_DATA);
     1a6:	8a e7       	ldi	r24, 0x7A	; 122
     1a8:	91 e0       	ldi	r25, 0x01	; 1
     1aa:	7c d0       	rcall	.+248    	; 0x2a4 <ADC_GET>

					ADC_MAX_MIN(ADC_MAX, ADC_MIN, ADC_DATA);
     1ac:	82 e8       	ldi	r24, 0x82	; 130
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	60 e6       	ldi	r22, 0x60	; 96
     1b2:	70 e0       	ldi	r23, 0x00	; 0
     1b4:	4a e7       	ldi	r20, 0x7A	; 122
     1b6:	51 e0       	ldi	r21, 0x01	; 1
     1b8:	d5 d0       	rcall	.+426    	; 0x364 <ADC_MAX_MIN>
     1ba:	70 c0       	rjmp	.+224    	; 0x29c <main+0x1aa>
				////////////////////////////////////////////////////////////////////////////////////
				//-------------------------------------WAIT---------------------------------------//
				////////////////////////////////////////////////////////////////////////////////////
				case WAIT :

					PORTD = 0x01; // WAIT check
     1bc:	22 ba       	out	0x12, r2	; 18

					TCCR1A	|= (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0);
     1be:	8f b5       	in	r24, 0x2f	; 47
     1c0:	80 6a       	ori	r24, 0xA0	; 160
     1c2:	8f bd       	out	0x2f, r24	; 47
     1c4:	6b c0       	rjmp	.+214    	; 0x29c <main+0x1aa>
				////////////////////////////////////////////////////////////////////////////////////
				//-------------------------------------RUN----------------------------------------//
				////////////////////////////////////////////////////////////////////////////////////
				case RUN :

					PORTD = 0x00; // RUN check
     1c6:	12 ba       	out	0x12, r1	; 18

					ADC_GET(ADC_DATA);
     1c8:	8a e7       	ldi	r24, 0x7A	; 122
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	6b d0       	rcall	.+214    	; 0x2a4 <ADC_GET>

					ADC_NORMALIZE(NORM_DATA, ADC_DATA, ADC_MAX, ADC_MIN);
     1ce:	8a e8       	ldi	r24, 0x8A	; 138
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	6a e7       	ldi	r22, 0x7A	; 122
     1d4:	71 e0       	ldi	r23, 0x01	; 1
     1d6:	42 e8       	ldi	r20, 0x82	; 130
     1d8:	51 e0       	ldi	r21, 0x01	; 1
     1da:	20 e6       	ldi	r18, 0x60	; 96
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	e8 d0       	rcall	.+464    	; 0x3b0 <ADC_NORMALIZE>

					DATA_WEIGHT(&SENSOR_DATA, WEIGHT_DATA, NORM_DATA);
     1e0:	8a e9       	ldi	r24, 0x9A	; 154
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	62 e9       	ldi	r22, 0x92	; 146
     1e6:	71 e0       	ldi	r23, 0x01	; 1
     1e8:	4a e8       	ldi	r20, 0x8A	; 138
     1ea:	51 e0       	ldi	r21, 0x01	; 1
     1ec:	55 d1       	rcall	.+682    	; 0x498 <DATA_WEIGHT>

					//---------------- PD controller ----------------//
					// Err = Reference valuse - output
					// MV  = Kp*Err + Kd*(Err - pre_Err)

					err = (float)(-SENSOR_DATA); // Reference value is 0
     1ee:	60 91 9a 01 	lds	r22, 0x019A
     1f2:	70 91 9b 01 	lds	r23, 0x019B
     1f6:	70 95       	com	r23
     1f8:	61 95       	neg	r22
     1fa:	7f 4f       	sbci	r23, 0xFF	; 255
     1fc:	88 27       	eor	r24, r24
     1fe:	77 fd       	sbrc	r23, 7
     200:	80 95       	com	r24
     202:	98 2f       	mov	r25, r24
     204:	3e d5       	rcall	.+2684   	; 0xc82 <__floatsisf>
     206:	5b 01       	movw	r10, r22
     208:	6c 01       	movw	r12, r24

					diff_err = err - pre_err;
					pre_err = err;

					MV = Kp*err + Kd*diff_err;
     20a:	26 e6       	ldi	r18, 0x66	; 102
     20c:	36 e6       	ldi	r19, 0x66	; 102
     20e:	46 ea       	ldi	r20, 0xA6	; 166
     210:	5f e3       	ldi	r21, 0x3F	; 63
     212:	70 d3       	rcall	.+1760   	; 0x8f4 <__mulsf3>
     214:	7b 01       	movw	r14, r22
     216:	8c 01       	movw	r16, r24
     218:	c6 01       	movw	r24, r12
     21a:	b5 01       	movw	r22, r10
     21c:	a4 01       	movw	r20, r8
     21e:	93 01       	movw	r18, r6
     220:	17 d3       	rcall	.+1582   	; 0x850 <__subsf3>
     222:	2d ec       	ldi	r18, 0xCD	; 205
     224:	3c ec       	ldi	r19, 0xCC	; 204
     226:	4c e4       	ldi	r20, 0x4C	; 76
     228:	5f e3       	ldi	r21, 0x3F	; 63
     22a:	64 d3       	rcall	.+1736   	; 0x8f4 <__mulsf3>
     22c:	9b 01       	movw	r18, r22
     22e:	ac 01       	movw	r20, r24
     230:	c8 01       	movw	r24, r16
     232:	b7 01       	movw	r22, r14
     234:	38 d3       	rcall	.+1648   	; 0x8a6 <__addsf3>

					//------------------------------------------------//

					MV = MV/20;
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	40 ea       	ldi	r20, 0xA0	; 160
     23c:	51 e4       	ldi	r21, 0x41	; 65
     23e:	4f d4       	rcall	.+2206   	; 0xade <__divsf3>
     240:	7b 01       	movw	r14, r22
     242:	8c 01       	movw	r16, r24

					if(SENSOR_DATA<0) {				
     244:	80 91 9a 01 	lds	r24, 0x019A
     248:	90 91 9b 01 	lds	r25, 0x019B
     24c:	97 fd       	sbrc	r25, 7
     24e:	07 c0       	rjmp	.+14     	; 0x25e <main+0x16c>

						OCR1A = CRUZE_SPEED + MV;
						OCR1B = CRUZE_SPEED - MV;

					}
					else if(SENSOR_DATA>0) {
     250:	80 91 9a 01 	lds	r24, 0x019A
     254:	90 91 9b 01 	lds	r25, 0x019B
     258:	18 16       	cp	r1, r24
     25a:	19 06       	cpc	r1, r25
     25c:	ac f4       	brge	.+42     	; 0x288 <main+0x196>

						OCR1A = CRUZE_SPEED + MV;
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	42 e9       	ldi	r20, 0x92	; 146
     268:	52 e4       	ldi	r21, 0x42	; 66
     26a:	1d d3       	rcall	.+1594   	; 0x8a6 <__addsf3>
     26c:	7f d1       	rcall	.+766    	; 0x56c <__fixunssfsi>
     26e:	7b bd       	out	0x2b, r23	; 43
     270:	6a bd       	out	0x2a, r22	; 42
						OCR1B = CRUZE_SPEED - MV;
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	82 e9       	ldi	r24, 0x92	; 146
     278:	92 e4       	ldi	r25, 0x42	; 66
     27a:	a8 01       	movw	r20, r16
     27c:	97 01       	movw	r18, r14
     27e:	e8 d2       	rcall	.+1488   	; 0x850 <__subsf3>
     280:	75 d1       	rcall	.+746    	; 0x56c <__fixunssfsi>
     282:	79 bd       	out	0x29, r23	; 41
     284:	68 bd       	out	0x28, r22	; 40
     286:	04 c0       	rjmp	.+8      	; 0x290 <main+0x19e>

					}
					else{

						OCR1A = CRUZE_SPEED;
     288:	db bd       	out	0x2b, r29	; 43
     28a:	ca bd       	out	0x2a, r28	; 42
						OCR1B = CRUZE_SPEED;
     28c:	d9 bd       	out	0x29, r29	; 41
     28e:	c8 bd       	out	0x28, r28	; 40

					}

					SENSOR_DATA=0;
     290:	10 92 9b 01 	sts	0x019B, r1
     294:	10 92 9a 01 	sts	0x019A, r1
     298:	35 01       	movw	r6, r10
     29a:	46 01       	movw	r8, r12
     29c:	c2 01       	movw	r24, r4
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x1ac>
     2a2:	69 cf       	rjmp	.-302    	; 0x176 <main+0x84>

000002a4 <ADC_GET>:
#include"linetracer_ADC.h"

// Get ADC from IR sensor
void ADC_GET(int *ADC_DATA) {
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2aa:	41 e0       	ldi	r20, 0x01	; 1

				ADC_DATA[1] = ADC;
				
				PORTD &= ~(0x20);

				ADMUX = 0xC2; // prepare for ADC_2
     2ac:	a2 ec       	ldi	r26, 0xC2	; 194

				ADC_DATA[2] = ADC;
				
				PORTD &= ~(0x40);

				ADMUX = 0xC3; // prepare for ADC_3
     2ae:	73 ec       	ldi	r23, 0xC3	; 195

				ADC_DATA[3] = ADC;
				
				PORTD &= ~(0x80);

				ADMUX = 0xC0; // prepare for ADC_0
     2b0:	60 ec       	ldi	r22, 0xC0	; 192

				ADC_DATA[0] = ADC;
				
				PORTD &= ~(0x10);

				ADMUX = 0xC1; // prepare for ADC_1
     2b2:	51 ec       	ldi	r21, 0xC1	; 193
	
	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		switch(i) {
     2b4:	21 30       	cpi	r18, 0x01	; 1
     2b6:	31 05       	cpc	r19, r1
     2b8:	f9 f0       	breq	.+62     	; 0x2f8 <ADC_GET+0x54>
     2ba:	22 30       	cpi	r18, 0x02	; 2
     2bc:	31 05       	cpc	r19, r1
     2be:	24 f4       	brge	.+8      	; 0x2c8 <ADC_GET+0x24>
     2c0:	21 15       	cp	r18, r1
     2c2:	31 05       	cpc	r19, r1
     2c4:	49 f0       	breq	.+18     	; 0x2d8 <ADC_GET+0x34>
     2c6:	47 c0       	rjmp	.+142    	; 0x356 <ADC_GET+0xb2>
     2c8:	22 30       	cpi	r18, 0x02	; 2
     2ca:	31 05       	cpc	r19, r1
     2cc:	29 f1       	breq	.+74     	; 0x318 <ADC_GET+0x74>
     2ce:	23 30       	cpi	r18, 0x03	; 3
     2d0:	31 05       	cpc	r19, r1
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <ADC_GET+0x32>
     2d4:	40 c0       	rjmp	.+128    	; 0x356 <ADC_GET+0xb2>
     2d6:	30 c0       	rjmp	.+96     	; 0x338 <ADC_GET+0x94>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_0---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 0 :
				PORTD |= 0x10;
     2d8:	94 9a       	sbi	0x12, 4	; 18
     2da:	84 2f       	mov	r24, r20
     2dc:	8a 95       	dec	r24
     2de:	f1 f7       	brne	.-4      	; 0x2dc <ADC_GET+0x38>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     2e0:	86 b1       	in	r24, 0x06	; 6
     2e2:	80 6c       	ori	r24, 0xC0	; 192
     2e4:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     2e6:	34 9b       	sbis	0x06, 4	; 6
     2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <ADC_GET+0x42>

				ADC_DATA[0] = ADC;
     2ea:	84 b1       	in	r24, 0x04	; 4
     2ec:	95 b1       	in	r25, 0x05	; 5
     2ee:	91 83       	std	Z+1, r25	; 0x01
     2f0:	80 83       	st	Z, r24
				
				PORTD &= ~(0x10);
     2f2:	94 98       	cbi	0x12, 4	; 18

				ADMUX = 0xC1; // prepare for ADC_1
     2f4:	57 b9       	out	0x07, r21	; 7
     2f6:	2f c0       	rjmp	.+94     	; 0x356 <ADC_GET+0xb2>
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_1---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :

				PORTD |= 0x20;
     2f8:	95 9a       	sbi	0x12, 5	; 18
     2fa:	84 2f       	mov	r24, r20
     2fc:	8a 95       	dec	r24
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <ADC_GET+0x58>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     300:	86 b1       	in	r24, 0x06	; 6
     302:	80 6c       	ori	r24, 0xC0	; 192
     304:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     306:	34 9b       	sbis	0x06, 4	; 6
     308:	fe cf       	rjmp	.-4      	; 0x306 <ADC_GET+0x62>

				ADC_DATA[1] = ADC;
     30a:	84 b1       	in	r24, 0x04	; 4
     30c:	95 b1       	in	r25, 0x05	; 5
     30e:	93 83       	std	Z+3, r25	; 0x03
     310:	82 83       	std	Z+2, r24	; 0x02
				
				PORTD &= ~(0x20);
     312:	95 98       	cbi	0x12, 5	; 18

				ADMUX = 0xC2; // prepare for ADC_2
     314:	a7 b9       	out	0x07, r26	; 7
     316:	1f c0       	rjmp	.+62     	; 0x356 <ADC_GET+0xb2>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_2---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 2 :
				PORTD |= 0x40;
     318:	96 9a       	sbi	0x12, 6	; 18
     31a:	84 2f       	mov	r24, r20
     31c:	8a 95       	dec	r24
     31e:	f1 f7       	brne	.-4      	; 0x31c <ADC_GET+0x78>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     320:	86 b1       	in	r24, 0x06	; 6
     322:	80 6c       	ori	r24, 0xC0	; 192
     324:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     326:	34 9b       	sbis	0x06, 4	; 6
     328:	fe cf       	rjmp	.-4      	; 0x326 <ADC_GET+0x82>

				ADC_DATA[2] = ADC;
     32a:	84 b1       	in	r24, 0x04	; 4
     32c:	95 b1       	in	r25, 0x05	; 5
     32e:	95 83       	std	Z+5, r25	; 0x05
     330:	84 83       	std	Z+4, r24	; 0x04
				
				PORTD &= ~(0x40);
     332:	96 98       	cbi	0x12, 6	; 18

				ADMUX = 0xC3; // prepare for ADC_3
     334:	77 b9       	out	0x07, r23	; 7
     336:	0f c0       	rjmp	.+30     	; 0x356 <ADC_GET+0xb2>

			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_3---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 3 :
				PORTD |= 0x80;
     338:	97 9a       	sbi	0x12, 7	; 18
     33a:	84 2f       	mov	r24, r20
     33c:	8a 95       	dec	r24
     33e:	f1 f7       	brne	.-4      	; 0x33c <ADC_GET+0x98>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     340:	86 b1       	in	r24, 0x06	; 6
     342:	80 6c       	ori	r24, 0xC0	; 192
     344:	86 b9       	out	0x06, r24	; 6
				while( ((ADCSRA&0x10) == 0x00) ); // wait for ADC complete
     346:	34 9b       	sbis	0x06, 4	; 6
     348:	fe cf       	rjmp	.-4      	; 0x346 <ADC_GET+0xa2>

				ADC_DATA[3] = ADC;
     34a:	84 b1       	in	r24, 0x04	; 4
     34c:	95 b1       	in	r25, 0x05	; 5
     34e:	97 83       	std	Z+7, r25	; 0x07
     350:	86 83       	std	Z+6, r24	; 0x06
				
				PORTD &= ~(0x80);
     352:	97 98       	cbi	0x12, 7	; 18

				ADMUX = 0xC0; // prepare for ADC_0
     354:	67 b9       	out	0x07, r22	; 7
	//------------IR order-----------//	
	// 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 //
	
	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
     356:	2f 5f       	subi	r18, 0xFF	; 255
     358:	3f 4f       	sbci	r19, 0xFF	; 255
     35a:	24 30       	cpi	r18, 0x04	; 4
     35c:	31 05       	cpc	r19, r1
     35e:	09 f0       	breq	.+2      	; 0x362 <ADC_GET+0xbe>
     360:	a9 cf       	rjmp	.-174    	; 0x2b4 <ADC_GET+0x10>

		}

	}

}
     362:	08 95       	ret

00000364 <ADC_MAX_MIN>:

// Get ADC max and min value from ADC_DATA[i]
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA) {
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	ec 01       	movw	r28, r24
     36a:	da 01       	movw	r26, r20
     36c:	fb 01       	movw	r30, r22
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	50 e0       	ldi	r21, 0x00	; 0

	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
						
		if( ADC_MAX[i] < ADC_DATA[i] ) // ADC_MAX
     372:	2d 91       	ld	r18, X+
     374:	3c 91       	ld	r19, X
     376:	11 97       	sbiw	r26, 0x01	; 1
     378:	88 81       	ld	r24, Y
     37a:	99 81       	ldd	r25, Y+1	; 0x01
     37c:	82 17       	cp	r24, r18
     37e:	93 07       	cpc	r25, r19
     380:	14 f4       	brge	.+4      	; 0x386 <ADC_MAX_MIN+0x22>
			ADC_MAX[i] = ADC_DATA[i];
     382:	39 83       	std	Y+1, r19	; 0x01
     384:	28 83       	st	Y, r18
		
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
     386:	2d 91       	ld	r18, X+
     388:	3c 91       	ld	r19, X
     38a:	11 97       	sbiw	r26, 0x01	; 1
     38c:	80 81       	ld	r24, Z
     38e:	91 81       	ldd	r25, Z+1	; 0x01
     390:	28 17       	cp	r18, r24
     392:	39 07       	cpc	r19, r25
     394:	14 f4       	brge	.+4      	; 0x39a <ADC_MAX_MIN+0x36>
			ADC_MIN[i] = ADC_DATA[i];	
     396:	31 83       	std	Z+1, r19	; 0x01
     398:	20 83       	st	Z, r18
// Get ADC max and min value from ADC_DATA[i]
void ADC_MAX_MIN(int *ADC_MAX, int *ADC_MIN, const int *ADC_DATA) {

	int i=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
     39a:	4f 5f       	subi	r20, 0xFF	; 255
     39c:	5f 4f       	sbci	r21, 0xFF	; 255
     39e:	22 96       	adiw	r28, 0x02	; 2
     3a0:	12 96       	adiw	r26, 0x02	; 2
     3a2:	32 96       	adiw	r30, 0x02	; 2
     3a4:	44 30       	cpi	r20, 0x04	; 4
     3a6:	51 05       	cpc	r21, r1
     3a8:	21 f7       	brne	.-56     	; 0x372 <ADC_MAX_MIN+0xe>
		
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
			ADC_MIN[i] = ADC_DATA[i];	
	
	}
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	08 95       	ret

000003b0 <ADC_NORMALIZE>:


// Get normalized ADC value (white base / black line / resolution=100)
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN) {
     3b0:	2f 92       	push	r2
     3b2:	3f 92       	push	r3
     3b4:	4f 92       	push	r4
     3b6:	5f 92       	push	r5
     3b8:	6f 92       	push	r6
     3ba:	7f 92       	push	r7
     3bc:	8f 92       	push	r8
     3be:	9f 92       	push	r9
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	df 93       	push	r29
     3d2:	cf 93       	push	r28
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <ADC_NORMALIZE+0x26>
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <ADC_NORMALIZE+0x28>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
     3e0:	1b 01       	movw	r2, r22
     3e2:	2a 01       	movw	r4, r20
     3e4:	39 01       	movw	r6, r18
     3e6:	1c 82       	std	Y+4, r1	; 0x04
     3e8:	1b 82       	std	Y+3, r1	; 0x03
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
     3ea:	eb 81       	ldd	r30, Y+3	; 0x03
     3ec:	fc 81       	ldd	r31, Y+4	; 0x04
     3ee:	e4 0d       	add	r30, r4
     3f0:	f5 1d       	adc	r31, r5
     3f2:	e0 80       	ld	r14, Z
     3f4:	f1 80       	ldd	r15, Z+1	; 0x01
		temp_2 = ADC_MAX[i] - ADC_MIN[i];

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
     3f6:	89 80       	ldd	r8, Y+1	; 0x01
     3f8:	9a 80       	ldd	r9, Y+2	; 0x02
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	88 0e       	add	r8, r24
     400:	99 1e       	adc	r9, r25
     402:	fc 01       	movw	r30, r24
     404:	e2 0d       	add	r30, r2
     406:	f3 1d       	adc	r31, r3
     408:	80 81       	ld	r24, Z
     40a:	91 81       	ldd	r25, Z+1	; 0x01
     40c:	b7 01       	movw	r22, r14
     40e:	68 1b       	sub	r22, r24
     410:	79 0b       	sbc	r23, r25
     412:	88 27       	eor	r24, r24
     414:	77 fd       	sbrc	r23, 7
     416:	80 95       	com	r24
     418:	98 2f       	mov	r25, r24
     41a:	33 d4       	rcall	.+2150   	; 0xc82 <__floatsisf>
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	48 ec       	ldi	r20, 0xC8	; 200
     422:	52 e4       	ldi	r21, 0x42	; 66
     424:	67 d2       	rcall	.+1230   	; 0x8f4 <__mulsf3>
     426:	5b 01       	movw	r10, r22
     428:	6c 01       	movw	r12, r24
     42a:	eb 81       	ldd	r30, Y+3	; 0x03
     42c:	fc 81       	ldd	r31, Y+4	; 0x04
     42e:	e6 0d       	add	r30, r6
     430:	f7 1d       	adc	r31, r7
     432:	80 81       	ld	r24, Z
     434:	91 81       	ldd	r25, Z+1	; 0x01
     436:	e8 1a       	sub	r14, r24
     438:	f9 0a       	sbc	r15, r25
     43a:	00 27       	eor	r16, r16
     43c:	f7 fc       	sbrc	r15, 7
     43e:	00 95       	com	r16
     440:	10 2f       	mov	r17, r16
     442:	c8 01       	movw	r24, r16
     444:	b7 01       	movw	r22, r14
     446:	1d d4       	rcall	.+2106   	; 0xc82 <__floatsisf>
     448:	9b 01       	movw	r18, r22
     44a:	ac 01       	movw	r20, r24
     44c:	c6 01       	movw	r24, r12
     44e:	b5 01       	movw	r22, r10
     450:	46 d3       	rcall	.+1676   	; 0xade <__divsf3>
     452:	71 d4       	rcall	.+2274   	; 0xd36 <__fixsfsi>
     454:	f4 01       	movw	r30, r8
     456:	71 83       	std	Z+1, r23	; 0x01
     458:	60 83       	st	Z, r22
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	9c 81       	ldd	r25, Y+4	; 0x04
     45e:	02 96       	adiw	r24, 0x02	; 2
     460:	9c 83       	std	Y+4, r25	; 0x04
     462:	8b 83       	std	Y+3, r24	; 0x03
void ADC_NORMALIZE(int *NORM_DATA, const int *ADC_DATA, const int *ADC_MAX, const int *ADC_MIN) {
	
	int i=0;
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
     464:	08 97       	sbiw	r24, 0x08	; 8
     466:	09 f0       	breq	.+2      	; 0x46a <__stack+0xb>
     468:	c0 cf       	rjmp	.-128    	; 0x3ea <ADC_NORMALIZE+0x3a>

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);

	}

}
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	cf 91       	pop	r28
     474:	df 91       	pop	r29
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	ff 90       	pop	r15
     47c:	ef 90       	pop	r14
     47e:	df 90       	pop	r13
     480:	cf 90       	pop	r12
     482:	bf 90       	pop	r11
     484:	af 90       	pop	r10
     486:	9f 90       	pop	r9
     488:	8f 90       	pop	r8
     48a:	7f 90       	pop	r7
     48c:	6f 90       	pop	r6
     48e:	5f 90       	pop	r5
     490:	4f 90       	pop	r4
     492:	3f 90       	pop	r3
     494:	2f 90       	pop	r2
     496:	08 95       	ret

00000498 <DATA_WEIGHT>:

void DATA_WEIGHT(int *SENSOR_DATA, int *WEIGHT_DATA, const int *NORM_DATA) {
     498:	af 92       	push	r10
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	df 93       	push	r29
     4aa:	cf 93       	push	r28
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	28 97       	sbiw	r28, 0x08	; 8
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	8c 01       	movw	r16, r24
     4be:	6b 01       	movw	r12, r22
     4c0:	7a 01       	movw	r14, r20

	int i=0;
	int cnt=0;
	int weight[4] = {-3, -1, 1, 3};
     4c2:	de 01       	movw	r26, r28
     4c4:	11 96       	adiw	r26, 0x01	; 1
     4c6:	e8 e6       	ldi	r30, 0x68	; 104
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	88 e0       	ldi	r24, 0x08	; 8
     4cc:	01 90       	ld	r0, Z+
     4ce:	0d 92       	st	X+, r0
     4d0:	81 50       	subi	r24, 0x01	; 1
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <DATA_WEIGHT+0x34>
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	a0 e0       	ldi	r26, 0x00	; 0
     4da:	b0 e0       	ldi	r27, 0x00	; 0

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		if(NORM_DATA[i]>=(int)(RESOLUTION*0.6)) {

			WEIGHT_DATA[i] = weight[i]*NORM_DATA[i];
     4dc:	5e 01       	movw	r10, r28
     4de:	08 94       	sec
     4e0:	a1 1c       	adc	r10, r1
     4e2:	b1 1c       	adc	r11, r1
	int cnt=0;
	int weight[4] = {-3, -1, 1, 3};

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {

		if(NORM_DATA[i]>=(int)(RESOLUTION*0.6)) {
     4e4:	f7 01       	movw	r30, r14
     4e6:	ea 0f       	add	r30, r26
     4e8:	fb 1f       	adc	r31, r27
     4ea:	40 81       	ld	r20, Z
     4ec:	51 81       	ldd	r21, Z+1	; 0x01
     4ee:	4c 33       	cpi	r20, 0x3C	; 60
     4f0:	51 05       	cpc	r21, r1
     4f2:	d4 f0       	brlt	.+52     	; 0x528 <DATA_WEIGHT+0x90>

			WEIGHT_DATA[i] = weight[i]*NORM_DATA[i];
     4f4:	f5 01       	movw	r30, r10
     4f6:	ea 0f       	add	r30, r26
     4f8:	fb 1f       	adc	r31, r27
     4fa:	80 81       	ld	r24, Z
     4fc:	91 81       	ldd	r25, Z+1	; 0x01
     4fe:	48 9f       	mul	r20, r24
     500:	90 01       	movw	r18, r0
     502:	49 9f       	mul	r20, r25
     504:	30 0d       	add	r19, r0
     506:	58 9f       	mul	r21, r24
     508:	30 0d       	add	r19, r0
     50a:	11 24       	eor	r1, r1
     50c:	f6 01       	movw	r30, r12
     50e:	ea 0f       	add	r30, r26
     510:	fb 1f       	adc	r31, r27
     512:	31 83       	std	Z+1, r19	; 0x01
     514:	20 83       	st	Z, r18
			*SENSOR_DATA = *SENSOR_DATA + WEIGHT_DATA[i];
     516:	f8 01       	movw	r30, r16
     518:	80 81       	ld	r24, Z
     51a:	91 81       	ldd	r25, Z+1	; 0x01
     51c:	82 0f       	add	r24, r18
     51e:	93 1f       	adc	r25, r19
     520:	91 83       	std	Z+1, r25	; 0x01
     522:	80 83       	st	Z, r24
			cnt++;
     524:	6f 5f       	subi	r22, 0xFF	; 255
     526:	7f 4f       	sbci	r23, 0xFF	; 255
     528:	12 96       	adiw	r26, 0x02	; 2

	int i=0;
	int cnt=0;
	int weight[4] = {-3, -1, 1, 3};

	for(i=IR_NUMBER_m ; i<=IR_NUMBER_M ; i++) {
     52a:	a8 30       	cpi	r26, 0x08	; 8
     52c:	b1 05       	cpc	r27, r1
     52e:	d1 f6       	brne	.-76     	; 0x4e4 <DATA_WEIGHT+0x4c>

		}

	}

	if(cnt!=0) *SENSOR_DATA = (int)(*SENSOR_DATA/cnt);
     530:	61 15       	cp	r22, r1
     532:	71 05       	cpc	r23, r1
     534:	39 f0       	breq	.+14     	; 0x544 <DATA_WEIGHT+0xac>
     536:	f8 01       	movw	r30, r16
     538:	80 81       	ld	r24, Z
     53a:	91 81       	ldd	r25, Z+1	; 0x01
     53c:	42 d6       	rcall	.+3204   	; 0x11c2 <__divmodhi4>
     53e:	71 83       	std	Z+1, r23	; 0x01
     540:	60 83       	st	Z, r22
     542:	03 c0       	rjmp	.+6      	; 0x54a <DATA_WEIGHT+0xb2>
	else *SENSOR_DATA=0;
     544:	f8 01       	movw	r30, r16
     546:	11 82       	std	Z+1, r1	; 0x01
     548:	10 82       	st	Z, r1

}
     54a:	28 96       	adiw	r28, 0x08	; 8
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	cf 91       	pop	r28
     558:	df 91       	pop	r29
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	cf 90       	pop	r12
     566:	bf 90       	pop	r11
     568:	af 90       	pop	r10
     56a:	08 95       	ret

0000056c <__fixunssfsi>:
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	7b 01       	movw	r14, r22
     576:	8c 01       	movw	r16, r24
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	5f e4       	ldi	r21, 0x4F	; 79
     580:	55 d3       	rcall	.+1706   	; 0xc2c <__gesf2>
     582:	88 23       	and	r24, r24
     584:	7c f0       	brlt	.+30     	; 0x5a4 <__fixunssfsi+0x38>
     586:	c8 01       	movw	r24, r16
     588:	b7 01       	movw	r22, r14
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	5f e4       	ldi	r21, 0x4F	; 79
     592:	5e d1       	rcall	.+700    	; 0x850 <__subsf3>
     594:	d0 d3       	rcall	.+1952   	; 0xd36 <__fixsfsi>
     596:	9b 01       	movw	r18, r22
     598:	ac 01       	movw	r20, r24
     59a:	20 50       	subi	r18, 0x00	; 0
     59c:	30 40       	sbci	r19, 0x00	; 0
     59e:	40 40       	sbci	r20, 0x00	; 0
     5a0:	50 48       	sbci	r21, 0x80	; 128
     5a2:	05 c0       	rjmp	.+10     	; 0x5ae <__fixunssfsi+0x42>
     5a4:	c8 01       	movw	r24, r16
     5a6:	b7 01       	movw	r22, r14
     5a8:	c6 d3       	rcall	.+1932   	; 0xd36 <__fixsfsi>
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	b9 01       	movw	r22, r18
     5b0:	ca 01       	movw	r24, r20
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	08 95       	ret

000005bc <_fpadd_parts>:
     5bc:	a0 e0       	ldi	r26, 0x00	; 0
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	e3 ee       	ldi	r30, 0xE3	; 227
     5c2:	f2 e0       	ldi	r31, 0x02	; 2
     5c4:	25 c6       	rjmp	.+3146   	; 0x1210 <__prologue_saves__>
     5c6:	dc 01       	movw	r26, r24
     5c8:	2b 01       	movw	r4, r22
     5ca:	fa 01       	movw	r30, r20
     5cc:	9c 91       	ld	r25, X
     5ce:	92 30       	cpi	r25, 0x02	; 2
     5d0:	08 f4       	brcc	.+2      	; 0x5d4 <_fpadd_parts+0x18>
     5d2:	39 c1       	rjmp	.+626    	; 0x846 <_fpadd_parts+0x28a>
     5d4:	eb 01       	movw	r28, r22
     5d6:	88 81       	ld	r24, Y
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	08 f4       	brcc	.+2      	; 0x5de <_fpadd_parts+0x22>
     5dc:	33 c1       	rjmp	.+614    	; 0x844 <_fpadd_parts+0x288>
     5de:	94 30       	cpi	r25, 0x04	; 4
     5e0:	69 f4       	brne	.+26     	; 0x5fc <_fpadd_parts+0x40>
     5e2:	84 30       	cpi	r24, 0x04	; 4
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <_fpadd_parts+0x2c>
     5e6:	2f c1       	rjmp	.+606    	; 0x846 <_fpadd_parts+0x28a>
     5e8:	11 96       	adiw	r26, 0x01	; 1
     5ea:	9c 91       	ld	r25, X
     5ec:	11 97       	sbiw	r26, 0x01	; 1
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	98 17       	cp	r25, r24
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <_fpadd_parts+0x3a>
     5f4:	28 c1       	rjmp	.+592    	; 0x846 <_fpadd_parts+0x28a>
     5f6:	a0 e7       	ldi	r26, 0x70	; 112
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	25 c1       	rjmp	.+586    	; 0x846 <_fpadd_parts+0x28a>
     5fc:	84 30       	cpi	r24, 0x04	; 4
     5fe:	09 f4       	brne	.+2      	; 0x602 <_fpadd_parts+0x46>
     600:	21 c1       	rjmp	.+578    	; 0x844 <_fpadd_parts+0x288>
     602:	82 30       	cpi	r24, 0x02	; 2
     604:	a9 f4       	brne	.+42     	; 0x630 <_fpadd_parts+0x74>
     606:	92 30       	cpi	r25, 0x02	; 2
     608:	09 f0       	breq	.+2      	; 0x60c <_fpadd_parts+0x50>
     60a:	1d c1       	rjmp	.+570    	; 0x846 <_fpadd_parts+0x28a>
     60c:	9a 01       	movw	r18, r20
     60e:	ad 01       	movw	r20, r26
     610:	88 e0       	ldi	r24, 0x08	; 8
     612:	ea 01       	movw	r28, r20
     614:	09 90       	ld	r0, Y+
     616:	ae 01       	movw	r20, r28
     618:	e9 01       	movw	r28, r18
     61a:	09 92       	st	Y+, r0
     61c:	9e 01       	movw	r18, r28
     61e:	81 50       	subi	r24, 0x01	; 1
     620:	c1 f7       	brne	.-16     	; 0x612 <_fpadd_parts+0x56>
     622:	e2 01       	movw	r28, r4
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	11 96       	adiw	r26, 0x01	; 1
     628:	9c 91       	ld	r25, X
     62a:	89 23       	and	r24, r25
     62c:	81 83       	std	Z+1, r24	; 0x01
     62e:	08 c1       	rjmp	.+528    	; 0x840 <_fpadd_parts+0x284>
     630:	92 30       	cpi	r25, 0x02	; 2
     632:	09 f4       	brne	.+2      	; 0x636 <_fpadd_parts+0x7a>
     634:	07 c1       	rjmp	.+526    	; 0x844 <_fpadd_parts+0x288>
     636:	12 96       	adiw	r26, 0x02	; 2
     638:	2d 90       	ld	r2, X+
     63a:	3c 90       	ld	r3, X
     63c:	13 97       	sbiw	r26, 0x03	; 3
     63e:	eb 01       	movw	r28, r22
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	9b 81       	ldd	r25, Y+3	; 0x03
     644:	14 96       	adiw	r26, 0x04	; 4
     646:	ad 90       	ld	r10, X+
     648:	bd 90       	ld	r11, X+
     64a:	cd 90       	ld	r12, X+
     64c:	dc 90       	ld	r13, X
     64e:	17 97       	sbiw	r26, 0x07	; 7
     650:	ec 80       	ldd	r14, Y+4	; 0x04
     652:	fd 80       	ldd	r15, Y+5	; 0x05
     654:	0e 81       	ldd	r16, Y+6	; 0x06
     656:	1f 81       	ldd	r17, Y+7	; 0x07
     658:	91 01       	movw	r18, r2
     65a:	28 1b       	sub	r18, r24
     65c:	39 0b       	sbc	r19, r25
     65e:	b9 01       	movw	r22, r18
     660:	37 ff       	sbrs	r19, 7
     662:	04 c0       	rjmp	.+8      	; 0x66c <_fpadd_parts+0xb0>
     664:	66 27       	eor	r22, r22
     666:	77 27       	eor	r23, r23
     668:	62 1b       	sub	r22, r18
     66a:	73 0b       	sbc	r23, r19
     66c:	60 32       	cpi	r22, 0x20	; 32
     66e:	71 05       	cpc	r23, r1
     670:	0c f0       	brlt	.+2      	; 0x674 <_fpadd_parts+0xb8>
     672:	61 c0       	rjmp	.+194    	; 0x736 <_fpadd_parts+0x17a>
     674:	12 16       	cp	r1, r18
     676:	13 06       	cpc	r1, r19
     678:	6c f5       	brge	.+90     	; 0x6d4 <_fpadd_parts+0x118>
     67a:	37 01       	movw	r6, r14
     67c:	48 01       	movw	r8, r16
     67e:	06 2e       	mov	r0, r22
     680:	04 c0       	rjmp	.+8      	; 0x68a <_fpadd_parts+0xce>
     682:	96 94       	lsr	r9
     684:	87 94       	ror	r8
     686:	77 94       	ror	r7
     688:	67 94       	ror	r6
     68a:	0a 94       	dec	r0
     68c:	d2 f7       	brpl	.-12     	; 0x682 <_fpadd_parts+0xc6>
     68e:	21 e0       	ldi	r18, 0x01	; 1
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	04 c0       	rjmp	.+8      	; 0x6a0 <_fpadd_parts+0xe4>
     698:	22 0f       	add	r18, r18
     69a:	33 1f       	adc	r19, r19
     69c:	44 1f       	adc	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	6a 95       	dec	r22
     6a2:	d2 f7       	brpl	.-12     	; 0x698 <_fpadd_parts+0xdc>
     6a4:	21 50       	subi	r18, 0x01	; 1
     6a6:	30 40       	sbci	r19, 0x00	; 0
     6a8:	40 40       	sbci	r20, 0x00	; 0
     6aa:	50 40       	sbci	r21, 0x00	; 0
     6ac:	2e 21       	and	r18, r14
     6ae:	3f 21       	and	r19, r15
     6b0:	40 23       	and	r20, r16
     6b2:	51 23       	and	r21, r17
     6b4:	21 15       	cp	r18, r1
     6b6:	31 05       	cpc	r19, r1
     6b8:	41 05       	cpc	r20, r1
     6ba:	51 05       	cpc	r21, r1
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <_fpadd_parts+0x10a>
     6be:	21 e0       	ldi	r18, 0x01	; 1
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	79 01       	movw	r14, r18
     6c8:	8a 01       	movw	r16, r20
     6ca:	e6 28       	or	r14, r6
     6cc:	f7 28       	or	r15, r7
     6ce:	08 29       	or	r16, r8
     6d0:	19 29       	or	r17, r9
     6d2:	3c c0       	rjmp	.+120    	; 0x74c <_fpadd_parts+0x190>
     6d4:	23 2b       	or	r18, r19
     6d6:	d1 f1       	breq	.+116    	; 0x74c <_fpadd_parts+0x190>
     6d8:	26 0e       	add	r2, r22
     6da:	37 1e       	adc	r3, r23
     6dc:	35 01       	movw	r6, r10
     6de:	46 01       	movw	r8, r12
     6e0:	06 2e       	mov	r0, r22
     6e2:	04 c0       	rjmp	.+8      	; 0x6ec <_fpadd_parts+0x130>
     6e4:	96 94       	lsr	r9
     6e6:	87 94       	ror	r8
     6e8:	77 94       	ror	r7
     6ea:	67 94       	ror	r6
     6ec:	0a 94       	dec	r0
     6ee:	d2 f7       	brpl	.-12     	; 0x6e4 <_fpadd_parts+0x128>
     6f0:	21 e0       	ldi	r18, 0x01	; 1
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <_fpadd_parts+0x146>
     6fa:	22 0f       	add	r18, r18
     6fc:	33 1f       	adc	r19, r19
     6fe:	44 1f       	adc	r20, r20
     700:	55 1f       	adc	r21, r21
     702:	6a 95       	dec	r22
     704:	d2 f7       	brpl	.-12     	; 0x6fa <_fpadd_parts+0x13e>
     706:	21 50       	subi	r18, 0x01	; 1
     708:	30 40       	sbci	r19, 0x00	; 0
     70a:	40 40       	sbci	r20, 0x00	; 0
     70c:	50 40       	sbci	r21, 0x00	; 0
     70e:	2a 21       	and	r18, r10
     710:	3b 21       	and	r19, r11
     712:	4c 21       	and	r20, r12
     714:	5d 21       	and	r21, r13
     716:	21 15       	cp	r18, r1
     718:	31 05       	cpc	r19, r1
     71a:	41 05       	cpc	r20, r1
     71c:	51 05       	cpc	r21, r1
     71e:	21 f0       	breq	.+8      	; 0x728 <_fpadd_parts+0x16c>
     720:	21 e0       	ldi	r18, 0x01	; 1
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	59 01       	movw	r10, r18
     72a:	6a 01       	movw	r12, r20
     72c:	a6 28       	or	r10, r6
     72e:	b7 28       	or	r11, r7
     730:	c8 28       	or	r12, r8
     732:	d9 28       	or	r13, r9
     734:	0b c0       	rjmp	.+22     	; 0x74c <_fpadd_parts+0x190>
     736:	82 15       	cp	r24, r2
     738:	93 05       	cpc	r25, r3
     73a:	2c f0       	brlt	.+10     	; 0x746 <_fpadd_parts+0x18a>
     73c:	1c 01       	movw	r2, r24
     73e:	aa 24       	eor	r10, r10
     740:	bb 24       	eor	r11, r11
     742:	65 01       	movw	r12, r10
     744:	03 c0       	rjmp	.+6      	; 0x74c <_fpadd_parts+0x190>
     746:	ee 24       	eor	r14, r14
     748:	ff 24       	eor	r15, r15
     74a:	87 01       	movw	r16, r14
     74c:	11 96       	adiw	r26, 0x01	; 1
     74e:	9c 91       	ld	r25, X
     750:	d2 01       	movw	r26, r4
     752:	11 96       	adiw	r26, 0x01	; 1
     754:	8c 91       	ld	r24, X
     756:	98 17       	cp	r25, r24
     758:	09 f4       	brne	.+2      	; 0x75c <_fpadd_parts+0x1a0>
     75a:	45 c0       	rjmp	.+138    	; 0x7e6 <_fpadd_parts+0x22a>
     75c:	99 23       	and	r25, r25
     75e:	39 f0       	breq	.+14     	; 0x76e <_fpadd_parts+0x1b2>
     760:	a8 01       	movw	r20, r16
     762:	97 01       	movw	r18, r14
     764:	2a 19       	sub	r18, r10
     766:	3b 09       	sbc	r19, r11
     768:	4c 09       	sbc	r20, r12
     76a:	5d 09       	sbc	r21, r13
     76c:	06 c0       	rjmp	.+12     	; 0x77a <_fpadd_parts+0x1be>
     76e:	a6 01       	movw	r20, r12
     770:	95 01       	movw	r18, r10
     772:	2e 19       	sub	r18, r14
     774:	3f 09       	sbc	r19, r15
     776:	40 0b       	sbc	r20, r16
     778:	51 0b       	sbc	r21, r17
     77a:	57 fd       	sbrc	r21, 7
     77c:	08 c0       	rjmp	.+16     	; 0x78e <_fpadd_parts+0x1d2>
     77e:	11 82       	std	Z+1, r1	; 0x01
     780:	33 82       	std	Z+3, r3	; 0x03
     782:	22 82       	std	Z+2, r2	; 0x02
     784:	24 83       	std	Z+4, r18	; 0x04
     786:	35 83       	std	Z+5, r19	; 0x05
     788:	46 83       	std	Z+6, r20	; 0x06
     78a:	57 83       	std	Z+7, r21	; 0x07
     78c:	1d c0       	rjmp	.+58     	; 0x7c8 <_fpadd_parts+0x20c>
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	81 83       	std	Z+1, r24	; 0x01
     792:	33 82       	std	Z+3, r3	; 0x03
     794:	22 82       	std	Z+2, r2	; 0x02
     796:	88 27       	eor	r24, r24
     798:	99 27       	eor	r25, r25
     79a:	dc 01       	movw	r26, r24
     79c:	82 1b       	sub	r24, r18
     79e:	93 0b       	sbc	r25, r19
     7a0:	a4 0b       	sbc	r26, r20
     7a2:	b5 0b       	sbc	r27, r21
     7a4:	84 83       	std	Z+4, r24	; 0x04
     7a6:	95 83       	std	Z+5, r25	; 0x05
     7a8:	a6 83       	std	Z+6, r26	; 0x06
     7aa:	b7 83       	std	Z+7, r27	; 0x07
     7ac:	0d c0       	rjmp	.+26     	; 0x7c8 <_fpadd_parts+0x20c>
     7ae:	22 0f       	add	r18, r18
     7b0:	33 1f       	adc	r19, r19
     7b2:	44 1f       	adc	r20, r20
     7b4:	55 1f       	adc	r21, r21
     7b6:	24 83       	std	Z+4, r18	; 0x04
     7b8:	35 83       	std	Z+5, r19	; 0x05
     7ba:	46 83       	std	Z+6, r20	; 0x06
     7bc:	57 83       	std	Z+7, r21	; 0x07
     7be:	82 81       	ldd	r24, Z+2	; 0x02
     7c0:	93 81       	ldd	r25, Z+3	; 0x03
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	93 83       	std	Z+3, r25	; 0x03
     7c6:	82 83       	std	Z+2, r24	; 0x02
     7c8:	24 81       	ldd	r18, Z+4	; 0x04
     7ca:	35 81       	ldd	r19, Z+5	; 0x05
     7cc:	46 81       	ldd	r20, Z+6	; 0x06
     7ce:	57 81       	ldd	r21, Z+7	; 0x07
     7d0:	da 01       	movw	r26, r20
     7d2:	c9 01       	movw	r24, r18
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	a1 09       	sbc	r26, r1
     7d8:	b1 09       	sbc	r27, r1
     7da:	8f 5f       	subi	r24, 0xFF	; 255
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	af 4f       	sbci	r26, 0xFF	; 255
     7e0:	bf 43       	sbci	r27, 0x3F	; 63
     7e2:	28 f3       	brcs	.-54     	; 0x7ae <_fpadd_parts+0x1f2>
     7e4:	0b c0       	rjmp	.+22     	; 0x7fc <_fpadd_parts+0x240>
     7e6:	91 83       	std	Z+1, r25	; 0x01
     7e8:	33 82       	std	Z+3, r3	; 0x03
     7ea:	22 82       	std	Z+2, r2	; 0x02
     7ec:	ea 0c       	add	r14, r10
     7ee:	fb 1c       	adc	r15, r11
     7f0:	0c 1d       	adc	r16, r12
     7f2:	1d 1d       	adc	r17, r13
     7f4:	e4 82       	std	Z+4, r14	; 0x04
     7f6:	f5 82       	std	Z+5, r15	; 0x05
     7f8:	06 83       	std	Z+6, r16	; 0x06
     7fa:	17 83       	std	Z+7, r17	; 0x07
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	80 83       	st	Z, r24
     800:	24 81       	ldd	r18, Z+4	; 0x04
     802:	35 81       	ldd	r19, Z+5	; 0x05
     804:	46 81       	ldd	r20, Z+6	; 0x06
     806:	57 81       	ldd	r21, Z+7	; 0x07
     808:	57 ff       	sbrs	r21, 7
     80a:	1a c0       	rjmp	.+52     	; 0x840 <_fpadd_parts+0x284>
     80c:	c9 01       	movw	r24, r18
     80e:	aa 27       	eor	r26, r26
     810:	97 fd       	sbrc	r25, 7
     812:	a0 95       	com	r26
     814:	ba 2f       	mov	r27, r26
     816:	81 70       	andi	r24, 0x01	; 1
     818:	90 70       	andi	r25, 0x00	; 0
     81a:	a0 70       	andi	r26, 0x00	; 0
     81c:	b0 70       	andi	r27, 0x00	; 0
     81e:	56 95       	lsr	r21
     820:	47 95       	ror	r20
     822:	37 95       	ror	r19
     824:	27 95       	ror	r18
     826:	82 2b       	or	r24, r18
     828:	93 2b       	or	r25, r19
     82a:	a4 2b       	or	r26, r20
     82c:	b5 2b       	or	r27, r21
     82e:	84 83       	std	Z+4, r24	; 0x04
     830:	95 83       	std	Z+5, r25	; 0x05
     832:	a6 83       	std	Z+6, r26	; 0x06
     834:	b7 83       	std	Z+7, r27	; 0x07
     836:	82 81       	ldd	r24, Z+2	; 0x02
     838:	93 81       	ldd	r25, Z+3	; 0x03
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	93 83       	std	Z+3, r25	; 0x03
     83e:	82 83       	std	Z+2, r24	; 0x02
     840:	df 01       	movw	r26, r30
     842:	01 c0       	rjmp	.+2      	; 0x846 <_fpadd_parts+0x28a>
     844:	d2 01       	movw	r26, r4
     846:	cd 01       	movw	r24, r26
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	e2 e1       	ldi	r30, 0x12	; 18
     84e:	fc c4       	rjmp	.+2552   	; 0x1248 <__epilogue_restores__>

00000850 <__subsf3>:
     850:	a0 e2       	ldi	r26, 0x20	; 32
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	ed e2       	ldi	r30, 0x2D	; 45
     856:	f4 e0       	ldi	r31, 0x04	; 4
     858:	e7 c4       	rjmp	.+2510   	; 0x1228 <__prologue_saves__+0x18>
     85a:	69 83       	std	Y+1, r22	; 0x01
     85c:	7a 83       	std	Y+2, r23	; 0x02
     85e:	8b 83       	std	Y+3, r24	; 0x03
     860:	9c 83       	std	Y+4, r25	; 0x04
     862:	2d 83       	std	Y+5, r18	; 0x05
     864:	3e 83       	std	Y+6, r19	; 0x06
     866:	4f 83       	std	Y+7, r20	; 0x07
     868:	58 87       	std	Y+8, r21	; 0x08
     86a:	e9 e0       	ldi	r30, 0x09	; 9
     86c:	ee 2e       	mov	r14, r30
     86e:	f1 2c       	mov	r15, r1
     870:	ec 0e       	add	r14, r28
     872:	fd 1e       	adc	r15, r29
     874:	ce 01       	movw	r24, r28
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	b7 01       	movw	r22, r14
     87a:	d2 d3       	rcall	.+1956   	; 0x1020 <__unpack_f>
     87c:	8e 01       	movw	r16, r28
     87e:	0f 5e       	subi	r16, 0xEF	; 239
     880:	1f 4f       	sbci	r17, 0xFF	; 255
     882:	ce 01       	movw	r24, r28
     884:	05 96       	adiw	r24, 0x05	; 5
     886:	b8 01       	movw	r22, r16
     888:	cb d3       	rcall	.+1942   	; 0x1020 <__unpack_f>
     88a:	8a 89       	ldd	r24, Y+18	; 0x12
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	89 27       	eor	r24, r25
     890:	8a 8b       	std	Y+18, r24	; 0x12
     892:	c7 01       	movw	r24, r14
     894:	b8 01       	movw	r22, r16
     896:	ae 01       	movw	r20, r28
     898:	47 5e       	subi	r20, 0xE7	; 231
     89a:	5f 4f       	sbci	r21, 0xFF	; 255
     89c:	8f de       	rcall	.-738    	; 0x5bc <_fpadd_parts>
     89e:	eb d2       	rcall	.+1494   	; 0xe76 <__pack_f>
     8a0:	a0 96       	adiw	r28, 0x20	; 32
     8a2:	e6 e0       	ldi	r30, 0x06	; 6
     8a4:	dd c4       	rjmp	.+2490   	; 0x1260 <__epilogue_restores__+0x18>

000008a6 <__addsf3>:
     8a6:	a0 e2       	ldi	r26, 0x20	; 32
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e8 e5       	ldi	r30, 0x58	; 88
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	bc c4       	rjmp	.+2424   	; 0x1228 <__prologue_saves__+0x18>
     8b0:	69 83       	std	Y+1, r22	; 0x01
     8b2:	7a 83       	std	Y+2, r23	; 0x02
     8b4:	8b 83       	std	Y+3, r24	; 0x03
     8b6:	9c 83       	std	Y+4, r25	; 0x04
     8b8:	2d 83       	std	Y+5, r18	; 0x05
     8ba:	3e 83       	std	Y+6, r19	; 0x06
     8bc:	4f 83       	std	Y+7, r20	; 0x07
     8be:	58 87       	std	Y+8, r21	; 0x08
     8c0:	f9 e0       	ldi	r31, 0x09	; 9
     8c2:	ef 2e       	mov	r14, r31
     8c4:	f1 2c       	mov	r15, r1
     8c6:	ec 0e       	add	r14, r28
     8c8:	fd 1e       	adc	r15, r29
     8ca:	ce 01       	movw	r24, r28
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	b7 01       	movw	r22, r14
     8d0:	a7 d3       	rcall	.+1870   	; 0x1020 <__unpack_f>
     8d2:	8e 01       	movw	r16, r28
     8d4:	0f 5e       	subi	r16, 0xEF	; 239
     8d6:	1f 4f       	sbci	r17, 0xFF	; 255
     8d8:	ce 01       	movw	r24, r28
     8da:	05 96       	adiw	r24, 0x05	; 5
     8dc:	b8 01       	movw	r22, r16
     8de:	a0 d3       	rcall	.+1856   	; 0x1020 <__unpack_f>
     8e0:	c7 01       	movw	r24, r14
     8e2:	b8 01       	movw	r22, r16
     8e4:	ae 01       	movw	r20, r28
     8e6:	47 5e       	subi	r20, 0xE7	; 231
     8e8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ea:	68 de       	rcall	.-816    	; 0x5bc <_fpadd_parts>
     8ec:	c4 d2       	rcall	.+1416   	; 0xe76 <__pack_f>
     8ee:	a0 96       	adiw	r28, 0x20	; 32
     8f0:	e6 e0       	ldi	r30, 0x06	; 6
     8f2:	b6 c4       	rjmp	.+2412   	; 0x1260 <__epilogue_restores__+0x18>

000008f4 <__mulsf3>:
     8f4:	a0 e2       	ldi	r26, 0x20	; 32
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	ef e7       	ldi	r30, 0x7F	; 127
     8fa:	f4 e0       	ldi	r31, 0x04	; 4
     8fc:	89 c4       	rjmp	.+2322   	; 0x1210 <__prologue_saves__>
     8fe:	69 83       	std	Y+1, r22	; 0x01
     900:	7a 83       	std	Y+2, r23	; 0x02
     902:	8b 83       	std	Y+3, r24	; 0x03
     904:	9c 83       	std	Y+4, r25	; 0x04
     906:	2d 83       	std	Y+5, r18	; 0x05
     908:	3e 83       	std	Y+6, r19	; 0x06
     90a:	4f 83       	std	Y+7, r20	; 0x07
     90c:	58 87       	std	Y+8, r21	; 0x08
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	be 01       	movw	r22, r28
     914:	67 5f       	subi	r22, 0xF7	; 247
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	83 d3       	rcall	.+1798   	; 0x1020 <__unpack_f>
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	be 01       	movw	r22, r28
     920:	6f 5e       	subi	r22, 0xEF	; 239
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	7d d3       	rcall	.+1786   	; 0x1020 <__unpack_f>
     926:	99 85       	ldd	r25, Y+9	; 0x09
     928:	92 30       	cpi	r25, 0x02	; 2
     92a:	88 f0       	brcs	.+34     	; 0x94e <__mulsf3+0x5a>
     92c:	89 89       	ldd	r24, Y+17	; 0x11
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	c8 f0       	brcs	.+50     	; 0x964 <__mulsf3+0x70>
     932:	94 30       	cpi	r25, 0x04	; 4
     934:	19 f4       	brne	.+6      	; 0x93c <__mulsf3+0x48>
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	51 f4       	brne	.+20     	; 0x94e <__mulsf3+0x5a>
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__mulsf3+0x50>
     93c:	84 30       	cpi	r24, 0x04	; 4
     93e:	29 f4       	brne	.+10     	; 0x94a <__mulsf3+0x56>
     940:	92 30       	cpi	r25, 0x02	; 2
     942:	81 f4       	brne	.+32     	; 0x964 <__mulsf3+0x70>
     944:	80 e7       	ldi	r24, 0x70	; 112
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	c6 c0       	rjmp	.+396    	; 0xad6 <__mulsf3+0x1e2>
     94a:	92 30       	cpi	r25, 0x02	; 2
     94c:	49 f4       	brne	.+18     	; 0x960 <__mulsf3+0x6c>
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	9a 85       	ldd	r25, Y+10	; 0x0a
     952:	8a 89       	ldd	r24, Y+18	; 0x12
     954:	98 13       	cpse	r25, r24
     956:	21 e0       	ldi	r18, 0x01	; 1
     958:	2a 87       	std	Y+10, r18	; 0x0a
     95a:	ce 01       	movw	r24, r28
     95c:	09 96       	adiw	r24, 0x09	; 9
     95e:	bb c0       	rjmp	.+374    	; 0xad6 <__mulsf3+0x1e2>
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	49 f4       	brne	.+18     	; 0x976 <__mulsf3+0x82>
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	9a 85       	ldd	r25, Y+10	; 0x0a
     968:	8a 89       	ldd	r24, Y+18	; 0x12
     96a:	98 13       	cpse	r25, r24
     96c:	21 e0       	ldi	r18, 0x01	; 1
     96e:	2a 8b       	std	Y+18, r18	; 0x12
     970:	ce 01       	movw	r24, r28
     972:	41 96       	adiw	r24, 0x11	; 17
     974:	b0 c0       	rjmp	.+352    	; 0xad6 <__mulsf3+0x1e2>
     976:	2d 84       	ldd	r2, Y+13	; 0x0d
     978:	3e 84       	ldd	r3, Y+14	; 0x0e
     97a:	4f 84       	ldd	r4, Y+15	; 0x0f
     97c:	58 88       	ldd	r5, Y+16	; 0x10
     97e:	6d 88       	ldd	r6, Y+21	; 0x15
     980:	7e 88       	ldd	r7, Y+22	; 0x16
     982:	8f 88       	ldd	r8, Y+23	; 0x17
     984:	98 8c       	ldd	r9, Y+24	; 0x18
     986:	ee 24       	eor	r14, r14
     988:	ff 24       	eor	r15, r15
     98a:	87 01       	movw	r16, r14
     98c:	aa 24       	eor	r10, r10
     98e:	bb 24       	eor	r11, r11
     990:	65 01       	movw	r12, r10
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	e0 e0       	ldi	r30, 0x00	; 0
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	c1 01       	movw	r24, r2
     9a0:	81 70       	andi	r24, 0x01	; 1
     9a2:	90 70       	andi	r25, 0x00	; 0
     9a4:	89 2b       	or	r24, r25
     9a6:	e9 f0       	breq	.+58     	; 0x9e2 <__mulsf3+0xee>
     9a8:	e6 0c       	add	r14, r6
     9aa:	f7 1c       	adc	r15, r7
     9ac:	08 1d       	adc	r16, r8
     9ae:	19 1d       	adc	r17, r9
     9b0:	9a 01       	movw	r18, r20
     9b2:	ab 01       	movw	r20, r22
     9b4:	2a 0d       	add	r18, r10
     9b6:	3b 1d       	adc	r19, r11
     9b8:	4c 1d       	adc	r20, r12
     9ba:	5d 1d       	adc	r21, r13
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	e6 14       	cp	r14, r6
     9c6:	f7 04       	cpc	r15, r7
     9c8:	08 05       	cpc	r16, r8
     9ca:	19 05       	cpc	r17, r9
     9cc:	20 f4       	brcc	.+8      	; 0x9d6 <__mulsf3+0xe2>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	ba 01       	movw	r22, r20
     9d8:	a9 01       	movw	r20, r18
     9da:	48 0f       	add	r20, r24
     9dc:	59 1f       	adc	r21, r25
     9de:	6a 1f       	adc	r22, r26
     9e0:	7b 1f       	adc	r23, r27
     9e2:	aa 0c       	add	r10, r10
     9e4:	bb 1c       	adc	r11, r11
     9e6:	cc 1c       	adc	r12, r12
     9e8:	dd 1c       	adc	r13, r13
     9ea:	97 fe       	sbrs	r9, 7
     9ec:	08 c0       	rjmp	.+16     	; 0x9fe <__mulsf3+0x10a>
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	a0 e0       	ldi	r26, 0x00	; 0
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	a8 2a       	or	r10, r24
     9f8:	b9 2a       	or	r11, r25
     9fa:	ca 2a       	or	r12, r26
     9fc:	db 2a       	or	r13, r27
     9fe:	31 96       	adiw	r30, 0x01	; 1
     a00:	e0 32       	cpi	r30, 0x20	; 32
     a02:	f1 05       	cpc	r31, r1
     a04:	49 f0       	breq	.+18     	; 0xa18 <__mulsf3+0x124>
     a06:	66 0c       	add	r6, r6
     a08:	77 1c       	adc	r7, r7
     a0a:	88 1c       	adc	r8, r8
     a0c:	99 1c       	adc	r9, r9
     a0e:	56 94       	lsr	r5
     a10:	47 94       	ror	r4
     a12:	37 94       	ror	r3
     a14:	27 94       	ror	r2
     a16:	c3 cf       	rjmp	.-122    	; 0x99e <__mulsf3+0xaa>
     a18:	fa 85       	ldd	r31, Y+10	; 0x0a
     a1a:	ea 89       	ldd	r30, Y+18	; 0x12
     a1c:	2b 89       	ldd	r18, Y+19	; 0x13
     a1e:	3c 89       	ldd	r19, Y+20	; 0x14
     a20:	8b 85       	ldd	r24, Y+11	; 0x0b
     a22:	9c 85       	ldd	r25, Y+12	; 0x0c
     a24:	28 0f       	add	r18, r24
     a26:	39 1f       	adc	r19, r25
     a28:	2e 5f       	subi	r18, 0xFE	; 254
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	17 c0       	rjmp	.+46     	; 0xa5c <__mulsf3+0x168>
     a2e:	ca 01       	movw	r24, r20
     a30:	81 70       	andi	r24, 0x01	; 1
     a32:	90 70       	andi	r25, 0x00	; 0
     a34:	89 2b       	or	r24, r25
     a36:	61 f0       	breq	.+24     	; 0xa50 <__mulsf3+0x15c>
     a38:	16 95       	lsr	r17
     a3a:	07 95       	ror	r16
     a3c:	f7 94       	ror	r15
     a3e:	e7 94       	ror	r14
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e8       	ldi	r27, 0x80	; 128
     a48:	e8 2a       	or	r14, r24
     a4a:	f9 2a       	or	r15, r25
     a4c:	0a 2b       	or	r16, r26
     a4e:	1b 2b       	or	r17, r27
     a50:	76 95       	lsr	r23
     a52:	67 95       	ror	r22
     a54:	57 95       	ror	r21
     a56:	47 95       	ror	r20
     a58:	2f 5f       	subi	r18, 0xFF	; 255
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	77 fd       	sbrc	r23, 7
     a5e:	e7 cf       	rjmp	.-50     	; 0xa2e <__mulsf3+0x13a>
     a60:	0c c0       	rjmp	.+24     	; 0xa7a <__mulsf3+0x186>
     a62:	44 0f       	add	r20, r20
     a64:	55 1f       	adc	r21, r21
     a66:	66 1f       	adc	r22, r22
     a68:	77 1f       	adc	r23, r23
     a6a:	17 fd       	sbrc	r17, 7
     a6c:	41 60       	ori	r20, 0x01	; 1
     a6e:	ee 0c       	add	r14, r14
     a70:	ff 1c       	adc	r15, r15
     a72:	00 1f       	adc	r16, r16
     a74:	11 1f       	adc	r17, r17
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	30 40       	sbci	r19, 0x00	; 0
     a7a:	40 30       	cpi	r20, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	59 07       	cpc	r21, r25
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	69 07       	cpc	r22, r25
     a84:	90 e4       	ldi	r25, 0x40	; 64
     a86:	79 07       	cpc	r23, r25
     a88:	60 f3       	brcs	.-40     	; 0xa62 <__mulsf3+0x16e>
     a8a:	2b 8f       	std	Y+27, r18	; 0x1b
     a8c:	3c 8f       	std	Y+28, r19	; 0x1c
     a8e:	db 01       	movw	r26, r22
     a90:	ca 01       	movw	r24, r20
     a92:	8f 77       	andi	r24, 0x7F	; 127
     a94:	90 70       	andi	r25, 0x00	; 0
     a96:	a0 70       	andi	r26, 0x00	; 0
     a98:	b0 70       	andi	r27, 0x00	; 0
     a9a:	80 34       	cpi	r24, 0x40	; 64
     a9c:	91 05       	cpc	r25, r1
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	61 f4       	brne	.+24     	; 0xabc <__mulsf3+0x1c8>
     aa4:	47 fd       	sbrc	r20, 7
     aa6:	0a c0       	rjmp	.+20     	; 0xabc <__mulsf3+0x1c8>
     aa8:	e1 14       	cp	r14, r1
     aaa:	f1 04       	cpc	r15, r1
     aac:	01 05       	cpc	r16, r1
     aae:	11 05       	cpc	r17, r1
     ab0:	29 f0       	breq	.+10     	; 0xabc <__mulsf3+0x1c8>
     ab2:	40 5c       	subi	r20, 0xC0	; 192
     ab4:	5f 4f       	sbci	r21, 0xFF	; 255
     ab6:	6f 4f       	sbci	r22, 0xFF	; 255
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	40 78       	andi	r20, 0x80	; 128
     abc:	1a 8e       	std	Y+26, r1	; 0x1a
     abe:	fe 17       	cp	r31, r30
     ac0:	11 f0       	breq	.+4      	; 0xac6 <__mulsf3+0x1d2>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	8a 8f       	std	Y+26, r24	; 0x1a
     ac6:	4d 8f       	std	Y+29, r20	; 0x1d
     ac8:	5e 8f       	std	Y+30, r21	; 0x1e
     aca:	6f 8f       	std	Y+31, r22	; 0x1f
     acc:	78 a3       	std	Y+32, r23	; 0x20
     ace:	83 e0       	ldi	r24, 0x03	; 3
     ad0:	89 8f       	std	Y+25, r24	; 0x19
     ad2:	ce 01       	movw	r24, r28
     ad4:	49 96       	adiw	r24, 0x19	; 25
     ad6:	cf d1       	rcall	.+926    	; 0xe76 <__pack_f>
     ad8:	a0 96       	adiw	r28, 0x20	; 32
     ada:	e2 e1       	ldi	r30, 0x12	; 18
     adc:	b5 c3       	rjmp	.+1898   	; 0x1248 <__epilogue_restores__>

00000ade <__divsf3>:
     ade:	a8 e1       	ldi	r26, 0x18	; 24
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	e4 e7       	ldi	r30, 0x74	; 116
     ae4:	f5 e0       	ldi	r31, 0x05	; 5
     ae6:	9c c3       	rjmp	.+1848   	; 0x1220 <__prologue_saves__+0x10>
     ae8:	69 83       	std	Y+1, r22	; 0x01
     aea:	7a 83       	std	Y+2, r23	; 0x02
     aec:	8b 83       	std	Y+3, r24	; 0x03
     aee:	9c 83       	std	Y+4, r25	; 0x04
     af0:	2d 83       	std	Y+5, r18	; 0x05
     af2:	3e 83       	std	Y+6, r19	; 0x06
     af4:	4f 83       	std	Y+7, r20	; 0x07
     af6:	58 87       	std	Y+8, r21	; 0x08
     af8:	b9 e0       	ldi	r27, 0x09	; 9
     afa:	eb 2e       	mov	r14, r27
     afc:	f1 2c       	mov	r15, r1
     afe:	ec 0e       	add	r14, r28
     b00:	fd 1e       	adc	r15, r29
     b02:	ce 01       	movw	r24, r28
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	b7 01       	movw	r22, r14
     b08:	8b d2       	rcall	.+1302   	; 0x1020 <__unpack_f>
     b0a:	8e 01       	movw	r16, r28
     b0c:	0f 5e       	subi	r16, 0xEF	; 239
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	ce 01       	movw	r24, r28
     b12:	05 96       	adiw	r24, 0x05	; 5
     b14:	b8 01       	movw	r22, r16
     b16:	84 d2       	rcall	.+1288   	; 0x1020 <__unpack_f>
     b18:	29 85       	ldd	r18, Y+9	; 0x09
     b1a:	22 30       	cpi	r18, 0x02	; 2
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <__divsf3+0x42>
     b1e:	7e c0       	rjmp	.+252    	; 0xc1c <__divsf3+0x13e>
     b20:	39 89       	ldd	r19, Y+17	; 0x11
     b22:	32 30       	cpi	r19, 0x02	; 2
     b24:	10 f4       	brcc	.+4      	; 0xb2a <__divsf3+0x4c>
     b26:	b8 01       	movw	r22, r16
     b28:	7c c0       	rjmp	.+248    	; 0xc22 <__divsf3+0x144>
     b2a:	8a 85       	ldd	r24, Y+10	; 0x0a
     b2c:	9a 89       	ldd	r25, Y+18	; 0x12
     b2e:	89 27       	eor	r24, r25
     b30:	8a 87       	std	Y+10, r24	; 0x0a
     b32:	24 30       	cpi	r18, 0x04	; 4
     b34:	11 f0       	breq	.+4      	; 0xb3a <__divsf3+0x5c>
     b36:	22 30       	cpi	r18, 0x02	; 2
     b38:	31 f4       	brne	.+12     	; 0xb46 <__divsf3+0x68>
     b3a:	23 17       	cp	r18, r19
     b3c:	09 f0       	breq	.+2      	; 0xb40 <__divsf3+0x62>
     b3e:	6e c0       	rjmp	.+220    	; 0xc1c <__divsf3+0x13e>
     b40:	60 e7       	ldi	r22, 0x70	; 112
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	6e c0       	rjmp	.+220    	; 0xc22 <__divsf3+0x144>
     b46:	34 30       	cpi	r19, 0x04	; 4
     b48:	39 f4       	brne	.+14     	; 0xb58 <__divsf3+0x7a>
     b4a:	1d 86       	std	Y+13, r1	; 0x0d
     b4c:	1e 86       	std	Y+14, r1	; 0x0e
     b4e:	1f 86       	std	Y+15, r1	; 0x0f
     b50:	18 8a       	std	Y+16, r1	; 0x10
     b52:	1c 86       	std	Y+12, r1	; 0x0c
     b54:	1b 86       	std	Y+11, r1	; 0x0b
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <__divsf3+0x82>
     b58:	32 30       	cpi	r19, 0x02	; 2
     b5a:	21 f4       	brne	.+8      	; 0xb64 <__divsf3+0x86>
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	89 87       	std	Y+9, r24	; 0x09
     b60:	b7 01       	movw	r22, r14
     b62:	5f c0       	rjmp	.+190    	; 0xc22 <__divsf3+0x144>
     b64:	2b 85       	ldd	r18, Y+11	; 0x0b
     b66:	3c 85       	ldd	r19, Y+12	; 0x0c
     b68:	8b 89       	ldd	r24, Y+19	; 0x13
     b6a:	9c 89       	ldd	r25, Y+20	; 0x14
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	3c 87       	std	Y+12, r19	; 0x0c
     b72:	2b 87       	std	Y+11, r18	; 0x0b
     b74:	ed 84       	ldd	r14, Y+13	; 0x0d
     b76:	fe 84       	ldd	r15, Y+14	; 0x0e
     b78:	0f 85       	ldd	r16, Y+15	; 0x0f
     b7a:	18 89       	ldd	r17, Y+16	; 0x10
     b7c:	ad 88       	ldd	r10, Y+21	; 0x15
     b7e:	be 88       	ldd	r11, Y+22	; 0x16
     b80:	cf 88       	ldd	r12, Y+23	; 0x17
     b82:	d8 8c       	ldd	r13, Y+24	; 0x18
     b84:	ea 14       	cp	r14, r10
     b86:	fb 04       	cpc	r15, r11
     b88:	0c 05       	cpc	r16, r12
     b8a:	1d 05       	cpc	r17, r13
     b8c:	40 f4       	brcc	.+16     	; 0xb9e <__divsf3+0xc0>
     b8e:	ee 0c       	add	r14, r14
     b90:	ff 1c       	adc	r15, r15
     b92:	00 1f       	adc	r16, r16
     b94:	11 1f       	adc	r17, r17
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	30 40       	sbci	r19, 0x00	; 0
     b9a:	3c 87       	std	Y+12, r19	; 0x0c
     b9c:	2b 87       	std	Y+11, r18	; 0x0b
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	a0 e0       	ldi	r26, 0x00	; 0
     bac:	b0 e4       	ldi	r27, 0x40	; 64
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	ea 14       	cp	r14, r10
     bb4:	fb 04       	cpc	r15, r11
     bb6:	0c 05       	cpc	r16, r12
     bb8:	1d 05       	cpc	r17, r13
     bba:	40 f0       	brcs	.+16     	; 0xbcc <__divsf3+0xee>
     bbc:	28 2b       	or	r18, r24
     bbe:	39 2b       	or	r19, r25
     bc0:	4a 2b       	or	r20, r26
     bc2:	5b 2b       	or	r21, r27
     bc4:	ea 18       	sub	r14, r10
     bc6:	fb 08       	sbc	r15, r11
     bc8:	0c 09       	sbc	r16, r12
     bca:	1d 09       	sbc	r17, r13
     bcc:	b6 95       	lsr	r27
     bce:	a7 95       	ror	r26
     bd0:	97 95       	ror	r25
     bd2:	87 95       	ror	r24
     bd4:	ee 0c       	add	r14, r14
     bd6:	ff 1c       	adc	r15, r15
     bd8:	00 1f       	adc	r16, r16
     bda:	11 1f       	adc	r17, r17
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	6f 31       	cpi	r22, 0x1F	; 31
     be2:	71 05       	cpc	r23, r1
     be4:	31 f7       	brne	.-52     	; 0xbb2 <__divsf3+0xd4>
     be6:	da 01       	movw	r26, r20
     be8:	c9 01       	movw	r24, r18
     bea:	8f 77       	andi	r24, 0x7F	; 127
     bec:	90 70       	andi	r25, 0x00	; 0
     bee:	a0 70       	andi	r26, 0x00	; 0
     bf0:	b0 70       	andi	r27, 0x00	; 0
     bf2:	80 34       	cpi	r24, 0x40	; 64
     bf4:	91 05       	cpc	r25, r1
     bf6:	a1 05       	cpc	r26, r1
     bf8:	b1 05       	cpc	r27, r1
     bfa:	61 f4       	brne	.+24     	; 0xc14 <__divsf3+0x136>
     bfc:	27 fd       	sbrc	r18, 7
     bfe:	0a c0       	rjmp	.+20     	; 0xc14 <__divsf3+0x136>
     c00:	e1 14       	cp	r14, r1
     c02:	f1 04       	cpc	r15, r1
     c04:	01 05       	cpc	r16, r1
     c06:	11 05       	cpc	r17, r1
     c08:	29 f0       	breq	.+10     	; 0xc14 <__divsf3+0x136>
     c0a:	20 5c       	subi	r18, 0xC0	; 192
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	4f 4f       	sbci	r20, 0xFF	; 255
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	20 78       	andi	r18, 0x80	; 128
     c14:	2d 87       	std	Y+13, r18	; 0x0d
     c16:	3e 87       	std	Y+14, r19	; 0x0e
     c18:	4f 87       	std	Y+15, r20	; 0x0f
     c1a:	58 8b       	std	Y+16, r21	; 0x10
     c1c:	be 01       	movw	r22, r28
     c1e:	67 5f       	subi	r22, 0xF7	; 247
     c20:	7f 4f       	sbci	r23, 0xFF	; 255
     c22:	cb 01       	movw	r24, r22
     c24:	28 d1       	rcall	.+592    	; 0xe76 <__pack_f>
     c26:	68 96       	adiw	r28, 0x18	; 24
     c28:	ea e0       	ldi	r30, 0x0A	; 10
     c2a:	16 c3       	rjmp	.+1580   	; 0x1258 <__epilogue_restores__+0x10>

00000c2c <__gesf2>:
     c2c:	a8 e1       	ldi	r26, 0x18	; 24
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	eb e1       	ldi	r30, 0x1B	; 27
     c32:	f6 e0       	ldi	r31, 0x06	; 6
     c34:	f9 c2       	rjmp	.+1522   	; 0x1228 <__prologue_saves__+0x18>
     c36:	69 83       	std	Y+1, r22	; 0x01
     c38:	7a 83       	std	Y+2, r23	; 0x02
     c3a:	8b 83       	std	Y+3, r24	; 0x03
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	2d 83       	std	Y+5, r18	; 0x05
     c40:	3e 83       	std	Y+6, r19	; 0x06
     c42:	4f 83       	std	Y+7, r20	; 0x07
     c44:	58 87       	std	Y+8, r21	; 0x08
     c46:	89 e0       	ldi	r24, 0x09	; 9
     c48:	e8 2e       	mov	r14, r24
     c4a:	f1 2c       	mov	r15, r1
     c4c:	ec 0e       	add	r14, r28
     c4e:	fd 1e       	adc	r15, r29
     c50:	ce 01       	movw	r24, r28
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	b7 01       	movw	r22, r14
     c56:	e4 d1       	rcall	.+968    	; 0x1020 <__unpack_f>
     c58:	8e 01       	movw	r16, r28
     c5a:	0f 5e       	subi	r16, 0xEF	; 239
     c5c:	1f 4f       	sbci	r17, 0xFF	; 255
     c5e:	ce 01       	movw	r24, r28
     c60:	05 96       	adiw	r24, 0x05	; 5
     c62:	b8 01       	movw	r22, r16
     c64:	dd d1       	rcall	.+954    	; 0x1020 <__unpack_f>
     c66:	89 85       	ldd	r24, Y+9	; 0x09
     c68:	82 30       	cpi	r24, 0x02	; 2
     c6a:	38 f0       	brcs	.+14     	; 0xc7a <__gesf2+0x4e>
     c6c:	89 89       	ldd	r24, Y+17	; 0x11
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	20 f0       	brcs	.+8      	; 0xc7a <__gesf2+0x4e>
     c72:	c7 01       	movw	r24, r14
     c74:	b8 01       	movw	r22, r16
     c76:	4c d2       	rcall	.+1176   	; 0x1110 <__fpcmp_parts_f>
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <__gesf2+0x50>
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	68 96       	adiw	r28, 0x18	; 24
     c7e:	e6 e0       	ldi	r30, 0x06	; 6
     c80:	ef c2       	rjmp	.+1502   	; 0x1260 <__epilogue_restores__+0x18>

00000c82 <__floatsisf>:
     c82:	a8 e0       	ldi	r26, 0x08	; 8
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e6 e4       	ldi	r30, 0x46	; 70
     c88:	f6 e0       	ldi	r31, 0x06	; 6
     c8a:	cb c2       	rjmp	.+1430   	; 0x1222 <__prologue_saves__+0x12>
     c8c:	9b 01       	movw	r18, r22
     c8e:	ac 01       	movw	r20, r24
     c90:	83 e0       	ldi	r24, 0x03	; 3
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	da 01       	movw	r26, r20
     c96:	c9 01       	movw	r24, r18
     c98:	88 27       	eor	r24, r24
     c9a:	b7 fd       	sbrc	r27, 7
     c9c:	83 95       	inc	r24
     c9e:	99 27       	eor	r25, r25
     ca0:	aa 27       	eor	r26, r26
     ca2:	bb 27       	eor	r27, r27
     ca4:	b8 2e       	mov	r11, r24
     ca6:	21 15       	cp	r18, r1
     ca8:	31 05       	cpc	r19, r1
     caa:	41 05       	cpc	r20, r1
     cac:	51 05       	cpc	r21, r1
     cae:	19 f4       	brne	.+6      	; 0xcb6 <__floatsisf+0x34>
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	39 c0       	rjmp	.+114    	; 0xd28 <__floatsisf+0xa6>
     cb6:	88 23       	and	r24, r24
     cb8:	a9 f0       	breq	.+42     	; 0xce4 <__floatsisf+0x62>
     cba:	20 30       	cpi	r18, 0x00	; 0
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	38 07       	cpc	r19, r24
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	48 07       	cpc	r20, r24
     cc4:	80 e8       	ldi	r24, 0x80	; 128
     cc6:	58 07       	cpc	r21, r24
     cc8:	29 f4       	brne	.+10     	; 0xcd4 <__floatsisf+0x52>
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	9f ec       	ldi	r25, 0xCF	; 207
     cd2:	2e c0       	rjmp	.+92     	; 0xd30 <__floatsisf+0xae>
     cd4:	ee 24       	eor	r14, r14
     cd6:	ff 24       	eor	r15, r15
     cd8:	87 01       	movw	r16, r14
     cda:	e2 1a       	sub	r14, r18
     cdc:	f3 0a       	sbc	r15, r19
     cde:	04 0b       	sbc	r16, r20
     ce0:	15 0b       	sbc	r17, r21
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <__floatsisf+0x66>
     ce4:	79 01       	movw	r14, r18
     ce6:	8a 01       	movw	r16, r20
     ce8:	8e e1       	ldi	r24, 0x1E	; 30
     cea:	c8 2e       	mov	r12, r24
     cec:	d1 2c       	mov	r13, r1
     cee:	dc 82       	std	Y+4, r13	; 0x04
     cf0:	cb 82       	std	Y+3, r12	; 0x03
     cf2:	ed 82       	std	Y+5, r14	; 0x05
     cf4:	fe 82       	std	Y+6, r15	; 0x06
     cf6:	0f 83       	std	Y+7, r16	; 0x07
     cf8:	18 87       	std	Y+8, r17	; 0x08
     cfa:	c8 01       	movw	r24, r16
     cfc:	b7 01       	movw	r22, r14
     cfe:	6c d0       	rcall	.+216    	; 0xdd8 <__clzsi2>
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	18 16       	cp	r1, r24
     d04:	19 06       	cpc	r1, r25
     d06:	84 f4       	brge	.+32     	; 0xd28 <__floatsisf+0xa6>
     d08:	08 2e       	mov	r0, r24
     d0a:	04 c0       	rjmp	.+8      	; 0xd14 <__floatsisf+0x92>
     d0c:	ee 0c       	add	r14, r14
     d0e:	ff 1c       	adc	r15, r15
     d10:	00 1f       	adc	r16, r16
     d12:	11 1f       	adc	r17, r17
     d14:	0a 94       	dec	r0
     d16:	d2 f7       	brpl	.-12     	; 0xd0c <__floatsisf+0x8a>
     d18:	ed 82       	std	Y+5, r14	; 0x05
     d1a:	fe 82       	std	Y+6, r15	; 0x06
     d1c:	0f 83       	std	Y+7, r16	; 0x07
     d1e:	18 87       	std	Y+8, r17	; 0x08
     d20:	c8 1a       	sub	r12, r24
     d22:	d9 0a       	sbc	r13, r25
     d24:	dc 82       	std	Y+4, r13	; 0x04
     d26:	cb 82       	std	Y+3, r12	; 0x03
     d28:	ba 82       	std	Y+2, r11	; 0x02
     d2a:	ce 01       	movw	r24, r28
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	a3 d0       	rcall	.+326    	; 0xe76 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	e9 e0       	ldi	r30, 0x09	; 9
     d34:	92 c2       	rjmp	.+1316   	; 0x125a <__epilogue_restores__+0x12>

00000d36 <__fixsfsi>:
     d36:	ac e0       	ldi	r26, 0x0C	; 12
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e0 ea       	ldi	r30, 0xA0	; 160
     d3c:	f6 e0       	ldi	r31, 0x06	; 6
     d3e:	78 c2       	rjmp	.+1264   	; 0x1230 <__prologue_saves__+0x20>
     d40:	69 83       	std	Y+1, r22	; 0x01
     d42:	7a 83       	std	Y+2, r23	; 0x02
     d44:	8b 83       	std	Y+3, r24	; 0x03
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	ce 01       	movw	r24, r28
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	be 01       	movw	r22, r28
     d4e:	6b 5f       	subi	r22, 0xFB	; 251
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	66 d1       	rcall	.+716    	; 0x1020 <__unpack_f>
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	61 f1       	breq	.+88     	; 0xdb2 <__fixsfsi+0x7c>
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	50 f1       	brcs	.+84     	; 0xdb2 <__fixsfsi+0x7c>
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	21 f4       	brne	.+8      	; 0xd6a <__fixsfsi+0x34>
     d62:	8e 81       	ldd	r24, Y+6	; 0x06
     d64:	88 23       	and	r24, r24
     d66:	51 f1       	breq	.+84     	; 0xdbc <__fixsfsi+0x86>
     d68:	2e c0       	rjmp	.+92     	; 0xdc6 <__fixsfsi+0x90>
     d6a:	2f 81       	ldd	r18, Y+7	; 0x07
     d6c:	38 85       	ldd	r19, Y+8	; 0x08
     d6e:	37 fd       	sbrc	r19, 7
     d70:	20 c0       	rjmp	.+64     	; 0xdb2 <__fixsfsi+0x7c>
     d72:	6e 81       	ldd	r22, Y+6	; 0x06
     d74:	2f 31       	cpi	r18, 0x1F	; 31
     d76:	31 05       	cpc	r19, r1
     d78:	1c f0       	brlt	.+6      	; 0xd80 <__fixsfsi+0x4a>
     d7a:	66 23       	and	r22, r22
     d7c:	f9 f0       	breq	.+62     	; 0xdbc <__fixsfsi+0x86>
     d7e:	23 c0       	rjmp	.+70     	; 0xdc6 <__fixsfsi+0x90>
     d80:	8e e1       	ldi	r24, 0x1E	; 30
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	82 1b       	sub	r24, r18
     d86:	93 0b       	sbc	r25, r19
     d88:	29 85       	ldd	r18, Y+9	; 0x09
     d8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d8c:	4b 85       	ldd	r20, Y+11	; 0x0b
     d8e:	5c 85       	ldd	r21, Y+12	; 0x0c
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <__fixsfsi+0x64>
     d92:	56 95       	lsr	r21
     d94:	47 95       	ror	r20
     d96:	37 95       	ror	r19
     d98:	27 95       	ror	r18
     d9a:	8a 95       	dec	r24
     d9c:	d2 f7       	brpl	.-12     	; 0xd92 <__fixsfsi+0x5c>
     d9e:	66 23       	and	r22, r22
     da0:	b1 f0       	breq	.+44     	; 0xdce <__fixsfsi+0x98>
     da2:	50 95       	com	r21
     da4:	40 95       	com	r20
     da6:	30 95       	com	r19
     da8:	21 95       	neg	r18
     daa:	3f 4f       	sbci	r19, 0xFF	; 255
     dac:	4f 4f       	sbci	r20, 0xFF	; 255
     dae:	5f 4f       	sbci	r21, 0xFF	; 255
     db0:	0e c0       	rjmp	.+28     	; 0xdce <__fixsfsi+0x98>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	09 c0       	rjmp	.+18     	; 0xdce <__fixsfsi+0x98>
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	3f ef       	ldi	r19, 0xFF	; 255
     dc0:	4f ef       	ldi	r20, 0xFF	; 255
     dc2:	5f e7       	ldi	r21, 0x7F	; 127
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <__fixsfsi+0x98>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	50 e8       	ldi	r21, 0x80	; 128
     dce:	b9 01       	movw	r22, r18
     dd0:	ca 01       	movw	r24, r20
     dd2:	2c 96       	adiw	r28, 0x0c	; 12
     dd4:	e2 e0       	ldi	r30, 0x02	; 2
     dd6:	48 c2       	rjmp	.+1168   	; 0x1268 <__epilogue_restores__+0x20>

00000dd8 <__clzsi2>:
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	7b 01       	movw	r14, r22
     de2:	8c 01       	movw	r16, r24
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	e8 16       	cp	r14, r24
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	f8 06       	cpc	r15, r24
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	08 07       	cpc	r16, r24
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	18 07       	cpc	r17, r24
     df4:	88 f4       	brcc	.+34     	; 0xe18 <__clzsi2+0x40>
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	e8 16       	cp	r14, r24
     dfa:	f1 04       	cpc	r15, r1
     dfc:	01 05       	cpc	r16, r1
     dfe:	11 05       	cpc	r17, r1
     e00:	31 f0       	breq	.+12     	; 0xe0e <__clzsi2+0x36>
     e02:	28 f0       	brcs	.+10     	; 0xe0e <__clzsi2+0x36>
     e04:	88 e0       	ldi	r24, 0x08	; 8
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	a0 e0       	ldi	r26, 0x00	; 0
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	17 c0       	rjmp	.+46     	; 0xe3c <__clzsi2+0x64>
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	a0 e0       	ldi	r26, 0x00	; 0
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	12 c0       	rjmp	.+36     	; 0xe3c <__clzsi2+0x64>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	e8 16       	cp	r14, r24
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	f8 06       	cpc	r15, r24
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	08 07       	cpc	r16, r24
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	18 07       	cpc	r17, r24
     e28:	28 f0       	brcs	.+10     	; 0xe34 <__clzsi2+0x5c>
     e2a:	88 e1       	ldi	r24, 0x18	; 24
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__clzsi2+0x64>
     e34:	80 e1       	ldi	r24, 0x10	; 16
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a0 e0       	ldi	r26, 0x00	; 0
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	20 e2       	ldi	r18, 0x20	; 32
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	28 1b       	sub	r18, r24
     e46:	39 0b       	sbc	r19, r25
     e48:	4a 0b       	sbc	r20, r26
     e4a:	5b 0b       	sbc	r21, r27
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <__clzsi2+0x7e>
     e4e:	16 95       	lsr	r17
     e50:	07 95       	ror	r16
     e52:	f7 94       	ror	r15
     e54:	e7 94       	ror	r14
     e56:	8a 95       	dec	r24
     e58:	d2 f7       	brpl	.-12     	; 0xe4e <__clzsi2+0x76>
     e5a:	f7 01       	movw	r30, r14
     e5c:	e8 58       	subi	r30, 0x88	; 136
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	80 81       	ld	r24, Z
     e62:	28 1b       	sub	r18, r24
     e64:	31 09       	sbc	r19, r1
     e66:	41 09       	sbc	r20, r1
     e68:	51 09       	sbc	r21, r1
     e6a:	c9 01       	movw	r24, r18
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	08 95       	ret

00000e76 <__pack_f>:
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	fc 01       	movw	r30, r24
     e82:	e4 80       	ldd	r14, Z+4	; 0x04
     e84:	f5 80       	ldd	r15, Z+5	; 0x05
     e86:	06 81       	ldd	r16, Z+6	; 0x06
     e88:	17 81       	ldd	r17, Z+7	; 0x07
     e8a:	d1 80       	ldd	r13, Z+1	; 0x01
     e8c:	80 81       	ld	r24, Z
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	48 f4       	brcc	.+18     	; 0xea4 <__pack_f+0x2e>
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e1       	ldi	r26, 0x10	; 16
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e8 2a       	or	r14, r24
     e9c:	f9 2a       	or	r15, r25
     e9e:	0a 2b       	or	r16, r26
     ea0:	1b 2b       	or	r17, r27
     ea2:	a5 c0       	rjmp	.+330    	; 0xfee <__pack_f+0x178>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	09 f4       	brne	.+2      	; 0xeaa <__pack_f+0x34>
     ea8:	9f c0       	rjmp	.+318    	; 0xfe8 <__pack_f+0x172>
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	21 f4       	brne	.+8      	; 0xeb6 <__pack_f+0x40>
     eae:	ee 24       	eor	r14, r14
     eb0:	ff 24       	eor	r15, r15
     eb2:	87 01       	movw	r16, r14
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <__pack_f+0x4a>
     eb6:	e1 14       	cp	r14, r1
     eb8:	f1 04       	cpc	r15, r1
     eba:	01 05       	cpc	r16, r1
     ebc:	11 05       	cpc	r17, r1
     ebe:	19 f4       	brne	.+6      	; 0xec6 <__pack_f+0x50>
     ec0:	e0 e0       	ldi	r30, 0x00	; 0
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	96 c0       	rjmp	.+300    	; 0xff2 <__pack_f+0x17c>
     ec6:	62 81       	ldd	r22, Z+2	; 0x02
     ec8:	73 81       	ldd	r23, Z+3	; 0x03
     eca:	9f ef       	ldi	r25, 0xFF	; 255
     ecc:	62 38       	cpi	r22, 0x82	; 130
     ece:	79 07       	cpc	r23, r25
     ed0:	0c f0       	brlt	.+2      	; 0xed4 <__pack_f+0x5e>
     ed2:	5b c0       	rjmp	.+182    	; 0xf8a <__pack_f+0x114>
     ed4:	22 e8       	ldi	r18, 0x82	; 130
     ed6:	3f ef       	ldi	r19, 0xFF	; 255
     ed8:	26 1b       	sub	r18, r22
     eda:	37 0b       	sbc	r19, r23
     edc:	2a 31       	cpi	r18, 0x1A	; 26
     ede:	31 05       	cpc	r19, r1
     ee0:	2c f0       	brlt	.+10     	; 0xeec <__pack_f+0x76>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e0       	ldi	r20, 0x00	; 0
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	2a c0       	rjmp	.+84     	; 0xf40 <__pack_f+0xca>
     eec:	b8 01       	movw	r22, r16
     eee:	a7 01       	movw	r20, r14
     ef0:	02 2e       	mov	r0, r18
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__pack_f+0x86>
     ef4:	76 95       	lsr	r23
     ef6:	67 95       	ror	r22
     ef8:	57 95       	ror	r21
     efa:	47 95       	ror	r20
     efc:	0a 94       	dec	r0
     efe:	d2 f7       	brpl	.-12     	; 0xef4 <__pack_f+0x7e>
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <__pack_f+0x9c>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	aa 1f       	adc	r26, r26
     f10:	bb 1f       	adc	r27, r27
     f12:	2a 95       	dec	r18
     f14:	d2 f7       	brpl	.-12     	; 0xf0a <__pack_f+0x94>
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	a1 09       	sbc	r26, r1
     f1a:	b1 09       	sbc	r27, r1
     f1c:	8e 21       	and	r24, r14
     f1e:	9f 21       	and	r25, r15
     f20:	a0 23       	and	r26, r16
     f22:	b1 23       	and	r27, r17
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	a1 05       	cpc	r26, r1
     f28:	b1 05       	cpc	r27, r1
     f2a:	21 f0       	breq	.+8      	; 0xf34 <__pack_f+0xbe>
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	a0 e0       	ldi	r26, 0x00	; 0
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	9a 01       	movw	r18, r20
     f36:	ab 01       	movw	r20, r22
     f38:	28 2b       	or	r18, r24
     f3a:	39 2b       	or	r19, r25
     f3c:	4a 2b       	or	r20, r26
     f3e:	5b 2b       	or	r21, r27
     f40:	da 01       	movw	r26, r20
     f42:	c9 01       	movw	r24, r18
     f44:	8f 77       	andi	r24, 0x7F	; 127
     f46:	90 70       	andi	r25, 0x00	; 0
     f48:	a0 70       	andi	r26, 0x00	; 0
     f4a:	b0 70       	andi	r27, 0x00	; 0
     f4c:	80 34       	cpi	r24, 0x40	; 64
     f4e:	91 05       	cpc	r25, r1
     f50:	a1 05       	cpc	r26, r1
     f52:	b1 05       	cpc	r27, r1
     f54:	39 f4       	brne	.+14     	; 0xf64 <__pack_f+0xee>
     f56:	27 ff       	sbrs	r18, 7
     f58:	09 c0       	rjmp	.+18     	; 0xf6c <__pack_f+0xf6>
     f5a:	20 5c       	subi	r18, 0xC0	; 192
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	4f 4f       	sbci	r20, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <__pack_f+0xf6>
     f64:	21 5c       	subi	r18, 0xC1	; 193
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	4f 4f       	sbci	r20, 0xFF	; 255
     f6a:	5f 4f       	sbci	r21, 0xFF	; 255
     f6c:	e0 e0       	ldi	r30, 0x00	; 0
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	20 30       	cpi	r18, 0x00	; 0
     f72:	a0 e0       	ldi	r26, 0x00	; 0
     f74:	3a 07       	cpc	r19, r26
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	4a 07       	cpc	r20, r26
     f7a:	a0 e4       	ldi	r26, 0x40	; 64
     f7c:	5a 07       	cpc	r21, r26
     f7e:	10 f0       	brcs	.+4      	; 0xf84 <__pack_f+0x10e>
     f80:	e1 e0       	ldi	r30, 0x01	; 1
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	79 01       	movw	r14, r18
     f86:	8a 01       	movw	r16, r20
     f88:	27 c0       	rjmp	.+78     	; 0xfd8 <__pack_f+0x162>
     f8a:	60 38       	cpi	r22, 0x80	; 128
     f8c:	71 05       	cpc	r23, r1
     f8e:	64 f5       	brge	.+88     	; 0xfe8 <__pack_f+0x172>
     f90:	fb 01       	movw	r30, r22
     f92:	e1 58       	subi	r30, 0x81	; 129
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	d8 01       	movw	r26, r16
     f98:	c7 01       	movw	r24, r14
     f9a:	8f 77       	andi	r24, 0x7F	; 127
     f9c:	90 70       	andi	r25, 0x00	; 0
     f9e:	a0 70       	andi	r26, 0x00	; 0
     fa0:	b0 70       	andi	r27, 0x00	; 0
     fa2:	80 34       	cpi	r24, 0x40	; 64
     fa4:	91 05       	cpc	r25, r1
     fa6:	a1 05       	cpc	r26, r1
     fa8:	b1 05       	cpc	r27, r1
     faa:	39 f4       	brne	.+14     	; 0xfba <__pack_f+0x144>
     fac:	e7 fe       	sbrs	r14, 7
     fae:	0d c0       	rjmp	.+26     	; 0xfca <__pack_f+0x154>
     fb0:	80 e4       	ldi	r24, 0x40	; 64
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a0 e0       	ldi	r26, 0x00	; 0
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <__pack_f+0x14c>
     fba:	8f e3       	ldi	r24, 0x3F	; 63
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e8 0e       	add	r14, r24
     fc4:	f9 1e       	adc	r15, r25
     fc6:	0a 1f       	adc	r16, r26
     fc8:	1b 1f       	adc	r17, r27
     fca:	17 ff       	sbrs	r17, 7
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <__pack_f+0x162>
     fce:	16 95       	lsr	r17
     fd0:	07 95       	ror	r16
     fd2:	f7 94       	ror	r15
     fd4:	e7 94       	ror	r14
     fd6:	31 96       	adiw	r30, 0x01	; 1
     fd8:	87 e0       	ldi	r24, 0x07	; 7
     fda:	16 95       	lsr	r17
     fdc:	07 95       	ror	r16
     fde:	f7 94       	ror	r15
     fe0:	e7 94       	ror	r14
     fe2:	8a 95       	dec	r24
     fe4:	d1 f7       	brne	.-12     	; 0xfda <__pack_f+0x164>
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <__pack_f+0x17c>
     fe8:	ee 24       	eor	r14, r14
     fea:	ff 24       	eor	r15, r15
     fec:	87 01       	movw	r16, r14
     fee:	ef ef       	ldi	r30, 0xFF	; 255
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	6e 2f       	mov	r22, r30
     ff4:	67 95       	ror	r22
     ff6:	66 27       	eor	r22, r22
     ff8:	67 95       	ror	r22
     ffa:	90 2f       	mov	r25, r16
     ffc:	9f 77       	andi	r25, 0x7F	; 127
     ffe:	d7 94       	ror	r13
    1000:	dd 24       	eor	r13, r13
    1002:	d7 94       	ror	r13
    1004:	8e 2f       	mov	r24, r30
    1006:	86 95       	lsr	r24
    1008:	49 2f       	mov	r20, r25
    100a:	46 2b       	or	r20, r22
    100c:	58 2f       	mov	r21, r24
    100e:	5d 29       	or	r21, r13
    1010:	b7 01       	movw	r22, r14
    1012:	ca 01       	movw	r24, r20
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	08 95       	ret

00001020 <__unpack_f>:
    1020:	fc 01       	movw	r30, r24
    1022:	db 01       	movw	r26, r22
    1024:	40 81       	ld	r20, Z
    1026:	51 81       	ldd	r21, Z+1	; 0x01
    1028:	22 81       	ldd	r18, Z+2	; 0x02
    102a:	62 2f       	mov	r22, r18
    102c:	6f 77       	andi	r22, 0x7F	; 127
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	22 1f       	adc	r18, r18
    1032:	22 27       	eor	r18, r18
    1034:	22 1f       	adc	r18, r18
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	89 2f       	mov	r24, r25
    103a:	88 0f       	add	r24, r24
    103c:	82 2b       	or	r24, r18
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	99 1f       	adc	r25, r25
    1044:	99 27       	eor	r25, r25
    1046:	99 1f       	adc	r25, r25
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	9c 93       	st	X, r25
    104c:	11 97       	sbiw	r26, 0x01	; 1
    104e:	21 15       	cp	r18, r1
    1050:	31 05       	cpc	r19, r1
    1052:	a9 f5       	brne	.+106    	; 0x10be <__unpack_f+0x9e>
    1054:	41 15       	cp	r20, r1
    1056:	51 05       	cpc	r21, r1
    1058:	61 05       	cpc	r22, r1
    105a:	71 05       	cpc	r23, r1
    105c:	11 f4       	brne	.+4      	; 0x1062 <__unpack_f+0x42>
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	37 c0       	rjmp	.+110    	; 0x10d0 <__unpack_f+0xb0>
    1062:	82 e8       	ldi	r24, 0x82	; 130
    1064:	9f ef       	ldi	r25, 0xFF	; 255
    1066:	13 96       	adiw	r26, 0x03	; 3
    1068:	9c 93       	st	X, r25
    106a:	8e 93       	st	-X, r24
    106c:	12 97       	sbiw	r26, 0x02	; 2
    106e:	9a 01       	movw	r18, r20
    1070:	ab 01       	movw	r20, r22
    1072:	67 e0       	ldi	r22, 0x07	; 7
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	44 1f       	adc	r20, r20
    107a:	55 1f       	adc	r21, r21
    107c:	6a 95       	dec	r22
    107e:	d1 f7       	brne	.-12     	; 0x1074 <__unpack_f+0x54>
    1080:	83 e0       	ldi	r24, 0x03	; 3
    1082:	8c 93       	st	X, r24
    1084:	0d c0       	rjmp	.+26     	; 0x10a0 <__unpack_f+0x80>
    1086:	22 0f       	add	r18, r18
    1088:	33 1f       	adc	r19, r19
    108a:	44 1f       	adc	r20, r20
    108c:	55 1f       	adc	r21, r21
    108e:	12 96       	adiw	r26, 0x02	; 2
    1090:	8d 91       	ld	r24, X+
    1092:	9c 91       	ld	r25, X
    1094:	13 97       	sbiw	r26, 0x03	; 3
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	9c 93       	st	X, r25
    109c:	8e 93       	st	-X, r24
    109e:	12 97       	sbiw	r26, 0x02	; 2
    10a0:	20 30       	cpi	r18, 0x00	; 0
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	38 07       	cpc	r19, r24
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	48 07       	cpc	r20, r24
    10aa:	80 e4       	ldi	r24, 0x40	; 64
    10ac:	58 07       	cpc	r21, r24
    10ae:	58 f3       	brcs	.-42     	; 0x1086 <__unpack_f+0x66>
    10b0:	14 96       	adiw	r26, 0x04	; 4
    10b2:	2d 93       	st	X+, r18
    10b4:	3d 93       	st	X+, r19
    10b6:	4d 93       	st	X+, r20
    10b8:	5c 93       	st	X, r21
    10ba:	17 97       	sbiw	r26, 0x07	; 7
    10bc:	08 95       	ret
    10be:	2f 3f       	cpi	r18, 0xFF	; 255
    10c0:	31 05       	cpc	r19, r1
    10c2:	79 f4       	brne	.+30     	; 0x10e2 <__unpack_f+0xc2>
    10c4:	41 15       	cp	r20, r1
    10c6:	51 05       	cpc	r21, r1
    10c8:	61 05       	cpc	r22, r1
    10ca:	71 05       	cpc	r23, r1
    10cc:	19 f4       	brne	.+6      	; 0x10d4 <__unpack_f+0xb4>
    10ce:	84 e0       	ldi	r24, 0x04	; 4
    10d0:	8c 93       	st	X, r24
    10d2:	08 95       	ret
    10d4:	64 ff       	sbrs	r22, 4
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <__unpack_f+0xbe>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	8c 93       	st	X, r24
    10dc:	12 c0       	rjmp	.+36     	; 0x1102 <__unpack_f+0xe2>
    10de:	1c 92       	st	X, r1
    10e0:	10 c0       	rjmp	.+32     	; 0x1102 <__unpack_f+0xe2>
    10e2:	2f 57       	subi	r18, 0x7F	; 127
    10e4:	30 40       	sbci	r19, 0x00	; 0
    10e6:	13 96       	adiw	r26, 0x03	; 3
    10e8:	3c 93       	st	X, r19
    10ea:	2e 93       	st	-X, r18
    10ec:	12 97       	sbiw	r26, 0x02	; 2
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	8c 93       	st	X, r24
    10f2:	87 e0       	ldi	r24, 0x07	; 7
    10f4:	44 0f       	add	r20, r20
    10f6:	55 1f       	adc	r21, r21
    10f8:	66 1f       	adc	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	8a 95       	dec	r24
    10fe:	d1 f7       	brne	.-12     	; 0x10f4 <__unpack_f+0xd4>
    1100:	70 64       	ori	r23, 0x40	; 64
    1102:	14 96       	adiw	r26, 0x04	; 4
    1104:	4d 93       	st	X+, r20
    1106:	5d 93       	st	X+, r21
    1108:	6d 93       	st	X+, r22
    110a:	7c 93       	st	X, r23
    110c:	17 97       	sbiw	r26, 0x07	; 7
    110e:	08 95       	ret

00001110 <__fpcmp_parts_f>:
    1110:	1f 93       	push	r17
    1112:	dc 01       	movw	r26, r24
    1114:	fb 01       	movw	r30, r22
    1116:	9c 91       	ld	r25, X
    1118:	92 30       	cpi	r25, 0x02	; 2
    111a:	08 f4       	brcc	.+2      	; 0x111e <__fpcmp_parts_f+0xe>
    111c:	47 c0       	rjmp	.+142    	; 0x11ac <__fpcmp_parts_f+0x9c>
    111e:	80 81       	ld	r24, Z
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	08 f4       	brcc	.+2      	; 0x1126 <__fpcmp_parts_f+0x16>
    1124:	43 c0       	rjmp	.+134    	; 0x11ac <__fpcmp_parts_f+0x9c>
    1126:	94 30       	cpi	r25, 0x04	; 4
    1128:	51 f4       	brne	.+20     	; 0x113e <__fpcmp_parts_f+0x2e>
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	1c 91       	ld	r17, X
    112e:	84 30       	cpi	r24, 0x04	; 4
    1130:	99 f5       	brne	.+102    	; 0x1198 <__fpcmp_parts_f+0x88>
    1132:	81 81       	ldd	r24, Z+1	; 0x01
    1134:	68 2f       	mov	r22, r24
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	61 1b       	sub	r22, r17
    113a:	71 09       	sbc	r23, r1
    113c:	3f c0       	rjmp	.+126    	; 0x11bc <__fpcmp_parts_f+0xac>
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	21 f0       	breq	.+8      	; 0x114a <__fpcmp_parts_f+0x3a>
    1142:	92 30       	cpi	r25, 0x02	; 2
    1144:	31 f4       	brne	.+12     	; 0x1152 <__fpcmp_parts_f+0x42>
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	b9 f1       	breq	.+110    	; 0x11b8 <__fpcmp_parts_f+0xa8>
    114a:	81 81       	ldd	r24, Z+1	; 0x01
    114c:	88 23       	and	r24, r24
    114e:	89 f1       	breq	.+98     	; 0x11b2 <__fpcmp_parts_f+0xa2>
    1150:	2d c0       	rjmp	.+90     	; 0x11ac <__fpcmp_parts_f+0x9c>
    1152:	11 96       	adiw	r26, 0x01	; 1
    1154:	1c 91       	ld	r17, X
    1156:	11 97       	sbiw	r26, 0x01	; 1
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	f1 f0       	breq	.+60     	; 0x1198 <__fpcmp_parts_f+0x88>
    115c:	81 81       	ldd	r24, Z+1	; 0x01
    115e:	18 17       	cp	r17, r24
    1160:	d9 f4       	brne	.+54     	; 0x1198 <__fpcmp_parts_f+0x88>
    1162:	12 96       	adiw	r26, 0x02	; 2
    1164:	2d 91       	ld	r18, X+
    1166:	3c 91       	ld	r19, X
    1168:	13 97       	sbiw	r26, 0x03	; 3
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	82 17       	cp	r24, r18
    1170:	93 07       	cpc	r25, r19
    1172:	94 f0       	brlt	.+36     	; 0x1198 <__fpcmp_parts_f+0x88>
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	bc f0       	brlt	.+46     	; 0x11a8 <__fpcmp_parts_f+0x98>
    117a:	14 96       	adiw	r26, 0x04	; 4
    117c:	8d 91       	ld	r24, X+
    117e:	9d 91       	ld	r25, X+
    1180:	0d 90       	ld	r0, X+
    1182:	bc 91       	ld	r27, X
    1184:	a0 2d       	mov	r26, r0
    1186:	24 81       	ldd	r18, Z+4	; 0x04
    1188:	35 81       	ldd	r19, Z+5	; 0x05
    118a:	46 81       	ldd	r20, Z+6	; 0x06
    118c:	57 81       	ldd	r21, Z+7	; 0x07
    118e:	28 17       	cp	r18, r24
    1190:	39 07       	cpc	r19, r25
    1192:	4a 07       	cpc	r20, r26
    1194:	5b 07       	cpc	r21, r27
    1196:	18 f4       	brcc	.+6      	; 0x119e <__fpcmp_parts_f+0x8e>
    1198:	11 23       	and	r17, r17
    119a:	41 f0       	breq	.+16     	; 0x11ac <__fpcmp_parts_f+0x9c>
    119c:	0a c0       	rjmp	.+20     	; 0x11b2 <__fpcmp_parts_f+0xa2>
    119e:	82 17       	cp	r24, r18
    11a0:	93 07       	cpc	r25, r19
    11a2:	a4 07       	cpc	r26, r20
    11a4:	b5 07       	cpc	r27, r21
    11a6:	40 f4       	brcc	.+16     	; 0x11b8 <__fpcmp_parts_f+0xa8>
    11a8:	11 23       	and	r17, r17
    11aa:	19 f0       	breq	.+6      	; 0x11b2 <__fpcmp_parts_f+0xa2>
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	05 c0       	rjmp	.+10     	; 0x11bc <__fpcmp_parts_f+0xac>
    11b2:	6f ef       	ldi	r22, 0xFF	; 255
    11b4:	7f ef       	ldi	r23, 0xFF	; 255
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <__fpcmp_parts_f+0xac>
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	cb 01       	movw	r24, r22
    11be:	1f 91       	pop	r17
    11c0:	08 95       	ret

000011c2 <__divmodhi4>:
    11c2:	97 fb       	bst	r25, 7
    11c4:	09 2e       	mov	r0, r25
    11c6:	07 26       	eor	r0, r23
    11c8:	0a d0       	rcall	.+20     	; 0x11de <__divmodhi4_neg1>
    11ca:	77 fd       	sbrc	r23, 7
    11cc:	04 d0       	rcall	.+8      	; 0x11d6 <__divmodhi4_neg2>
    11ce:	0c d0       	rcall	.+24     	; 0x11e8 <__udivmodhi4>
    11d0:	06 d0       	rcall	.+12     	; 0x11de <__divmodhi4_neg1>
    11d2:	00 20       	and	r0, r0
    11d4:	1a f4       	brpl	.+6      	; 0x11dc <__divmodhi4_exit>

000011d6 <__divmodhi4_neg2>:
    11d6:	70 95       	com	r23
    11d8:	61 95       	neg	r22
    11da:	7f 4f       	sbci	r23, 0xFF	; 255

000011dc <__divmodhi4_exit>:
    11dc:	08 95       	ret

000011de <__divmodhi4_neg1>:
    11de:	f6 f7       	brtc	.-4      	; 0x11dc <__divmodhi4_exit>
    11e0:	90 95       	com	r25
    11e2:	81 95       	neg	r24
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	08 95       	ret

000011e8 <__udivmodhi4>:
    11e8:	aa 1b       	sub	r26, r26
    11ea:	bb 1b       	sub	r27, r27
    11ec:	51 e1       	ldi	r21, 0x11	; 17
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <__udivmodhi4_ep>

000011f0 <__udivmodhi4_loop>:
    11f0:	aa 1f       	adc	r26, r26
    11f2:	bb 1f       	adc	r27, r27
    11f4:	a6 17       	cp	r26, r22
    11f6:	b7 07       	cpc	r27, r23
    11f8:	10 f0       	brcs	.+4      	; 0x11fe <__udivmodhi4_ep>
    11fa:	a6 1b       	sub	r26, r22
    11fc:	b7 0b       	sbc	r27, r23

000011fe <__udivmodhi4_ep>:
    11fe:	88 1f       	adc	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	5a 95       	dec	r21
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <__udivmodhi4_loop>
    1206:	80 95       	com	r24
    1208:	90 95       	com	r25
    120a:	bc 01       	movw	r22, r24
    120c:	cd 01       	movw	r24, r26
    120e:	08 95       	ret

00001210 <__prologue_saves__>:
    1210:	2f 92       	push	r2
    1212:	3f 92       	push	r3
    1214:	4f 92       	push	r4
    1216:	5f 92       	push	r5
    1218:	6f 92       	push	r6
    121a:	7f 92       	push	r7
    121c:	8f 92       	push	r8
    121e:	9f 92       	push	r9
    1220:	af 92       	push	r10
    1222:	bf 92       	push	r11
    1224:	cf 92       	push	r12
    1226:	df 92       	push	r13
    1228:	ef 92       	push	r14
    122a:	ff 92       	push	r15
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	ca 1b       	sub	r28, r26
    123a:	db 0b       	sbc	r29, r27
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	09 94       	ijmp

00001248 <__epilogue_restores__>:
    1248:	2a 88       	ldd	r2, Y+18	; 0x12
    124a:	39 88       	ldd	r3, Y+17	; 0x11
    124c:	48 88       	ldd	r4, Y+16	; 0x10
    124e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1250:	6e 84       	ldd	r6, Y+14	; 0x0e
    1252:	7d 84       	ldd	r7, Y+13	; 0x0d
    1254:	8c 84       	ldd	r8, Y+12	; 0x0c
    1256:	9b 84       	ldd	r9, Y+11	; 0x0b
    1258:	aa 84       	ldd	r10, Y+10	; 0x0a
    125a:	b9 84       	ldd	r11, Y+9	; 0x09
    125c:	c8 84       	ldd	r12, Y+8	; 0x08
    125e:	df 80       	ldd	r13, Y+7	; 0x07
    1260:	ee 80       	ldd	r14, Y+6	; 0x06
    1262:	fd 80       	ldd	r15, Y+5	; 0x05
    1264:	0c 81       	ldd	r16, Y+4	; 0x04
    1266:	1b 81       	ldd	r17, Y+3	; 0x03
    1268:	aa 81       	ldd	r26, Y+2	; 0x02
    126a:	b9 81       	ldd	r27, Y+1	; 0x01
    126c:	ce 0f       	add	r28, r30
    126e:	d1 1d       	adc	r29, r1
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	ed 01       	movw	r28, r26
    127c:	08 95       	ret

0000127e <_exit>:
    127e:	f8 94       	cli

00001280 <__stop_program>:
    1280:	ff cf       	rjmp	.-2      	; 0x1280 <__stop_program>
