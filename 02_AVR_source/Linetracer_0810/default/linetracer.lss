
linetracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  00001c96  00001d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800240  00800240  00001e6a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000025bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004ea  00000000  00000000  0000277d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002c1a  00000000  00000000  00002c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000143f  00000000  00000000  00005881  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000202d  00000000  00000000  00006cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000340  00000000  00000000  00008cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000614  00000000  00000000  00009030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001162  00000000  00000000  00009644  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000006ec  00000000  00000000  0000a7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000080  00000000  00000000  0000ae92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__vector_1>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e9       	ldi	r30, 0x96	; 150
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 34       	cpi	r26, 0x40	; 64
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a0 e4       	ldi	r26, 0x40	; 64
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3c       	cpi	r26, 0xC6	; 198
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 04 01 	call	0x208	; 0x208 <main>
      c6:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_PORT>:
#define sbi(PORTX,BitX) PORTX|=(1<<BitX)	// Bit set function
#define cbi(PORTX,BitX)	PORTX&=~(1<<BitX)	// Bit clear fuction

/* PORTA initialize*/
void init_PORT(void) {
	DDRA = 0xFF; // IR_sense emitter
      ce:	8f ef       	ldi	r24, 0xFF	; 255
      d0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF; // , PWM_right = PB5(OC1B), PWM_left = PB6(OC1A)
      d2:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF; // inputA_R = PC3, inputB_R=PC4, inputA_L = PC6, inputB_L=PC5
      d4:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFE; // SW=PD0, LED0=PD2, LED1=PD4
      d6:	9e ef       	ldi	r25, 0xFE	; 254
      d8:	91 bb       	out	0x11, r25	; 17
	DDRE = 0x0E; // USART RxD0=PE0, TxD0=PE1
      da:	9e e0       	ldi	r25, 0x0E	; 14
      dc:	92 b9       	out	0x02, r25	; 2
				 // encoder_l_A(INT4)=PE6 encoder_l_B(INT5)=PE7, encoder_r_A(INT6)=PE4, encoder_r_B(INT7)=PE5
	DDRF = 0xFF; // ADCn
      de:	e1 e6       	ldi	r30, 0x61	; 97
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 83       	st	Z, r24
	
	PORTA = 0x00; // IR_sense emitter off
      e4:	1b ba       	out	0x1b, r1	; 27
	PORTD = 0xFF; // LED0,1 off
      e6:	82 bb       	out	0x12, r24	; 18
	PORTC = 0x00;  // DIR_r, DIR_l = 0 
      e8:	15 ba       	out	0x15, r1	; 21
	DDRF = 0x00;
      ea:	10 82       	st	Z, r1
}
      ec:	08 95       	ret

000000ee <init_EX_INTERRUPT>:

/* external interrupt initialize */
void init_EX_INTERRUPT(void) {
	
	EICRA	= (0<<ISC31) |(0<<ISC30) |(0<<ISC21) |(0<<ISC20) |(0<<ISC11) |(0<<ISC10) |(1<<ISC01) |(0<<ISC00);
      ee:	82 e0       	ldi	r24, 0x02	; 2
      f0:	80 93 6a 00 	sts	0x006A, r24
	EICRB	= (0<<ISC71) |(0<<ISC70) |(0<<ISC61) |(0<<ISC60) |(0<<ISC51) |(0<<ISC50) |(0<<ISC41) |(0<<ISC40);
      f4:	1a be       	out	0x3a, r1	; 58
	EIMSK	= (0<<INT7 ) |(0<<INT6 ) |(0<<INT5 ) |(0<<INT4 ) |(0<<INT3 ) |(0<<INT2 ) |(0<<INT1 ) |(1<<INT0 );
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	89 bf       	out	0x39, r24	; 57
}
      fa:	08 95       	ret

000000fc <init_TIMER0>:

/* timer counter initialize */
void init_TIMER0(void) {
	
	TCCR0 = 0x07;
      fc:	87 e0       	ldi	r24, 0x07	; 7
      fe:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0x00;
     100:	17 be       	out	0x37, r1	; 55
	TCNT0 = 0x00;
     102:	12 be       	out	0x32, r1	; 50
	

}
     104:	08 95       	ret

00000106 <init_TIMER>:

	//TCCR3A	= (0<<COM3A1)|(0<<COM3A0)|(0<<COM3B1)|(0<<COM3B0)|(0<<COM3C1)|(0<<COM3C0)|(1<<WGM31) |(0<<WGM30);
	//TCCR3B	= (0<<ICNC1) |(0<<ICES1) |			  (1<<WGM13) |(1<<WGM12) |(0<<CS12)  |(1<<CS11)  |(1<<CS10) ;
	//ETIMSK	= 			 |			 |(0<<TICIE3)|(0<<OCIE3A)|(0<<OCIE3B)|(1<<TOIE3) |(0<<OCIE3C)|(0<<OCIE1C);

	TCCR3A = 0x02; // COMnx1:0 nomal mode , WGM3 1:0 fast PWM with ICRn TOP
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0x1A; // WGM3 3:2 fast PWM with ICRn TOP, 8 prescaler
     10c:	8a e1       	ldi	r24, 0x1A	; 26
     10e:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK = 0x04; // Timer/Counter3 overflow interrupt enable(TOIE3)
     112:	84 e0       	ldi	r24, 0x04	; 4
     114:	80 93 7d 00 	sts	0x007D, r24

	ICR3 = 40000; // ICRH and ICRL / 16Mhz crystal, 20ms control period, 8 prescaler
     118:	80 e4       	ldi	r24, 0x40	; 64
     11a:	9c e9       	ldi	r25, 0x9C	; 156
     11c:	90 93 81 00 	sts	0x0081, r25
     120:	80 93 80 00 	sts	0x0080, r24
}
     124:	08 95       	ret

00000126 <init_PWM>:

/* PWM initialize */
void init_PWM(void) {

	TCCR1A	= (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(0<<COM1C1)|(0<<COM1C0)|(1<<WGM11) |(0<<WGM10);
     126:	82 ea       	ldi	r24, 0xA2	; 162
     128:	8f bd       	out	0x2f, r24	; 47
	TCCR1B	= (0<<ICNC1) |(0<<ICES1) |			  (1<<WGM13) |(1<<WGM12) |(0<<CS12)  |(1<<CS11)  |(0<<CS10) ;
     12a:	8a e1       	ldi	r24, 0x1A	; 26
     12c:	8e bd       	out	0x2e, r24	; 46
	TIMSK	= (0<<OCIE2) |(0<<TOIE2) |(0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(0<<TOIE1) |(0<<OCIE0) |(0<<TOIE0);
     12e:	17 be       	out	0x37, r1	; 55
	

	ICR1= 2000; // 1khz
     130:	80 ed       	ldi	r24, 0xD0	; 208
     132:	97 e0       	ldi	r25, 0x07	; 7
     134:	97 bd       	out	0x27, r25	; 39
     136:	86 bd       	out	0x26, r24	; 38

	OCR1A = 0x0000;
     138:	1b bc       	out	0x2b, r1	; 43
     13a:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0x0000;
     13c:	19 bc       	out	0x29, r1	; 41
     13e:	18 bc       	out	0x28, r1	; 40

}
     140:	08 95       	ret

00000142 <init_USART>:
	//UCSR0B	= (0<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0) |(1<<TXEN0) |(0<<UCSZ02)|(0<<RXB80) |(0<<TXB80);
	//UCSR0C	=             (0<<UMSEL0)|(0<<UPM01) |(0<<UPM00) |(0<<USBS1) |(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0);
	//UBRR0H	= 0;
	//UBRR0L	= 8;
	
	UBRR0H = 0;		
     142:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 8; // f_osc = 16 Mhz , Baud rate = 115200(bps)
     146:	88 e0       	ldi	r24, 0x08	; 8
     148:	89 b9       	out	0x09, r24	; 9
	UCSR0B = 0x18; // RXEN=1, TXEN=1
     14a:	88 e1       	ldi	r24, 0x18	; 24
     14c:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06; // Asynchronous / No parity / 1 stop bit / 8 bit data size
     14e:	86 e0       	ldi	r24, 0x06	; 6
     150:	80 93 95 00 	sts	0x0095, r24
}
     154:	08 95       	ret

00000156 <init_ADC>:
void init_ADC(void) {
	
	//ADMUX  = (1<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX4)|(0<<MUX3)|(0<<MUX2) |(0<<MUX1) |(0<<MUX0);
	//ADCSRA = (1<<ADEN) |(0<<ADSC) |(0<<ADFR) |(0<<ADFR)|(0<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0);

	ADMUX = 0xC0; // internal 2.56 voltage reference
     156:	80 ec       	ldi	r24, 0xC0	; 192
     158:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87; // prescaler : 2 division factor
     15a:	87 e8       	ldi	r24, 0x87	; 135
     15c:	86 b9       	out	0x06, r24	; 6

}
     15e:	08 95       	ret

00000160 <Uart_Putch0>:

/* function of transmiting the data to computer */
void Uart_Putch0( unsigned char data )
{
	
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Wait for empty transmit buffer */
     160:	5d 9b       	sbis	0x0b, 5	; 11
     162:	fe cf       	rjmp	.-4      	; 0x160 <Uart_Putch0>
	
	UDR0 = data; /* Put data into buffer, sends the data */
     164:	8c b9       	out	0x0c, r24	; 12
}
     166:	08 95       	ret

00000168 <Uart_Getch0>:

/* function of transmiting the data to MCU */
unsigned char Uart_Getch0( void )
{
	
	while ( !(UCSR0A & (1<<RXC0))); /* Wait for data to be received */
     168:	5f 9b       	sbis	0x0b, 7	; 11
     16a:	fe cf       	rjmp	.-4      	; 0x168 <Uart_Getch0>
	
	return UDR0; /* Get and return received data from buffer */
     16c:	8c b1       	in	r24, 0x0c	; 12
}
     16e:	08 95       	ret

00000170 <Uart_U16Bit_PutNum0>:

void Uart_U16Bit_PutNum0( unsigned int NumData ) 
{ 
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	ec 01       	movw	r28, r24
 unsigned int TempData; 
     TempData = (NumData%100000)/10000; 
     17a:	bc 01       	movw	r22, r24
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	20 ea       	ldi	r18, 0xA0	; 160
     182:	36 e8       	ldi	r19, 0x86	; 134
     184:	41 e0       	ldi	r20, 0x01	; 1
     186:	50 e0       	ldi	r21, 0x00	; 0
     188:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__divmodsi4>
     18c:	20 e1       	ldi	r18, 0x10	; 16
     18e:	37 e2       	ldi	r19, 0x27	; 39
     190:	40 e0       	ldi	r20, 0x00	; 0
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__divmodsi4>
     Uart_Putch0(TempData+48);                 // 10000
     198:	82 2f       	mov	r24, r18
     19a:	80 5d       	subi	r24, 0xD0	; 208
     19c:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>

     TempData = (NumData%10000)/1000; 
     1a0:	ce 01       	movw	r24, r28
     1a2:	60 e1       	ldi	r22, 0x10	; 16
     1a4:	77 e2       	ldi	r23, 0x27	; 39
     1a6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodhi4>
     1aa:	08 ee       	ldi	r16, 0xE8	; 232
     1ac:	13 e0       	ldi	r17, 0x03	; 3
     1ae:	b8 01       	movw	r22, r16
     1b0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodhi4>
     Uart_Putch0(TempData+48);                 // 1000
     1b4:	86 2f       	mov	r24, r22
     1b6:	80 5d       	subi	r24, 0xD0	; 208
     1b8:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
  
     TempData = (NumData%1000)/100; 
     1bc:	ce 01       	movw	r24, r28
     1be:	b8 01       	movw	r22, r16
     1c0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodhi4>
     1c4:	04 e6       	ldi	r16, 0x64	; 100
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	b8 01       	movw	r22, r16
     1ca:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodhi4>
     Uart_Putch0(TempData+48);                 // 100
     1ce:	86 2f       	mov	r24, r22
     1d0:	80 5d       	subi	r24, 0xD0	; 208
     1d2:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
  
     TempData = (NumData%100)/10; 
     1d6:	ce 01       	movw	r24, r28
     1d8:	b8 01       	movw	r22, r16
     1da:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodhi4>
     1de:	0a e0       	ldi	r16, 0x0A	; 10
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	b8 01       	movw	r22, r16
     1e4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodhi4>
     Uart_Putch0(TempData+48);                  // 10
     1e8:	86 2f       	mov	r24, r22
     1ea:	80 5d       	subi	r24, 0xD0	; 208
     1ec:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
     TempData = NumData%10; 
     1f0:	ce 01       	movw	r24, r28
     1f2:	b8 01       	movw	r22, r16
     1f4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodhi4>
  Uart_Putch0(TempData+48);
     1f8:	80 5d       	subi	r24, 0xD0	; 208
     1fa:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
		Uart_Putch0('-');
		Uart_U16Bit_PutNum0('VARIABLE');
		'VARIABLE' = -1*'VARIABLE';
	}*/

}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	08 95       	ret

00000208 <main>:
void MOTOR_speed(int lm_speed, int rm_speed);
void MOTOR_control(void);

int main(void) {

	init_PORT();
     208:	0e 94 67 00 	call	0xce	; 0xce <init_PORT>
	init_TIMER0();
     20c:	0e 94 7e 00 	call	0xfc	; 0xfc <init_TIMER0>
	init_TIMER();
     210:	0e 94 83 00 	call	0x106	; 0x106 <init_TIMER>
	init_EX_INTERRUPT();
     214:	0e 94 77 00 	call	0xee	; 0xee <init_EX_INTERRUPT>
	init_ADC();
     218:	0e 94 ab 00 	call	0x156	; 0x156 <init_ADC>
	init_USART();
     21c:	0e 94 a1 00 	call	0x142	; 0x142 <init_USART>
	init_PWM();
     220:	0e 94 93 00 	call	0x126	; 0x126 <init_PWM>
	
	sei();
     224:	78 94       	sei
	
	while(1) {
		if(state>3) state = 3;
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	20 91 40 02 	lds	r18, 0x0240
     22e:	30 91 41 02 	lds	r19, 0x0241
     232:	24 30       	cpi	r18, 0x04	; 4
     234:	31 05       	cpc	r19, r1
     236:	cc f3       	brlt	.-14     	; 0x22a <main+0x22>
     238:	90 93 41 02 	sts	0x0241, r25
     23c:	80 93 40 02 	sts	0x0240, r24
     240:	f4 cf       	rjmp	.-24     	; 0x22a <main+0x22>

00000242 <ADC_get>:

	sei();
}

// Get ADC from IR sensor
void ADC_get(void) {
     242:	2f 92       	push	r2
     244:	3f 92       	push	r3
     246:	4f 92       	push	r4
     248:	5f 92       	push	r5
     24a:	6f 92       	push	r6
     24c:	7f 92       	push	r7
     24e:	8f 92       	push	r8
     250:	9f 92       	push	r9
     252:	af 92       	push	r10
     254:	bf 92       	push	r11
     256:	cf 92       	push	r12
     258:	df 92       	push	r13
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	df 93       	push	r29
     264:	cf 93       	push	r28
     266:	00 d0       	rcall	.+0      	; 0x268 <ADC_get+0x26>
     268:	00 d0       	rcall	.+0      	; 0x26a <ADC_get+0x28>
     26a:	00 d0       	rcall	.+0      	; 0x26c <ADC_get+0x2a>
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62

	//------------IR order-----------//	
	// 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 //

	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {			
     270:	10 92 43 02 	sts	0x0243, r1
     274:	10 92 42 02 	sts	0x0242, r1
				ADC_DATA[5] = ADCL;
				ADC_DATA[5] += (ADCH << 8);
				
				PORTA = 0x00;
				
				ADMUX = 0xC6; // prepare for ADC_7
     278:	b6 ec       	ldi	r27, 0xC6	; 198
     27a:	ab 2e       	mov	r10, r27
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_5---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 4 :
				PORTA = 0x10;
     27c:	a0 e1       	ldi	r26, 0x10	; 16
     27e:	9a 2e       	mov	r9, r26
				ADC_DATA[4] += (ADCH << 8);
				
				
				PORTA = 0x00;
				
				ADMUX = 0xC5; // prepare for ADC_6
     280:	75 ec       	ldi	r23, 0xC5	; 197
     282:	87 2e       	mov	r8, r23
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_7---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 6 :
				PORTA = 0x40;
     284:	60 e4       	ldi	r22, 0x40	; 64
     286:	76 2e       	mov	r7, r22
				ADC_DATA[6] += (ADCH << 8);
				
				
				PORTA = 0x00;
				
				ADMUX = 0xC7; // prepare for ADC_8
     288:	57 ec       	ldi	r21, 0xC7	; 199
     28a:	65 2e       	mov	r6, r21
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_8---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 7 :
				PORTA = 0x80;
     28c:	40 e8       	ldi	r20, 0x80	; 128
     28e:	54 2e       	mov	r5, r20
				ADC_DATA[7] += (ADCH << 8);
				
				
				PORTA = 0x00;

				ADMUX = 0xC0; // prepare for ADC_1
     290:	30 ec       	ldi	r19, 0xC0	; 192
     292:	33 2e       	mov	r3, r19
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_2---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :
				PORTA = 0x02;
     294:	22 e0       	ldi	r18, 0x02	; 2
     296:	22 2e       	mov	r2, r18
     298:	fc 83       	std	Y+4, r31	; 0x04
     29a:	eb 83       	std	Y+3, r30	; 0x03
     29c:	9e 83       	std	Y+6, r25	; 0x06
     29e:	8d 83       	std	Y+5, r24	; 0x05
void ADC_get(void) {

	//------------IR order-----------//	
	// 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 //

	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {			
     2a0:	7d c1       	rjmp	.+762    	; 0x59c <ADC_get+0x35a>
		
		switch(i) {
     2a2:	80 91 42 02 	lds	r24, 0x0242
     2a6:	90 91 43 02 	lds	r25, 0x0243
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	91 05       	cpc	r25, r1
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <ADC_get+0x70>
     2b0:	9d c0       	rjmp	.+314    	; 0x3ec <ADC_get+0x1aa>
     2b2:	84 30       	cpi	r24, 0x04	; 4
     2b4:	91 05       	cpc	r25, r1
     2b6:	5c f4       	brge	.+22     	; 0x2ce <ADC_get+0x8c>
     2b8:	81 30       	cpi	r24, 0x01	; 1
     2ba:	91 05       	cpc	r25, r1
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <ADC_get+0x7e>
     2be:	42 c0       	rjmp	.+132    	; 0x344 <ADC_get+0x102>
     2c0:	82 30       	cpi	r24, 0x02	; 2
     2c2:	91 05       	cpc	r25, r1
     2c4:	0c f0       	brlt	.+2      	; 0x2c8 <ADC_get+0x86>
     2c6:	67 c0       	rjmp	.+206    	; 0x396 <ADC_get+0x154>
     2c8:	00 97       	sbiw	r24, 0x00	; 0
     2ca:	91 f0       	breq	.+36     	; 0x2f0 <ADC_get+0xae>
     2cc:	5e c1       	rjmp	.+700    	; 0x58a <ADC_get+0x348>
     2ce:	85 30       	cpi	r24, 0x05	; 5
     2d0:	91 05       	cpc	r25, r1
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <ADC_get+0x94>
     2d4:	de c0       	rjmp	.+444    	; 0x492 <ADC_get+0x250>
     2d6:	85 30       	cpi	r24, 0x05	; 5
     2d8:	91 05       	cpc	r25, r1
     2da:	0c f4       	brge	.+2      	; 0x2de <ADC_get+0x9c>
     2dc:	b2 c0       	rjmp	.+356    	; 0x442 <ADC_get+0x200>
     2de:	86 30       	cpi	r24, 0x06	; 6
     2e0:	91 05       	cpc	r25, r1
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <ADC_get+0xa4>
     2e4:	01 c1       	rjmp	.+514    	; 0x4e8 <ADC_get+0x2a6>
     2e6:	87 30       	cpi	r24, 0x07	; 7
     2e8:	91 05       	cpc	r25, r1
     2ea:	09 f0       	breq	.+2      	; 0x2ee <ADC_get+0xac>
     2ec:	4e c1       	rjmp	.+668    	; 0x58a <ADC_get+0x348>
     2ee:	24 c1       	rjmp	.+584    	; 0x538 <ADC_get+0x2f6>
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_1---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 0 :
				
				PORTA = 0x01;
     2f0:	bb 24       	eor	r11, r11
     2f2:	b3 94       	inc	r11
     2f4:	bb ba       	out	0x1b, r11	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	8a 95       	dec	r24
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <ADC_get+0xb6>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <ADC_get+0xbc>

				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     2fe:	86 b1       	in	r24, 0x06	; 6
     300:	80 6c       	ori	r24, 0xC0	; 192
     302:	86 b9       	out	0x06, r24	; 6
     304:	eb 81       	ldd	r30, Y+3	; 0x03
     306:	fc 81       	ldd	r31, Y+4	; 0x04
     308:	8d 81       	ldd	r24, Y+5	; 0x05
     30a:	9e 81       	ldd	r25, Y+6	; 0x06
				while(!(ADCSRA&0x10)); // wait for ADC complete
     30c:	34 9b       	sbis	0x06, 4	; 6
     30e:	fe cf       	rjmp	.-4      	; 0x30c <ADC_get+0xca>
     310:	fc 83       	std	Y+4, r31	; 0x04
     312:	eb 83       	std	Y+3, r30	; 0x03
     314:	9e 83       	std	Y+6, r25	; 0x06
     316:	8d 83       	std	Y+5, r24	; 0x05
				ADC_DATA[0] = ADCL;
     318:	84 b1       	in	r24, 0x04	; 4
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	90 93 47 02 	sts	0x0247, r25
     320:	80 93 46 02 	sts	0x0246, r24
				ADC_DATA[0] += (ADCH << 8);
     324:	80 91 46 02 	lds	r24, 0x0246
     328:	90 91 47 02 	lds	r25, 0x0247
     32c:	45 b0       	in	r4, 0x05	; 5
     32e:	f4 2c       	mov	r15, r4
     330:	ee 24       	eor	r14, r14
     332:	8e 0d       	add	r24, r14
     334:	9f 1d       	adc	r25, r15
     336:	90 93 47 02 	sts	0x0247, r25
     33a:	80 93 46 02 	sts	0x0246, r24
				
				PORTA = 0x00;
     33e:	1b ba       	out	0x1b, r1	; 27
				
				ADMUX = 0xC1; // prepare for ADC_2
     340:	91 ec       	ldi	r25, 0xC1	; 193
     342:	52 c0       	rjmp	.+164    	; 0x3e8 <ADC_get+0x1a6>
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_2---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 1 :
				PORTA = 0x02;
     344:	2b ba       	out	0x1b, r2	; 27
     346:	e2 e0       	ldi	r30, 0x02	; 2
     348:	ea 95       	dec	r30
     34a:	f1 f7       	brne	.-4      	; 0x348 <ADC_get+0x106>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <ADC_get+0x10c>
				
				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     34e:	86 b1       	in	r24, 0x06	; 6
     350:	80 6c       	ori	r24, 0xC0	; 192
     352:	86 b9       	out	0x06, r24	; 6
     354:	eb 81       	ldd	r30, Y+3	; 0x03
     356:	fc 81       	ldd	r31, Y+4	; 0x04
     358:	8d 81       	ldd	r24, Y+5	; 0x05
     35a:	9e 81       	ldd	r25, Y+6	; 0x06
				while(!(ADCSRA&0x10)); // wait for ADC complete
     35c:	34 9b       	sbis	0x06, 4	; 6
     35e:	fe cf       	rjmp	.-4      	; 0x35c <ADC_get+0x11a>
     360:	fc 83       	std	Y+4, r31	; 0x04
     362:	eb 83       	std	Y+3, r30	; 0x03
     364:	9e 83       	std	Y+6, r25	; 0x06
     366:	8d 83       	std	Y+5, r24	; 0x05
				ADC_DATA[1] = ADCL;
     368:	84 b1       	in	r24, 0x04	; 4
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	90 93 49 02 	sts	0x0249, r25
     370:	80 93 48 02 	sts	0x0248, r24
				ADC_DATA[1] += (ADCH << 8);
     374:	80 91 48 02 	lds	r24, 0x0248
     378:	90 91 49 02 	lds	r25, 0x0249
     37c:	45 b0       	in	r4, 0x05	; 5
     37e:	14 2d       	mov	r17, r4
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	80 0f       	add	r24, r16
     384:	91 1f       	adc	r25, r17
     386:	90 93 49 02 	sts	0x0249, r25
     38a:	80 93 48 02 	sts	0x0248, r24
				
				PORTA = 0x00;
     38e:	1b ba       	out	0x1b, r1	; 27
				
				ADMUX = 0xC2; // prepare for ADC_3
     390:	f2 ec       	ldi	r31, 0xC2	; 194
     392:	f7 b9       	out	0x07, r31	; 7

			break;
     394:	fa c0       	rjmp	.+500    	; 0x58a <ADC_get+0x348>
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_3---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 2 :
				PORTA = 0x04;
     396:	94 e0       	ldi	r25, 0x04	; 4
     398:	b9 2e       	mov	r11, r25
     39a:	bb ba       	out	0x1b, r11	; 27
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	8a 95       	dec	r24
     3a0:	f1 f7       	brne	.-4      	; 0x39e <ADC_get+0x15c>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <ADC_get+0x162>
				
				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     3a4:	86 b1       	in	r24, 0x06	; 6
     3a6:	80 6c       	ori	r24, 0xC0	; 192
     3a8:	86 b9       	out	0x06, r24	; 6
     3aa:	eb 81       	ldd	r30, Y+3	; 0x03
     3ac:	fc 81       	ldd	r31, Y+4	; 0x04
     3ae:	8d 81       	ldd	r24, Y+5	; 0x05
     3b0:	9e 81       	ldd	r25, Y+6	; 0x06
				while(!(ADCSRA&0x10)); // wait for ADC complete
     3b2:	34 9b       	sbis	0x06, 4	; 6
     3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <ADC_get+0x170>
     3b6:	fc 83       	std	Y+4, r31	; 0x04
     3b8:	eb 83       	std	Y+3, r30	; 0x03
     3ba:	9e 83       	std	Y+6, r25	; 0x06
     3bc:	8d 83       	std	Y+5, r24	; 0x05
				ADC_DATA[2] = ADCL;
     3be:	84 b1       	in	r24, 0x04	; 4
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	90 93 4b 02 	sts	0x024B, r25
     3c6:	80 93 4a 02 	sts	0x024A, r24
				ADC_DATA[2] += (ADCH << 8);
     3ca:	80 91 4a 02 	lds	r24, 0x024A
     3ce:	90 91 4b 02 	lds	r25, 0x024B
     3d2:	45 b0       	in	r4, 0x05	; 5
     3d4:	34 2d       	mov	r19, r4
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	82 0f       	add	r24, r18
     3da:	93 1f       	adc	r25, r19
     3dc:	90 93 4b 02 	sts	0x024B, r25
     3e0:	80 93 4a 02 	sts	0x024A, r24
				
				PORTA = 0x00;
     3e4:	1b ba       	out	0x1b, r1	; 27
				
				ADMUX = 0xC3; // prepare for ADC_4
     3e6:	93 ec       	ldi	r25, 0xC3	; 195
     3e8:	97 b9       	out	0x07, r25	; 7

			break;
     3ea:	cf c0       	rjmp	.+414    	; 0x58a <ADC_get+0x348>
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_4---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 3 :
				PORTA = 0x08;
     3ec:	e8 e0       	ldi	r30, 0x08	; 8
     3ee:	eb bb       	out	0x1b, r30	; 27
     3f0:	f2 e0       	ldi	r31, 0x02	; 2
     3f2:	fa 95       	dec	r31
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <ADC_get+0x1b0>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <ADC_get+0x1b6>
				
				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     3f8:	86 b1       	in	r24, 0x06	; 6
     3fa:	80 6c       	ori	r24, 0xC0	; 192
     3fc:	86 b9       	out	0x06, r24	; 6
     3fe:	eb 81       	ldd	r30, Y+3	; 0x03
     400:	fc 81       	ldd	r31, Y+4	; 0x04
     402:	8d 81       	ldd	r24, Y+5	; 0x05
     404:	9e 81       	ldd	r25, Y+6	; 0x06
				while(!(ADCSRA&0x10)); // wait for ADC complete
     406:	34 9b       	sbis	0x06, 4	; 6
     408:	fe cf       	rjmp	.-4      	; 0x406 <ADC_get+0x1c4>
     40a:	fc 83       	std	Y+4, r31	; 0x04
     40c:	eb 83       	std	Y+3, r30	; 0x03
     40e:	9e 83       	std	Y+6, r25	; 0x06
     410:	8d 83       	std	Y+5, r24	; 0x05
				ADC_DATA[3] = ADCL;
     412:	84 b1       	in	r24, 0x04	; 4
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	90 93 4d 02 	sts	0x024D, r25
     41a:	80 93 4c 02 	sts	0x024C, r24
				ADC_DATA[3] += (ADCH << 8);
     41e:	80 91 4c 02 	lds	r24, 0x024C
     422:	90 91 4d 02 	lds	r25, 0x024D
     426:	45 b0       	in	r4, 0x05	; 5
     428:	54 2d       	mov	r21, r4
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	84 0f       	add	r24, r20
     42e:	95 1f       	adc	r25, r21
     430:	90 93 4d 02 	sts	0x024D, r25
     434:	80 93 4c 02 	sts	0x024C, r24
				
				
				PORTA = 0x00;
     438:	1b ba       	out	0x1b, r1	; 27
				
				ADMUX = 0xC4; // prepare for ADC_5
     43a:	84 ec       	ldi	r24, 0xC4	; 196
     43c:	b8 2e       	mov	r11, r24
     43e:	b7 b8       	out	0x07, r11	; 7

			break;
     440:	a4 c0       	rjmp	.+328    	; 0x58a <ADC_get+0x348>
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_5---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 4 :
				PORTA = 0x10;
     442:	9b ba       	out	0x1b, r9	; 27
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	8a 95       	dec	r24
     448:	f1 f7       	brne	.-4      	; 0x446 <ADC_get+0x204>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <ADC_get+0x20a>
				
				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     44c:	86 b1       	in	r24, 0x06	; 6
     44e:	80 6c       	ori	r24, 0xC0	; 192
     450:	86 b9       	out	0x06, r24	; 6
     452:	eb 81       	ldd	r30, Y+3	; 0x03
     454:	fc 81       	ldd	r31, Y+4	; 0x04
     456:	8d 81       	ldd	r24, Y+5	; 0x05
     458:	9e 81       	ldd	r25, Y+6	; 0x06
				while(!(ADCSRA&0x10)); // wait for ADC complete
     45a:	34 9b       	sbis	0x06, 4	; 6
     45c:	fe cf       	rjmp	.-4      	; 0x45a <ADC_get+0x218>
     45e:	fc 83       	std	Y+4, r31	; 0x04
     460:	eb 83       	std	Y+3, r30	; 0x03
     462:	9e 83       	std	Y+6, r25	; 0x06
     464:	8d 83       	std	Y+5, r24	; 0x05
				ADC_DATA[4] = ADCL;
     466:	84 b1       	in	r24, 0x04	; 4
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 4f 02 	sts	0x024F, r25
     46e:	80 93 4e 02 	sts	0x024E, r24
				ADC_DATA[4] += (ADCH << 8);
     472:	80 91 4e 02 	lds	r24, 0x024E
     476:	90 91 4f 02 	lds	r25, 0x024F
     47a:	45 b0       	in	r4, 0x05	; 5
     47c:	74 2d       	mov	r23, r4
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	86 0f       	add	r24, r22
     482:	97 1f       	adc	r25, r23
     484:	90 93 4f 02 	sts	0x024F, r25
     488:	80 93 4e 02 	sts	0x024E, r24
				
				
				PORTA = 0x00;
     48c:	1b ba       	out	0x1b, r1	; 27
				
				ADMUX = 0xC5; // prepare for ADC_6
     48e:	87 b8       	out	0x07, r8	; 7

			break;
     490:	7c c0       	rjmp	.+248    	; 0x58a <ADC_get+0x348>
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_6---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 5 :
				PORTA = 0x20;
     492:	90 e2       	ldi	r25, 0x20	; 32
     494:	9b bb       	out	0x1b, r25	; 27
     496:	e2 e0       	ldi	r30, 0x02	; 2
     498:	ea 95       	dec	r30
     49a:	f1 f7       	brne	.-4      	; 0x498 <ADC_get+0x256>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <ADC_get+0x25c>
				
				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     49e:	86 b1       	in	r24, 0x06	; 6
     4a0:	80 6c       	ori	r24, 0xC0	; 192
     4a2:	86 b9       	out	0x06, r24	; 6
     4a4:	eb 81       	ldd	r30, Y+3	; 0x03
     4a6:	fc 81       	ldd	r31, Y+4	; 0x04
     4a8:	8d 81       	ldd	r24, Y+5	; 0x05
     4aa:	9e 81       	ldd	r25, Y+6	; 0x06
				while(!(ADCSRA&0x10)); // wait for ADC complete
     4ac:	34 9b       	sbis	0x06, 4	; 6
     4ae:	fe cf       	rjmp	.-4      	; 0x4ac <ADC_get+0x26a>
     4b0:	fc 83       	std	Y+4, r31	; 0x04
     4b2:	eb 83       	std	Y+3, r30	; 0x03
     4b4:	9e 83       	std	Y+6, r25	; 0x06
     4b6:	8d 83       	std	Y+5, r24	; 0x05
				ADC_DATA[5] = ADCL;
     4b8:	84 b1       	in	r24, 0x04	; 4
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	90 93 51 02 	sts	0x0251, r25
     4c0:	80 93 50 02 	sts	0x0250, r24
				ADC_DATA[5] += (ADCH << 8);
     4c4:	80 91 50 02 	lds	r24, 0x0250
     4c8:	90 91 51 02 	lds	r25, 0x0251
     4cc:	45 b0       	in	r4, 0x05	; 5
     4ce:	4c 82       	std	Y+4, r4	; 0x04
     4d0:	1b 82       	std	Y+3, r1	; 0x03
     4d2:	cb 80       	ldd	r12, Y+3	; 0x03
     4d4:	dc 80       	ldd	r13, Y+4	; 0x04
     4d6:	8c 0d       	add	r24, r12
     4d8:	9d 1d       	adc	r25, r13
     4da:	90 93 51 02 	sts	0x0251, r25
     4de:	80 93 50 02 	sts	0x0250, r24
				
				PORTA = 0x00;
     4e2:	1b ba       	out	0x1b, r1	; 27
				
				ADMUX = 0xC6; // prepare for ADC_7
     4e4:	a7 b8       	out	0x07, r10	; 7

			break;
     4e6:	51 c0       	rjmp	.+162    	; 0x58a <ADC_get+0x348>
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_7---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 6 :
				PORTA = 0x40;
     4e8:	7b ba       	out	0x1b, r7	; 27
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	8a 95       	dec	r24
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <ADC_get+0x2aa>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <ADC_get+0x2b0>
				
				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     4f2:	86 b1       	in	r24, 0x06	; 6
     4f4:	80 6c       	ori	r24, 0xC0	; 192
     4f6:	86 b9       	out	0x06, r24	; 6
     4f8:	eb 81       	ldd	r30, Y+3	; 0x03
     4fa:	fc 81       	ldd	r31, Y+4	; 0x04
     4fc:	8d 81       	ldd	r24, Y+5	; 0x05
     4fe:	9e 81       	ldd	r25, Y+6	; 0x06
				while(!(ADCSRA&0x10)); // wait for ADC complete
     500:	34 9b       	sbis	0x06, 4	; 6
     502:	fe cf       	rjmp	.-4      	; 0x500 <ADC_get+0x2be>
     504:	fc 83       	std	Y+4, r31	; 0x04
     506:	eb 83       	std	Y+3, r30	; 0x03
     508:	9e 83       	std	Y+6, r25	; 0x06
     50a:	8d 83       	std	Y+5, r24	; 0x05
				ADC_DATA[6] = ADCL;
     50c:	84 b1       	in	r24, 0x04	; 4
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	90 93 53 02 	sts	0x0253, r25
     514:	80 93 52 02 	sts	0x0252, r24
				ADC_DATA[6] += (ADCH << 8);
     518:	80 91 52 02 	lds	r24, 0x0252
     51c:	90 91 53 02 	lds	r25, 0x0253
     520:	45 b0       	in	r4, 0x05	; 5
     522:	b4 2d       	mov	r27, r4
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	8a 0f       	add	r24, r26
     528:	9b 1f       	adc	r25, r27
     52a:	90 93 53 02 	sts	0x0253, r25
     52e:	80 93 52 02 	sts	0x0252, r24
				
				
				PORTA = 0x00;
     532:	1b ba       	out	0x1b, r1	; 27
				
				ADMUX = 0xC7; // prepare for ADC_8
     534:	67 b8       	out	0x07, r6	; 7

			break;
     536:	29 c0       	rjmp	.+82     	; 0x58a <ADC_get+0x348>
			
			////////////////////////////////////////////////////////////////////////////////////
			//------------------------------------ADC_8---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case 7 :
				PORTA = 0x80;
     538:	5b ba       	out	0x1b, r5	; 27
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	9a 95       	dec	r25
     53e:	f1 f7       	brne	.-4      	; 0x53c <ADC_get+0x2fa>
     540:	00 c0       	rjmp	.+0      	; 0x542 <ADC_get+0x300>
				
				_delay_us(DELAY);

				ADCSRA |= 0xC0; // ADEN=1, ADSC=1
     542:	86 b1       	in	r24, 0x06	; 6
     544:	80 6c       	ori	r24, 0xC0	; 192
     546:	86 b9       	out	0x06, r24	; 6
     548:	eb 81       	ldd	r30, Y+3	; 0x03
     54a:	fc 81       	ldd	r31, Y+4	; 0x04
     54c:	8d 81       	ldd	r24, Y+5	; 0x05
     54e:	9e 81       	ldd	r25, Y+6	; 0x06
				while(!(ADCSRA&0x10)); // wait for ADC complete
     550:	34 9b       	sbis	0x06, 4	; 6
     552:	fe cf       	rjmp	.-4      	; 0x550 <ADC_get+0x30e>
     554:	fc 83       	std	Y+4, r31	; 0x04
     556:	eb 83       	std	Y+3, r30	; 0x03
     558:	9e 83       	std	Y+6, r25	; 0x06
     55a:	8d 83       	std	Y+5, r24	; 0x05
				ADC_DATA[7] = ADCL;
     55c:	84 b1       	in	r24, 0x04	; 4
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	90 93 55 02 	sts	0x0255, r25
     564:	80 93 54 02 	sts	0x0254, r24
				ADC_DATA[7] += (ADCH << 8);
     568:	e0 91 54 02 	lds	r30, 0x0254
     56c:	f0 91 55 02 	lds	r31, 0x0255
     570:	45 b0       	in	r4, 0x05	; 5
     572:	4e 82       	std	Y+6, r4	; 0x06
     574:	1d 82       	std	Y+5, r1	; 0x05
     576:	cd 80       	ldd	r12, Y+5	; 0x05
     578:	de 80       	ldd	r13, Y+6	; 0x06
     57a:	ec 0d       	add	r30, r12
     57c:	fd 1d       	adc	r31, r13
     57e:	f0 93 55 02 	sts	0x0255, r31
     582:	e0 93 54 02 	sts	0x0254, r30
				
				
				PORTA = 0x00;
     586:	1b ba       	out	0x1b, r1	; 27

				ADMUX = 0xC0; // prepare for ADC_1
     588:	37 b8       	out	0x07, r3	; 7
void ADC_get(void) {

	//------------IR order-----------//	
	// 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 //

	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {			
     58a:	80 91 42 02 	lds	r24, 0x0242
     58e:	90 91 43 02 	lds	r25, 0x0243
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	90 93 43 02 	sts	0x0243, r25
     598:	80 93 42 02 	sts	0x0242, r24
     59c:	80 91 42 02 	lds	r24, 0x0242
     5a0:	90 91 43 02 	lds	r25, 0x0243
     5a4:	88 30       	cpi	r24, 0x08	; 8
     5a6:	91 05       	cpc	r25, r1
     5a8:	0c f4       	brge	.+2      	; 0x5ac <ADC_get+0x36a>
     5aa:	7b ce       	rjmp	.-778    	; 0x2a2 <ADC_get+0x60>
			break;
		}
		
	}
	
}
     5ac:	26 96       	adiw	r28, 0x06	; 6
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	cf 91       	pop	r28
     5ba:	df 91       	pop	r29
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	bf 90       	pop	r11
     5ca:	af 90       	pop	r10
     5cc:	9f 90       	pop	r9
     5ce:	8f 90       	pop	r8
     5d0:	7f 90       	pop	r7
     5d2:	6f 90       	pop	r6
     5d4:	5f 90       	pop	r5
     5d6:	4f 90       	pop	r4
     5d8:	3f 90       	pop	r3
     5da:	2f 90       	pop	r2
     5dc:	08 95       	ret

000005de <ADC_max_min>:

// Get ADC max and min value from ADC_DATA[i]
void ADC_max_min(void) {
	
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {					
     5de:	10 92 43 02 	sts	0x0243, r1
     5e2:	10 92 42 02 	sts	0x0242, r1
     5e6:	61 c0       	rjmp	.+194    	; 0x6aa <ADC_max_min+0xcc>
		if( ADC_MAX[i] < ADC_DATA[i] ) // ADC_MAX
     5e8:	e0 91 42 02 	lds	r30, 0x0242
     5ec:	f0 91 43 02 	lds	r31, 0x0243
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	ea 5a       	subi	r30, 0xAA	; 170
     5f6:	fd 4f       	sbci	r31, 0xFD	; 253
     5f8:	20 81       	ld	r18, Z
     5fa:	31 81       	ldd	r19, Z+1	; 0x01
     5fc:	e0 91 42 02 	lds	r30, 0x0242
     600:	f0 91 43 02 	lds	r31, 0x0243
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	ea 5b       	subi	r30, 0xBA	; 186
     60a:	fd 4f       	sbci	r31, 0xFD	; 253
     60c:	80 81       	ld	r24, Z
     60e:	91 81       	ldd	r25, Z+1	; 0x01
     610:	28 17       	cp	r18, r24
     612:	39 07       	cpc	r19, r25
     614:	ac f4       	brge	.+42     	; 0x640 <ADC_max_min+0x62>
			ADC_MAX[i] = ADC_DATA[i];
     616:	e0 91 42 02 	lds	r30, 0x0242
     61a:	f0 91 43 02 	lds	r31, 0x0243
     61e:	a0 91 42 02 	lds	r26, 0x0242
     622:	b0 91 43 02 	lds	r27, 0x0243
     626:	aa 0f       	add	r26, r26
     628:	bb 1f       	adc	r27, r27
     62a:	aa 5b       	subi	r26, 0xBA	; 186
     62c:	bd 4f       	sbci	r27, 0xFD	; 253
     62e:	8d 91       	ld	r24, X+
     630:	9c 91       	ld	r25, X
     632:	11 97       	sbiw	r26, 0x01	; 1
     634:	ee 0f       	add	r30, r30
     636:	ff 1f       	adc	r31, r31
     638:	ea 5a       	subi	r30, 0xAA	; 170
     63a:	fd 4f       	sbci	r31, 0xFD	; 253
     63c:	91 83       	std	Z+1, r25	; 0x01
     63e:	80 83       	st	Z, r24
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
     640:	e0 91 42 02 	lds	r30, 0x0242
     644:	f0 91 43 02 	lds	r31, 0x0243
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	e0 50       	subi	r30, 0x00	; 0
     64e:	ff 4f       	sbci	r31, 0xFF	; 255
     650:	20 81       	ld	r18, Z
     652:	31 81       	ldd	r19, Z+1	; 0x01
     654:	e0 91 42 02 	lds	r30, 0x0242
     658:	f0 91 43 02 	lds	r31, 0x0243
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	ea 5b       	subi	r30, 0xBA	; 186
     662:	fd 4f       	sbci	r31, 0xFD	; 253
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	82 17       	cp	r24, r18
     66a:	93 07       	cpc	r25, r19
     66c:	ac f4       	brge	.+42     	; 0x698 <ADC_max_min+0xba>
			ADC_MIN[i] = ADC_DATA[i];	
     66e:	e0 91 42 02 	lds	r30, 0x0242
     672:	f0 91 43 02 	lds	r31, 0x0243
     676:	a0 91 42 02 	lds	r26, 0x0242
     67a:	b0 91 43 02 	lds	r27, 0x0243
     67e:	aa 0f       	add	r26, r26
     680:	bb 1f       	adc	r27, r27
     682:	aa 5b       	subi	r26, 0xBA	; 186
     684:	bd 4f       	sbci	r27, 0xFD	; 253
     686:	8d 91       	ld	r24, X+
     688:	9c 91       	ld	r25, X
     68a:	11 97       	sbiw	r26, 0x01	; 1
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e0 50       	subi	r30, 0x00	; 0
     692:	ff 4f       	sbci	r31, 0xFF	; 255
     694:	91 83       	std	Z+1, r25	; 0x01
     696:	80 83       	st	Z, r24
}

// Get ADC max and min value from ADC_DATA[i]
void ADC_max_min(void) {
	
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {					
     698:	80 91 42 02 	lds	r24, 0x0242
     69c:	90 91 43 02 	lds	r25, 0x0243
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	90 93 43 02 	sts	0x0243, r25
     6a6:	80 93 42 02 	sts	0x0242, r24
     6aa:	80 91 42 02 	lds	r24, 0x0242
     6ae:	90 91 43 02 	lds	r25, 0x0243
     6b2:	88 30       	cpi	r24, 0x08	; 8
     6b4:	91 05       	cpc	r25, r1
     6b6:	0c f4       	brge	.+2      	; 0x6ba <ADC_max_min+0xdc>
     6b8:	97 cf       	rjmp	.-210    	; 0x5e8 <ADC_max_min+0xa>
			ADC_MAX[i] = ADC_DATA[i];
		if( ADC_MIN[i] > ADC_DATA[i]) // ADC_MIN
			ADC_MIN[i] = ADC_DATA[i];	
	}

}
     6ba:	08 95       	ret

000006bc <ADC_normalize>:

// Get normalized ADC value (white base / black line / resolution=100)
void ADC_normalize(void) {
     6bc:	af 92       	push	r10
     6be:	bf 92       	push	r11
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
	
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     6d0:	10 92 43 02 	sts	0x0243, r1
     6d4:	10 92 42 02 	sts	0x0242, r1
     6d8:	5d c0       	rjmp	.+186    	; 0x794 <ADC_normalize+0xd8>

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
     6da:	e0 91 42 02 	lds	r30, 0x0242
     6de:	f0 91 43 02 	lds	r31, 0x0243
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	ea 5a       	subi	r30, 0xAA	; 170
     6e8:	fd 4f       	sbci	r31, 0xFD	; 253
     6ea:	60 81       	ld	r22, Z
     6ec:	71 81       	ldd	r23, Z+1	; 0x01
     6ee:	e0 91 42 02 	lds	r30, 0x0242
     6f2:	f0 91 43 02 	lds	r31, 0x0243
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	ea 5b       	subi	r30, 0xBA	; 186
     6fc:	fd 4f       	sbci	r31, 0xFD	; 253
     6fe:	80 81       	ld	r24, Z
     700:	91 81       	ldd	r25, Z+1	; 0x01
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
     702:	e0 91 42 02 	lds	r30, 0x0242
     706:	f0 91 43 02 	lds	r31, 0x0243
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	ea 5a       	subi	r30, 0xAA	; 170
     710:	fd 4f       	sbci	r31, 0xFD	; 253
     712:	c0 81       	ld	r28, Z
     714:	d1 81       	ldd	r29, Z+1	; 0x01
     716:	e0 91 42 02 	lds	r30, 0x0242
     71a:	f0 91 43 02 	lds	r31, 0x0243
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	e0 50       	subi	r30, 0x00	; 0
     724:	ff 4f       	sbci	r31, 0xFF	; 255
     726:	c0 80       	ld	r12, Z
     728:	d1 80       	ldd	r13, Z+1	; 0x01

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
     72a:	a0 90 42 02 	lds	r10, 0x0242
     72e:	b0 90 43 02 	lds	r11, 0x0243
	
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
     732:	68 1b       	sub	r22, r24
     734:	79 0b       	sbc	r23, r25
     736:	88 27       	eor	r24, r24
     738:	77 fd       	sbrc	r23, 7
     73a:	80 95       	com	r24
     73c:	98 2f       	mov	r25, r24
     73e:	0e 94 12 0b 	call	0x1624	; 0x1624 <__floatsisf>
		temp_2 = ADC_MAX[i] - ADC_MIN[i];

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	48 ec       	ldi	r20, 0xC8	; 200
     748:	52 e4       	ldi	r21, 0x42	; 66
     74a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__mulsf3>
     74e:	7b 01       	movw	r14, r22
     750:	8c 01       	movw	r16, r24
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {

		temp_1 = ADC_MAX[i] - ADC_DATA[i];
		temp_2 = ADC_MAX[i] - ADC_MIN[i];
     752:	cc 19       	sub	r28, r12
     754:	dd 09       	sbc	r29, r13
     756:	be 01       	movw	r22, r28
     758:	88 27       	eor	r24, r24
     75a:	77 fd       	sbrc	r23, 7
     75c:	80 95       	com	r24
     75e:	98 2f       	mov	r25, r24
     760:	0e 94 12 0b 	call	0x1624	; 0x1624 <__floatsisf>
     764:	9b 01       	movw	r18, r22
     766:	ac 01       	movw	r20, r24

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);
     768:	c8 01       	movw	r24, r16
     76a:	b7 01       	movw	r22, r14
     76c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__divsf3>
     770:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__fixsfsi>
     774:	f5 01       	movw	r30, r10
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	ea 59       	subi	r30, 0x9A	; 154
     77c:	fd 4f       	sbci	r31, 0xFD	; 253
     77e:	71 83       	std	Z+1, r23	; 0x01
     780:	60 83       	st	Z, r22
// Get normalized ADC value (white base / black line / resolution=100)
void ADC_normalize(void) {
	
	double temp_1=0, temp_2=0;

	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     782:	80 91 42 02 	lds	r24, 0x0242
     786:	90 91 43 02 	lds	r25, 0x0243
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	90 93 43 02 	sts	0x0243, r25
     790:	80 93 42 02 	sts	0x0242, r24
     794:	80 91 42 02 	lds	r24, 0x0242
     798:	90 91 43 02 	lds	r25, 0x0243
     79c:	88 30       	cpi	r24, 0x08	; 8
     79e:	91 05       	cpc	r25, r1
     7a0:	0c f4       	brge	.+2      	; 0x7a4 <ADC_normalize+0xe8>
     7a2:	9b cf       	rjmp	.-202    	; 0x6da <ADC_normalize+0x1e>

		NORM_DATA[i] = (int)((RESOLUTION*temp_1)/temp_2);

	}

}
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	cf 90       	pop	r12
     7b4:	bf 90       	pop	r11
     7b6:	af 90       	pop	r10
     7b8:	08 95       	ret

000007ba <ADC_weight>:

// Get Weighted value for normalize data(NORM_DATA[i])
void ADC_weight(void) {
     7ba:	df 93       	push	r29
     7bc:	cf 93       	push	r28
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	60 97       	sbiw	r28, 0x10	; 16
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61

	int weight[8] = {90, 75, 40, 10, -10, -40, -75, -90};
     7ce:	de 01       	movw	r26, r28
     7d0:	11 96       	adiw	r26, 0x01	; 1
     7d2:	e8 e2       	ldi	r30, 0x28	; 40
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	80 e1       	ldi	r24, 0x10	; 16
     7d8:	01 90       	ld	r0, Z+
     7da:	0d 92       	st	X+, r0
     7dc:	81 50       	subi	r24, 0x01	; 1
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <ADC_weight+0x1e>
	
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     7e0:	10 92 43 02 	sts	0x0243, r1
     7e4:	10 92 42 02 	sts	0x0242, r1

		WEIGHT_DATA[i] = NORM_DATA[i] * weight[i];
     7e8:	9e 01       	movw	r18, r28
     7ea:	2f 5f       	subi	r18, 0xFF	; 255
     7ec:	3f 4f       	sbci	r19, 0xFF	; 255
// Get Weighted value for normalize data(NORM_DATA[i])
void ADC_weight(void) {

	int weight[8] = {90, 75, 40, 10, -10, -40, -75, -90};
	
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     7ee:	2f c0       	rjmp	.+94     	; 0x84e <ADC_weight+0x94>

		WEIGHT_DATA[i] = NORM_DATA[i] * weight[i];
     7f0:	e0 91 42 02 	lds	r30, 0x0242
     7f4:	f0 91 43 02 	lds	r31, 0x0243
     7f8:	a0 91 42 02 	lds	r26, 0x0242
     7fc:	b0 91 43 02 	lds	r27, 0x0243
     800:	aa 0f       	add	r26, r26
     802:	bb 1f       	adc	r27, r27
     804:	aa 59       	subi	r26, 0x9A	; 154
     806:	bd 4f       	sbci	r27, 0xFD	; 253
     808:	6d 91       	ld	r22, X+
     80a:	7c 91       	ld	r23, X
     80c:	a0 91 42 02 	lds	r26, 0x0242
     810:	b0 91 43 02 	lds	r27, 0x0243
     814:	aa 0f       	add	r26, r26
     816:	bb 1f       	adc	r27, r27
     818:	a2 0f       	add	r26, r18
     81a:	b3 1f       	adc	r27, r19
     81c:	4d 91       	ld	r20, X+
     81e:	5c 91       	ld	r21, X
     820:	11 97       	sbiw	r26, 0x01	; 1
     822:	64 9f       	mul	r22, r20
     824:	c0 01       	movw	r24, r0
     826:	65 9f       	mul	r22, r21
     828:	90 0d       	add	r25, r0
     82a:	74 9f       	mul	r23, r20
     82c:	90 0d       	add	r25, r0
     82e:	11 24       	eor	r1, r1
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	ea 58       	subi	r30, 0x8A	; 138
     836:	fd 4f       	sbci	r31, 0xFD	; 253
     838:	91 83       	std	Z+1, r25	; 0x01
     83a:	80 83       	st	Z, r24
// Get Weighted value for normalize data(NORM_DATA[i])
void ADC_weight(void) {

	int weight[8] = {90, 75, 40, 10, -10, -40, -75, -90};
	
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     83c:	80 91 42 02 	lds	r24, 0x0242
     840:	90 91 43 02 	lds	r25, 0x0243
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	90 93 43 02 	sts	0x0243, r25
     84a:	80 93 42 02 	sts	0x0242, r24
     84e:	80 91 42 02 	lds	r24, 0x0242
     852:	90 91 43 02 	lds	r25, 0x0243
     856:	88 30       	cpi	r24, 0x08	; 8
     858:	91 05       	cpc	r25, r1
     85a:	54 f2       	brlt	.-108    	; 0x7f0 <ADC_weight+0x36>

		WEIGHT_DATA[i] = NORM_DATA[i] * weight[i];
	
	}

}
     85c:	60 96       	adiw	r28, 0x10	; 16
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	cf 91       	pop	r28
     86a:	df 91       	pop	r29
     86c:	08 95       	ret

0000086e <Sensor_data>:
void Sensor_data(void) {

	int count_sensor=0, temp=0;

	// count the number of sensor determined that it is sensed
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     86e:	10 92 43 02 	sts	0x0243, r1
     872:	10 92 42 02 	sts	0x0242, r1
}

// Get sensor_data from weighted data(WEIGHT_DATA[i])
void Sensor_data(void) {

	int count_sensor=0, temp=0;
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0

	// count the number of sensor determined that it is sensed
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     87a:	18 c0       	rjmp	.+48     	; 0x8ac <Sensor_data+0x3e>
		
		if(NORM_DATA[i] >= 60) count_sensor++;
     87c:	e0 91 42 02 	lds	r30, 0x0242
     880:	f0 91 43 02 	lds	r31, 0x0243
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ea 59       	subi	r30, 0x9A	; 154
     88a:	fd 4f       	sbci	r31, 0xFD	; 253
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	8c 33       	cpi	r24, 0x3C	; 60
     892:	91 05       	cpc	r25, r1
     894:	14 f0       	brlt	.+4      	; 0x89a <Sensor_data+0x2c>
     896:	6f 5f       	subi	r22, 0xFF	; 255
     898:	7f 4f       	sbci	r23, 0xFF	; 255
void Sensor_data(void) {

	int count_sensor=0, temp=0;

	// count the number of sensor determined that it is sensed
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     89a:	80 91 42 02 	lds	r24, 0x0242
     89e:	90 91 43 02 	lds	r25, 0x0243
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	90 93 43 02 	sts	0x0243, r25
     8a8:	80 93 42 02 	sts	0x0242, r24
     8ac:	80 91 42 02 	lds	r24, 0x0242
     8b0:	90 91 43 02 	lds	r25, 0x0243
     8b4:	88 30       	cpi	r24, 0x08	; 8
     8b6:	91 05       	cpc	r25, r1
     8b8:	0c f3       	brlt	.-62     	; 0x87c <Sensor_data+0xe>
		// 50 is a min value that can be thought that it is sensed

	}


	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     8ba:	10 92 43 02 	sts	0x0243, r1
     8be:	10 92 42 02 	sts	0x0242, r1
}

// Get sensor_data from weighted data(WEIGHT_DATA[i])
void Sensor_data(void) {

	int count_sensor=0, temp=0;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
		// 50 is a min value that can be thought that it is sensed

	}


	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     8c6:	23 c0       	rjmp	.+70     	; 0x90e <Sensor_data+0xa0>
		
		if(NORM_DATA[i] >= 60) {
     8c8:	e0 91 42 02 	lds	r30, 0x0242
     8cc:	f0 91 43 02 	lds	r31, 0x0243
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ea 59       	subi	r30, 0x9A	; 154
     8d6:	fd 4f       	sbci	r31, 0xFD	; 253
     8d8:	20 81       	ld	r18, Z
     8da:	31 81       	ldd	r19, Z+1	; 0x01
     8dc:	2c 33       	cpi	r18, 0x3C	; 60
     8de:	31 05       	cpc	r19, r1
     8e0:	64 f0       	brlt	.+24     	; 0x8fa <Sensor_data+0x8c>
			temp += WEIGHT_DATA[i]; // the sum of weighted data for finding error
     8e2:	e0 91 42 02 	lds	r30, 0x0242
     8e6:	f0 91 43 02 	lds	r31, 0x0243
     8ea:	ee 0f       	add	r30, r30
     8ec:	ff 1f       	adc	r31, r31
     8ee:	ea 58       	subi	r30, 0x8A	; 138
     8f0:	fd 4f       	sbci	r31, 0xFD	; 253
     8f2:	20 81       	ld	r18, Z
     8f4:	31 81       	ldd	r19, Z+1	; 0x01
     8f6:	82 0f       	add	r24, r18
     8f8:	93 1f       	adc	r25, r19
		// 50 is a min value that can be thought that it is sensed

	}


	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     8fa:	20 91 42 02 	lds	r18, 0x0242
     8fe:	30 91 43 02 	lds	r19, 0x0243
     902:	2f 5f       	subi	r18, 0xFF	; 255
     904:	3f 4f       	sbci	r19, 0xFF	; 255
     906:	30 93 43 02 	sts	0x0243, r19
     90a:	20 93 42 02 	sts	0x0242, r18
     90e:	20 91 42 02 	lds	r18, 0x0242
     912:	30 91 43 02 	lds	r19, 0x0243
     916:	28 30       	cpi	r18, 0x08	; 8
     918:	31 05       	cpc	r19, r1
     91a:	b4 f2       	brlt	.-84     	; 0x8c8 <Sensor_data+0x5a>
			temp += WEIGHT_DATA[i]; // the sum of weighted data for finding error
		}

	}

	if(count_sensor == 0) 
     91c:	61 15       	cp	r22, r1
     91e:	71 05       	cpc	r23, r1
     920:	61 f4       	brne	.+24     	; 0x93a <Sensor_data+0xcc>
		SENSOR_DATA = 0;
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	dc 01       	movw	r26, r24
     928:	80 93 86 02 	sts	0x0286, r24
     92c:	90 93 87 02 	sts	0x0287, r25
     930:	a0 93 88 02 	sts	0x0288, r26
     934:	b0 93 89 02 	sts	0x0289, r27
     938:	08 95       	ret
	else 
		SENSOR_DATA = (float)(temp / count_sensor);
     93a:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__divmodhi4>
     93e:	88 27       	eor	r24, r24
     940:	77 fd       	sbrc	r23, 7
     942:	80 95       	com	r24
     944:	98 2f       	mov	r25, r24
     946:	0e 94 12 0b 	call	0x1624	; 0x1624 <__floatsisf>
     94a:	60 93 86 02 	sts	0x0286, r22
     94e:	70 93 87 02 	sts	0x0287, r23
     952:	80 93 88 02 	sts	0x0288, r24
     956:	90 93 89 02 	sts	0x0289, r25
     95a:	08 95       	ret

0000095c <MOTOR_Lspeed>:

}

void MOTOR_Lspeed(int lm_speed, int rm_speed) {	
     95c:	9c 01       	movw	r18, r24
     95e:	b9 01       	movw	r22, r18
     960:	88 27       	eor	r24, r24
     962:	77 fd       	sbrc	r23, 7
     964:	80 95       	com	r24
     966:	98 2f       	mov	r25, r24
		sbi(PORTC, PORTC5); // nomal direction
		cbi(PORTC, PORTC6);
		OCR1B = (-0.1) * rm_speed;
	}
*/
	if(lm_speed >= 0) {
     968:	37 fd       	sbrc	r19, 7
     96a:	08 c0       	rjmp	.+16     	; 0x97c <MOTOR_Lspeed+0x20>
		cbi(PORTC, PORTC4); // nomal direction
     96c:	ac 98       	cbi	0x15, 4	; 21
		OCR1A = 0.18 * lm_speed;
     96e:	0e 94 12 0b 	call	0x1624	; 0x1624 <__floatsisf>
     972:	2c ee       	ldi	r18, 0xEC	; 236
     974:	31 e5       	ldi	r19, 0x51	; 81
     976:	48 e3       	ldi	r20, 0x38	; 56
     978:	5e e3       	ldi	r21, 0x3E	; 62
     97a:	07 c0       	rjmp	.+14     	; 0x98a <MOTOR_Lspeed+0x2e>
	}
	else if(lm_speed < 0) {
		cbi(PORTC, PORTC4); // nomal direction
     97c:	ac 98       	cbi	0x15, 4	; 21
		OCR1A = (-0.18) * lm_speed;
     97e:	0e 94 12 0b 	call	0x1624	; 0x1624 <__floatsisf>
     982:	2c ee       	ldi	r18, 0xEC	; 236
     984:	31 e5       	ldi	r19, 0x51	; 81
     986:	48 e3       	ldi	r20, 0x38	; 56
     988:	5e eb       	ldi	r21, 0xBE	; 190
     98a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__mulsf3>
     98e:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixunssfsi>
     992:	7b bd       	out	0x2b, r23	; 43
     994:	6a bd       	out	0x2a, r22	; 42
     996:	08 95       	ret

00000998 <MOTOR_Rspeed>:
	}


	
}
void MOTOR_Rspeed(int lm_speed, int rm_speed) {	
     998:	9b 01       	movw	r18, r22
     99a:	b9 01       	movw	r22, r18
     99c:	88 27       	eor	r24, r24
     99e:	77 fd       	sbrc	r23, 7
     9a0:	80 95       	com	r24
     9a2:	98 2f       	mov	r25, r24

	if(rm_speed >= 0) {
     9a4:	37 fd       	sbrc	r19, 7
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <MOTOR_Rspeed+0x22>
		sbi(PORTC, PORTC5); // nomal direction
     9a8:	ad 9a       	sbi	0x15, 5	; 21
		cbi(PORTC, PORTC6);
     9aa:	ae 98       	cbi	0x15, 6	; 21
		OCR1B =  0.18 * rm_speed;
     9ac:	0e 94 12 0b 	call	0x1624	; 0x1624 <__floatsisf>
     9b0:	2c ee       	ldi	r18, 0xEC	; 236
     9b2:	31 e5       	ldi	r19, 0x51	; 81
     9b4:	48 e3       	ldi	r20, 0x38	; 56
     9b6:	5e e3       	ldi	r21, 0x3E	; 62
     9b8:	08 c0       	rjmp	.+16     	; 0x9ca <MOTOR_Rspeed+0x32>
	}
	else if(rm_speed < 0 ) {
		sbi(PORTC, PORTC5); // nomal direction
     9ba:	ad 9a       	sbi	0x15, 5	; 21
		cbi(PORTC, PORTC6);
     9bc:	ae 98       	cbi	0x15, 6	; 21
		OCR1B = (-0.18) * rm_speed;
     9be:	0e 94 12 0b 	call	0x1624	; 0x1624 <__floatsisf>
     9c2:	2c ee       	ldi	r18, 0xEC	; 236
     9c4:	31 e5       	ldi	r19, 0x51	; 81
     9c6:	48 e3       	ldi	r20, 0x38	; 56
     9c8:	5e eb       	ldi	r21, 0xBE	; 190
     9ca:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__mulsf3>
     9ce:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixunssfsi>
     9d2:	79 bd       	out	0x29, r23	; 41
     9d4:	68 bd       	out	0x28, r22	; 40
     9d6:	08 95       	ret

000009d8 <MOTOR_control>:
	}
	}
void MOTOR_control(void) {
     9d8:	6f 92       	push	r6
     9da:	7f 92       	push	r7
     9dc:	8f 92       	push	r8
     9de:	9f 92       	push	r9
     9e0:	af 92       	push	r10
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
	
	if(SENSOR_DATA > 0 ) {
     9f0:	60 91 86 02 	lds	r22, 0x0286
     9f4:	70 91 87 02 	lds	r23, 0x0287
     9f8:	80 91 88 02 	lds	r24, 0x0288
     9fc:	90 91 89 02 	lds	r25, 0x0289
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	a9 01       	movw	r20, r18
     a06:	0e 94 82 0a 	call	0x1504	; 0x1504 <__gtsf2>
     a0a:	18 16       	cp	r1, r24
     a0c:	7c f0       	brlt	.+30     	; 0xa2c <MOTOR_control+0x54>
		MOTOR_Lspeed(Cruze_speed - SENSOR_DATA, Cruze_speed + SENSOR_DATA);
		MOTOR_Rspeed(Cruze_speed - SENSOR_DATA, Cruze_speed + SENSOR_DATA);
	}
	else if(SENSOR_DATA < 0) {
     a0e:	60 91 86 02 	lds	r22, 0x0286
     a12:	70 91 87 02 	lds	r23, 0x0287
     a16:	80 91 88 02 	lds	r24, 0x0288
     a1a:	90 91 89 02 	lds	r25, 0x0289
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	a9 01       	movw	r20, r18
     a24:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__ltsf2>
     a28:	87 ff       	sbrs	r24, 7
     a2a:	68 c0       	rjmp	.+208    	; 0xafc <MOTOR_control+0x124>
		MOTOR_Lspeed(Cruze_speed + (-1*SENSOR_DATA), Cruze_speed + SENSOR_DATA);
     a2c:	60 91 10 01 	lds	r22, 0x0110
     a30:	70 91 11 01 	lds	r23, 0x0111
     a34:	80 91 12 01 	lds	r24, 0x0112
     a38:	90 91 13 01 	lds	r25, 0x0113
     a3c:	20 91 86 02 	lds	r18, 0x0286
     a40:	30 91 87 02 	lds	r19, 0x0287
     a44:	40 91 88 02 	lds	r20, 0x0288
     a48:	50 91 89 02 	lds	r21, 0x0289
     a4c:	e0 90 10 01 	lds	r14, 0x0110
     a50:	f0 90 11 01 	lds	r15, 0x0111
     a54:	00 91 12 01 	lds	r16, 0x0112
     a58:	10 91 13 01 	lds	r17, 0x0113
     a5c:	60 90 86 02 	lds	r6, 0x0286
     a60:	70 90 87 02 	lds	r7, 0x0287
     a64:	80 90 88 02 	lds	r8, 0x0288
     a68:	90 90 89 02 	lds	r9, 0x0289
     a6c:	0e 94 a9 08 	call	0x1152	; 0x1152 <__subsf3>
     a70:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__fixsfsi>
     a74:	5b 01       	movw	r10, r22
     a76:	6c 01       	movw	r12, r24
     a78:	c8 01       	movw	r24, r16
     a7a:	b7 01       	movw	r22, r14
     a7c:	a4 01       	movw	r20, r8
     a7e:	93 01       	movw	r18, r6
     a80:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__addsf3>
     a84:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__fixsfsi>
     a88:	9b 01       	movw	r18, r22
     a8a:	ac 01       	movw	r20, r24
     a8c:	c5 01       	movw	r24, r10
     a8e:	b9 01       	movw	r22, r18
     a90:	0e 94 ae 04 	call	0x95c	; 0x95c <MOTOR_Lspeed>
		MOTOR_Rspeed(Cruze_speed + (-1*SENSOR_DATA), Cruze_speed + SENSOR_DATA);
     a94:	60 91 10 01 	lds	r22, 0x0110
     a98:	70 91 11 01 	lds	r23, 0x0111
     a9c:	80 91 12 01 	lds	r24, 0x0112
     aa0:	90 91 13 01 	lds	r25, 0x0113
     aa4:	20 91 86 02 	lds	r18, 0x0286
     aa8:	30 91 87 02 	lds	r19, 0x0287
     aac:	40 91 88 02 	lds	r20, 0x0288
     ab0:	50 91 89 02 	lds	r21, 0x0289
     ab4:	e0 90 10 01 	lds	r14, 0x0110
     ab8:	f0 90 11 01 	lds	r15, 0x0111
     abc:	00 91 12 01 	lds	r16, 0x0112
     ac0:	10 91 13 01 	lds	r17, 0x0113
     ac4:	60 90 86 02 	lds	r6, 0x0286
     ac8:	70 90 87 02 	lds	r7, 0x0287
     acc:	80 90 88 02 	lds	r8, 0x0288
     ad0:	90 90 89 02 	lds	r9, 0x0289
     ad4:	0e 94 a9 08 	call	0x1152	; 0x1152 <__subsf3>
     ad8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__fixsfsi>
     adc:	5b 01       	movw	r10, r22
     ade:	6c 01       	movw	r12, r24
     ae0:	c8 01       	movw	r24, r16
     ae2:	b7 01       	movw	r22, r14
     ae4:	a4 01       	movw	r20, r8
     ae6:	93 01       	movw	r18, r6
     ae8:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__addsf3>
     aec:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__fixsfsi>
     af0:	9b 01       	movw	r18, r22
     af2:	ac 01       	movw	r20, r24
     af4:	c5 01       	movw	r24, r10
     af6:	b9 01       	movw	r22, r18
     af8:	0e 94 cc 04 	call	0x998	; 0x998 <MOTOR_Rspeed>
	}

}
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	bf 90       	pop	r11
     b0a:	af 90       	pop	r10
     b0c:	9f 90       	pop	r9
     b0e:	8f 90       	pop	r8
     b10:	7f 90       	pop	r7
     b12:	6f 90       	pop	r6
     b14:	08 95       	ret

00000b16 <ADC_state>:

void ADC_state(void) {
	Uart_Putch0('s');
     b16:	83 e7       	ldi	r24, 0x73	; 115
     b18:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_U16Bit_PutNum0(state);
     b1c:	80 91 40 02 	lds	r24, 0x0240
     b20:	90 91 41 02 	lds	r25, 0x0241
     b24:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_U16Bit_PutNum0>
}
     b28:	08 95       	ret

00000b2a <__vector_1>:
	
	return 0;
}

// State switch
SIGNAL(INT0_vect) {
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	0b b6       	in	r0, 0x3b	; 59
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	2f 93       	push	r18
     b3a:	3f 93       	push	r19
     b3c:	4f 93       	push	r20
     b3e:	5f 93       	push	r21
     b40:	6f 93       	push	r22
     b42:	7f 93       	push	r23
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31

	cli();
     b50:	f8 94       	cli
	ADC_state();
     b52:	0e 94 8b 05 	call	0xb16	; 0xb16 <ADC_state>
	state++;
     b56:	80 91 40 02 	lds	r24, 0x0240
     b5a:	90 91 41 02 	lds	r25, 0x0241
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	90 93 41 02 	sts	0x0241, r25
     b64:	80 93 40 02 	sts	0x0240, r24
	
	sei();
     b68:	78 94       	sei
}
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0b be       	out	0x3b, r0	; 59
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <ADC_uart>:

	Uart_Putch0('\n');
	Uart_Putch0('\r');
	*/
	//---------------ADC_MAX[i] output---------------//
	Uart_Putch0('M');
     b90:	8d e4       	ldi	r24, 0x4D	; 77
     b92:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('a');
     b96:	81 e6       	ldi	r24, 0x61	; 97
     b98:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('x');	
     b9c:	88 e7       	ldi	r24, 0x78	; 120
     b9e:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('\t');
     ba2:	89 e0       	ldi	r24, 0x09	; 9
     ba4:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>

	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     ba8:	10 92 43 02 	sts	0x0243, r1
     bac:	10 92 42 02 	sts	0x0242, r1
     bb0:	18 c0       	rjmp	.+48     	; 0xbe2 <ADC_uart+0x52>
		
		Uart_U16Bit_PutNum0(ADC_MAX[i]);
     bb2:	e0 91 42 02 	lds	r30, 0x0242
     bb6:	f0 91 43 02 	lds	r31, 0x0243
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	ea 5a       	subi	r30, 0xAA	; 170
     bc0:	fd 4f       	sbci	r31, 0xFD	; 253
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_U16Bit_PutNum0>
		Uart_Putch0('\t');
     bca:	89 e0       	ldi	r24, 0x09	; 9
     bcc:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('M');
	Uart_Putch0('a');
	Uart_Putch0('x');	
	Uart_Putch0('\t');

	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     bd0:	80 91 42 02 	lds	r24, 0x0242
     bd4:	90 91 43 02 	lds	r25, 0x0243
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	90 93 43 02 	sts	0x0243, r25
     bde:	80 93 42 02 	sts	0x0242, r24
     be2:	80 91 42 02 	lds	r24, 0x0242
     be6:	90 91 43 02 	lds	r25, 0x0243
     bea:	88 30       	cpi	r24, 0x08	; 8
     bec:	91 05       	cpc	r25, r1
     bee:	0c f3       	brlt	.-62     	; 0xbb2 <ADC_uart+0x22>
		Uart_U16Bit_PutNum0(ADC_MAX[i]);
		Uart_Putch0('\t');

	}

	Uart_Putch0('\n');
     bf0:	8a e0       	ldi	r24, 0x0A	; 10
     bf2:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('\r');
     bf6:	8d e0       	ldi	r24, 0x0D	; 13
     bf8:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>

	Uart_Putch0('\n');
	Uart_Putch0('\r');
*/
	//---------------NORM_DATA[i] output---------------//
	Uart_Putch0('N');
     bfc:	8e e4       	ldi	r24, 0x4E	; 78
     bfe:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('o');
     c02:	8f e6       	ldi	r24, 0x6F	; 111
     c04:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('m');
     c08:	8d e6       	ldi	r24, 0x6D	; 109
     c0a:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('\t');
     c0e:	89 e0       	ldi	r24, 0x09	; 9
     c10:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     c14:	10 92 43 02 	sts	0x0243, r1
     c18:	10 92 42 02 	sts	0x0242, r1
     c1c:	18 c0       	rjmp	.+48     	; 0xc4e <ADC_uart+0xbe>
		
		Uart_U16Bit_PutNum0(NORM_DATA[i]);
     c1e:	e0 91 42 02 	lds	r30, 0x0242
     c22:	f0 91 43 02 	lds	r31, 0x0243
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	ea 59       	subi	r30, 0x9A	; 154
     c2c:	fd 4f       	sbci	r31, 0xFD	; 253
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_U16Bit_PutNum0>
		Uart_Putch0('\t');
     c36:	89 e0       	ldi	r24, 0x09	; 9
     c38:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('N');
	Uart_Putch0('o');
	Uart_Putch0('m');
	Uart_Putch0('\t');
	
	for(i=IR_NUMBER_m ; i<IR_NUMBER_M ; i++) {
     c3c:	80 91 42 02 	lds	r24, 0x0242
     c40:	90 91 43 02 	lds	r25, 0x0243
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	90 93 43 02 	sts	0x0243, r25
     c4a:	80 93 42 02 	sts	0x0242, r24
     c4e:	80 91 42 02 	lds	r24, 0x0242
     c52:	90 91 43 02 	lds	r25, 0x0243
     c56:	88 30       	cpi	r24, 0x08	; 8
     c58:	91 05       	cpc	r25, r1
     c5a:	0c f3       	brlt	.-62     	; 0xc1e <ADC_uart+0x8e>
		Uart_U16Bit_PutNum0(NORM_DATA[i]);
		Uart_Putch0('\t');

	}

	Uart_Putch0('\n');
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('\r');
     c62:	8d e0       	ldi	r24, 0x0D	; 13
     c64:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>

	Uart_Putch0('\n');
	Uart_Putch0('\r');
*/
	//---------------SENSOR_DATA output---------------//
	Uart_Putch0('S');
     c68:	83 e5       	ldi	r24, 0x53	; 83
     c6a:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('e');
     c6e:	85 e6       	ldi	r24, 0x65	; 101
     c70:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('n');
     c74:	8e e6       	ldi	r24, 0x6E	; 110
     c76:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('\t');
     c7a:	89 e0       	ldi	r24, 0x09	; 9
     c7c:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	
	if(SENSOR_DATA >=0) {
     c80:	60 91 86 02 	lds	r22, 0x0286
     c84:	70 91 87 02 	lds	r23, 0x0287
     c88:	80 91 88 02 	lds	r24, 0x0288
     c8c:	90 91 89 02 	lds	r25, 0x0289
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	a9 01       	movw	r20, r18
     c96:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__gesf2>
     c9a:	87 fd       	sbrc	r24, 7
     c9c:	0f c0       	rjmp	.+30     	; 0xcbc <ADC_uart+0x12c>
		Uart_U16Bit_PutNum0(SENSOR_DATA);
     c9e:	60 91 86 02 	lds	r22, 0x0286
     ca2:	70 91 87 02 	lds	r23, 0x0287
     ca6:	80 91 88 02 	lds	r24, 0x0288
     caa:	90 91 89 02 	lds	r25, 0x0289
     cae:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_U16Bit_PutNum0>
     cba:	33 c0       	rjmp	.+102    	; 0xd22 <ADC_uart+0x192>
	}
	else {
		SENSOR_DATA = -1*SENSOR_DATA;
     cbc:	80 91 86 02 	lds	r24, 0x0286
     cc0:	90 91 87 02 	lds	r25, 0x0287
     cc4:	a0 91 88 02 	lds	r26, 0x0288
     cc8:	b0 91 89 02 	lds	r27, 0x0289
     ccc:	b0 58       	subi	r27, 0x80	; 128
     cce:	80 93 86 02 	sts	0x0286, r24
     cd2:	90 93 87 02 	sts	0x0287, r25
     cd6:	a0 93 88 02 	sts	0x0288, r26
     cda:	b0 93 89 02 	sts	0x0289, r27
		Uart_Putch0('-');
     cde:	8d e2       	ldi	r24, 0x2D	; 45
     ce0:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
		Uart_U16Bit_PutNum0(SENSOR_DATA);
     ce4:	60 91 86 02 	lds	r22, 0x0286
     ce8:	70 91 87 02 	lds	r23, 0x0287
     cec:	80 91 88 02 	lds	r24, 0x0288
     cf0:	90 91 89 02 	lds	r25, 0x0289
     cf4:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixunssfsi>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_U16Bit_PutNum0>
		SENSOR_DATA = -1*SENSOR_DATA;
     d00:	80 91 86 02 	lds	r24, 0x0286
     d04:	90 91 87 02 	lds	r25, 0x0287
     d08:	a0 91 88 02 	lds	r26, 0x0288
     d0c:	b0 91 89 02 	lds	r27, 0x0289
     d10:	b0 58       	subi	r27, 0x80	; 128
     d12:	80 93 86 02 	sts	0x0286, r24
     d16:	90 93 87 02 	sts	0x0287, r25
     d1a:	a0 93 88 02 	sts	0x0288, r26
     d1e:	b0 93 89 02 	sts	0x0289, r27
	}

	Uart_Putch0('\t');
     d22:	89 e0       	ldi	r24, 0x09	; 9
     d24:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>

	//---------------MOTOR_speed output---------------//
	Uart_Putch0('M');
     d28:	8d e4       	ldi	r24, 0x4D	; 77
     d2a:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('o');
     d2e:	8f e6       	ldi	r24, 0x6F	; 111
     d30:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('t');
     d34:	84 e7       	ldi	r24, 0x74	; 116
     d36:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('\t');
     d3a:	89 e0       	ldi	r24, 0x09	; 9
     d3c:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>

	Uart_U16Bit_PutNum0(OCR1B);
     d40:	88 b5       	in	r24, 0x28	; 40
     d42:	99 b5       	in	r25, 0x29	; 41
     d44:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_U16Bit_PutNum0>


	Uart_Putch0('\n');
     d48:	8a e0       	ldi	r24, 0x0A	; 10
     d4a:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('\r');
     d4e:	8d e0       	ldi	r24, 0x0D	; 13
     d50:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>

	Uart_Putch0('\n');
     d54:	8a e0       	ldi	r24, 0x0A	; 10
     d56:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>
	Uart_Putch0('\r');
     d5a:	8d e0       	ldi	r24, 0x0D	; 13
     d5c:	0e 94 b0 00 	call	0x160	; 0x160 <Uart_Putch0>

}
     d60:	08 95       	ret

00000d62 <__vector_29>:
	}
	sei();
}
*/
// State / 20ms control period
SIGNAL(SIG_OVERFLOW3) {
     d62:	1f 92       	push	r1
     d64:	0f 92       	push	r0
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	0f 92       	push	r0
     d6a:	0b b6       	in	r0, 0x3b	; 59
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	ef 93       	push	r30
     d86:	ff 93       	push	r31
	
	cli();
     d88:	f8 94       	cli
	CNT++;
	if (CNT == 3000){
		state = WAIT;
	}
	*/
	switch(state) {
     d8a:	80 91 40 02 	lds	r24, 0x0240
     d8e:	90 91 41 02 	lds	r25, 0x0241
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	91 05       	cpc	r25, r1
     d96:	79 f0       	breq	.+30     	; 0xdb6 <__vector_29+0x54>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	91 05       	cpc	r25, r1
     d9c:	1c f4       	brge	.+6      	; 0xda4 <__vector_29+0x42>
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	41 f0       	breq	.+16     	; 0xdb2 <__vector_29+0x50>
     da2:	20 c0       	rjmp	.+64     	; 0xde4 <__vector_29+0x82>
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	91 05       	cpc	r25, r1
     da8:	69 f0       	breq	.+26     	; 0xdc4 <__vector_29+0x62>
     daa:	83 30       	cpi	r24, 0x03	; 3
     dac:	91 05       	cpc	r25, r1
     dae:	d1 f4       	brne	.+52     	; 0xde4 <__vector_29+0x82>
     db0:	0c c0       	rjmp	.+24     	; 0xdca <__vector_29+0x68>
			////////////////////////////////////////////////////////////////////////////////////
			//-------------------------------------IDLE---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case IDLE :
				PORTD = 0x14; // IDLE state check
     db2:	84 e1       	ldi	r24, 0x14	; 20
     db4:	08 c0       	rjmp	.+16     	; 0xdc6 <__vector_29+0x64>
			
			////////////////////////////////////////////////////////////////////////////////////
			//-------------------------------------NORM---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case NORM :
				PORTD = 0x10; // NORM state check
     db6:	80 e1       	ldi	r24, 0x10	; 16
     db8:	82 bb       	out	0x12, r24	; 18
				ADC_get();
     dba:	0e 94 21 01 	call	0x242	; 0x242 <ADC_get>

				ADC_max_min();
     dbe:	0e 94 ef 02 	call	0x5de	; 0x5de <ADC_max_min>
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <__vector_29+0x7e>
			
			////////////////////////////////////////////////////////////////////////////////////
			//-------------------------------------WAIT---------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case WAIT :
				PORTD = 0x04; // WAIT check
     dc4:	84 e0       	ldi	r24, 0x04	; 4
     dc6:	82 bb       	out	0x12, r24	; 18

			break;
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <__vector_29+0x82>
			
			////////////////////////////////////////////////////////////////////////////////////
			//-------------------------------------RUN----------------------------------------//
			////////////////////////////////////////////////////////////////////////////////////
			case RUN :
				PORTD = 0x00; // RUN check
     dca:	12 ba       	out	0x12, r1	; 18

				ADC_get();
     dcc:	0e 94 21 01 	call	0x242	; 0x242 <ADC_get>
				/*
				if((ADC_DATA[0]>=(ADC_MAX[0]/2)) && (ADC_DATA[7]>=(ADC_MAX[0]/2))){
					while(1){PORTC=0x00;}
				}
				*/
				ADC_normalize();
     dd0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <ADC_normalize>

				ADC_weight();
     dd4:	0e 94 dd 03 	call	0x7ba	; 0x7ba <ADC_weight>
					TIMSK = 0x01;

					if( END_FLAG == 1) state = IDLE;
				}
*/
				Sensor_data();
     dd8:	0e 94 37 04 	call	0x86e	; 0x86e <Sensor_data>

				MOTOR_control();
     ddc:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <MOTOR_control>
				R_CNT = 0;
				Pre_L_PI_OUT = L_PI_OUT;
				Pre_R_PI_OUT = R_PI_OUT;
				*/

				ADC_uart();
     de0:	0e 94 c8 05 	call	0xb90	; 0xb90 <ADC_uart>
			break;
	}

	sei();
     de4:	78 94       	sei
}
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0b be       	out	0x3b, r0	; 59
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__fixunssfsi>:
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	7b 01       	movw	r14, r22
     e16:	8c 01       	movw	r16, r24
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	5f e4       	ldi	r21, 0x4F	; 79
     e20:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__gesf2>
     e24:	87 fd       	sbrc	r24, 7
     e26:	11 c0       	rjmp	.+34     	; 0xe4a <__fixunssfsi+0x3e>
     e28:	c8 01       	movw	r24, r16
     e2a:	b7 01       	movw	r22, r14
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	5f e4       	ldi	r21, 0x4F	; 79
     e34:	0e 94 a9 08 	call	0x1152	; 0x1152 <__subsf3>
     e38:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__fixsfsi>
     e3c:	9b 01       	movw	r18, r22
     e3e:	ac 01       	movw	r20, r24
     e40:	20 50       	subi	r18, 0x00	; 0
     e42:	30 40       	sbci	r19, 0x00	; 0
     e44:	40 40       	sbci	r20, 0x00	; 0
     e46:	50 48       	sbci	r21, 0x80	; 128
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <__fixunssfsi+0x4a>
     e4a:	c8 01       	movw	r24, r16
     e4c:	b7 01       	movw	r22, r14
     e4e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__fixsfsi>
     e52:	9b 01       	movw	r18, r22
     e54:	ac 01       	movw	r20, r24
     e56:	b9 01       	movw	r22, r18
     e58:	ca 01       	movw	r24, r20
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	08 95       	ret

00000e64 <_fpadd_parts>:
     e64:	a0 e0       	ldi	r26, 0x00	; 0
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e8 e3       	ldi	r30, 0x38	; 56
     e6a:	f7 e0       	ldi	r31, 0x07	; 7
     e6c:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__prologue_saves__+0x8>
     e70:	fc 01       	movw	r30, r24
     e72:	ea 01       	movw	r28, r20
     e74:	80 81       	ld	r24, Z
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	08 f4       	brcc	.+2      	; 0xe7c <_fpadd_parts+0x18>
     e7a:	38 c1       	rjmp	.+624    	; 0x10ec <_fpadd_parts+0x288>
     e7c:	db 01       	movw	r26, r22
     e7e:	9c 91       	ld	r25, X
     e80:	92 30       	cpi	r25, 0x02	; 2
     e82:	08 f4       	brcc	.+2      	; 0xe86 <_fpadd_parts+0x22>
     e84:	30 c1       	rjmp	.+608    	; 0x10e6 <_fpadd_parts+0x282>
     e86:	84 30       	cpi	r24, 0x04	; 4
     e88:	59 f4       	brne	.+22     	; 0xea0 <_fpadd_parts+0x3c>
     e8a:	94 30       	cpi	r25, 0x04	; 4
     e8c:	09 f0       	breq	.+2      	; 0xe90 <_fpadd_parts+0x2c>
     e8e:	2e c1       	rjmp	.+604    	; 0x10ec <_fpadd_parts+0x288>
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	8c 91       	ld	r24, X
     e96:	11 97       	sbiw	r26, 0x01	; 1
     e98:	98 17       	cp	r25, r24
     e9a:	09 f0       	breq	.+2      	; 0xe9e <_fpadd_parts+0x3a>
     e9c:	21 c1       	rjmp	.+578    	; 0x10e0 <_fpadd_parts+0x27c>
     e9e:	26 c1       	rjmp	.+588    	; 0x10ec <_fpadd_parts+0x288>
     ea0:	94 30       	cpi	r25, 0x04	; 4
     ea2:	09 f4       	brne	.+2      	; 0xea6 <_fpadd_parts+0x42>
     ea4:	20 c1       	rjmp	.+576    	; 0x10e6 <_fpadd_parts+0x282>
     ea6:	92 30       	cpi	r25, 0x02	; 2
     ea8:	b1 f4       	brne	.+44     	; 0xed6 <_fpadd_parts+0x72>
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	09 f0       	breq	.+2      	; 0xeb0 <_fpadd_parts+0x4c>
     eae:	1e c1       	rjmp	.+572    	; 0x10ec <_fpadd_parts+0x288>
     eb0:	ca 01       	movw	r24, r20
     eb2:	af 01       	movw	r20, r30
     eb4:	28 e0       	ldi	r18, 0x08	; 8
     eb6:	da 01       	movw	r26, r20
     eb8:	0d 90       	ld	r0, X+
     eba:	ad 01       	movw	r20, r26
     ebc:	dc 01       	movw	r26, r24
     ebe:	0d 92       	st	X+, r0
     ec0:	cd 01       	movw	r24, r26
     ec2:	21 50       	subi	r18, 0x01	; 1
     ec4:	c1 f7       	brne	.-16     	; 0xeb6 <_fpadd_parts+0x52>
     ec6:	db 01       	movw	r26, r22
     ec8:	11 96       	adiw	r26, 0x01	; 1
     eca:	8c 91       	ld	r24, X
     ecc:	11 97       	sbiw	r26, 0x01	; 1
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	89 23       	and	r24, r25
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	0a c1       	rjmp	.+532    	; 0x10ea <_fpadd_parts+0x286>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	09 f4       	brne	.+2      	; 0xedc <_fpadd_parts+0x78>
     eda:	05 c1       	rjmp	.+522    	; 0x10e6 <_fpadd_parts+0x282>
     edc:	c2 80       	ldd	r12, Z+2	; 0x02
     ede:	d3 80       	ldd	r13, Z+3	; 0x03
     ee0:	db 01       	movw	r26, r22
     ee2:	12 96       	adiw	r26, 0x02	; 2
     ee4:	6d 90       	ld	r6, X+
     ee6:	7c 90       	ld	r7, X
     ee8:	13 97       	sbiw	r26, 0x03	; 3
     eea:	24 81       	ldd	r18, Z+4	; 0x04
     eec:	35 81       	ldd	r19, Z+5	; 0x05
     eee:	46 81       	ldd	r20, Z+6	; 0x06
     ef0:	57 81       	ldd	r21, Z+7	; 0x07
     ef2:	14 96       	adiw	r26, 0x04	; 4
     ef4:	ed 90       	ld	r14, X+
     ef6:	fd 90       	ld	r15, X+
     ef8:	0d 91       	ld	r16, X+
     efa:	1c 91       	ld	r17, X
     efc:	17 97       	sbiw	r26, 0x07	; 7
     efe:	c6 01       	movw	r24, r12
     f00:	86 19       	sub	r24, r6
     f02:	97 09       	sbc	r25, r7
     f04:	5c 01       	movw	r10, r24
     f06:	97 ff       	sbrs	r25, 7
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <_fpadd_parts+0xae>
     f0a:	aa 24       	eor	r10, r10
     f0c:	bb 24       	eor	r11, r11
     f0e:	a8 1a       	sub	r10, r24
     f10:	b9 0a       	sbc	r11, r25
     f12:	b0 e2       	ldi	r27, 0x20	; 32
     f14:	ab 16       	cp	r10, r27
     f16:	b1 04       	cpc	r11, r1
     f18:	0c f0       	brlt	.+2      	; 0xf1c <_fpadd_parts+0xb8>
     f1a:	61 c0       	rjmp	.+194    	; 0xfde <_fpadd_parts+0x17a>
     f1c:	18 16       	cp	r1, r24
     f1e:	19 06       	cpc	r1, r25
     f20:	6c f5       	brge	.+90     	; 0xf7c <_fpadd_parts+0x118>
     f22:	37 01       	movw	r6, r14
     f24:	48 01       	movw	r8, r16
     f26:	0a 2c       	mov	r0, r10
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <_fpadd_parts+0xce>
     f2a:	96 94       	lsr	r9
     f2c:	87 94       	ror	r8
     f2e:	77 94       	ror	r7
     f30:	67 94       	ror	r6
     f32:	0a 94       	dec	r0
     f34:	d2 f7       	brpl	.-12     	; 0xf2a <_fpadd_parts+0xc6>
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	0a 2c       	mov	r0, r10
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <_fpadd_parts+0xe6>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	aa 1f       	adc	r26, r26
     f48:	bb 1f       	adc	r27, r27
     f4a:	0a 94       	dec	r0
     f4c:	d2 f7       	brpl	.-12     	; 0xf42 <_fpadd_parts+0xde>
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	a1 09       	sbc	r26, r1
     f52:	b1 09       	sbc	r27, r1
     f54:	8e 21       	and	r24, r14
     f56:	9f 21       	and	r25, r15
     f58:	a0 23       	and	r26, r16
     f5a:	b1 23       	and	r27, r17
     f5c:	ee 24       	eor	r14, r14
     f5e:	ff 24       	eor	r15, r15
     f60:	87 01       	movw	r16, r14
     f62:	e3 94       	inc	r14
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	a1 05       	cpc	r26, r1
     f68:	b1 05       	cpc	r27, r1
     f6a:	19 f4       	brne	.+6      	; 0xf72 <_fpadd_parts+0x10e>
     f6c:	ee 24       	eor	r14, r14
     f6e:	ff 24       	eor	r15, r15
     f70:	87 01       	movw	r16, r14
     f72:	e6 28       	or	r14, r6
     f74:	f7 28       	or	r15, r7
     f76:	08 29       	or	r16, r8
     f78:	19 29       	or	r17, r9
     f7a:	3c c0       	rjmp	.+120    	; 0xff4 <_fpadd_parts+0x190>
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	d1 f1       	breq	.+116    	; 0xff4 <_fpadd_parts+0x190>
     f80:	ca 0c       	add	r12, r10
     f82:	db 1c       	adc	r13, r11
     f84:	39 01       	movw	r6, r18
     f86:	4a 01       	movw	r8, r20
     f88:	0a 2c       	mov	r0, r10
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <_fpadd_parts+0x130>
     f8c:	96 94       	lsr	r9
     f8e:	87 94       	ror	r8
     f90:	77 94       	ror	r7
     f92:	67 94       	ror	r6
     f94:	0a 94       	dec	r0
     f96:	d2 f7       	brpl	.-12     	; 0xf8c <_fpadd_parts+0x128>
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	0a 2c       	mov	r0, r10
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <_fpadd_parts+0x148>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	aa 1f       	adc	r26, r26
     faa:	bb 1f       	adc	r27, r27
     fac:	0a 94       	dec	r0
     fae:	d2 f7       	brpl	.-12     	; 0xfa4 <_fpadd_parts+0x140>
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	a1 09       	sbc	r26, r1
     fb4:	b1 09       	sbc	r27, r1
     fb6:	82 23       	and	r24, r18
     fb8:	93 23       	and	r25, r19
     fba:	a4 23       	and	r26, r20
     fbc:	b5 23       	and	r27, r21
     fbe:	21 e0       	ldi	r18, 0x01	; 1
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	a1 05       	cpc	r26, r1
     fca:	b1 05       	cpc	r27, r1
     fcc:	19 f4       	brne	.+6      	; 0xfd4 <_fpadd_parts+0x170>
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	a9 01       	movw	r20, r18
     fd4:	26 29       	or	r18, r6
     fd6:	37 29       	or	r19, r7
     fd8:	48 29       	or	r20, r8
     fda:	59 29       	or	r21, r9
     fdc:	0b c0       	rjmp	.+22     	; 0xff4 <_fpadd_parts+0x190>
     fde:	6c 14       	cp	r6, r12
     fe0:	7d 04       	cpc	r7, r13
     fe2:	24 f4       	brge	.+8      	; 0xfec <_fpadd_parts+0x188>
     fe4:	ee 24       	eor	r14, r14
     fe6:	ff 24       	eor	r15, r15
     fe8:	87 01       	movw	r16, r14
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <_fpadd_parts+0x190>
     fec:	63 01       	movw	r12, r6
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	81 81       	ldd	r24, Z+1	; 0x01
     ff6:	fb 01       	movw	r30, r22
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	89 17       	cp	r24, r25
     ffc:	09 f4       	brne	.+2      	; 0x1000 <_fpadd_parts+0x19c>
     ffe:	45 c0       	rjmp	.+138    	; 0x108a <_fpadd_parts+0x226>
    1000:	88 23       	and	r24, r24
    1002:	49 f0       	breq	.+18     	; 0x1016 <_fpadd_parts+0x1b2>
    1004:	d8 01       	movw	r26, r16
    1006:	c7 01       	movw	r24, r14
    1008:	82 1b       	sub	r24, r18
    100a:	93 0b       	sbc	r25, r19
    100c:	a4 0b       	sbc	r26, r20
    100e:	b5 0b       	sbc	r27, r21
    1010:	9c 01       	movw	r18, r24
    1012:	ad 01       	movw	r20, r26
    1014:	04 c0       	rjmp	.+8      	; 0x101e <_fpadd_parts+0x1ba>
    1016:	2e 19       	sub	r18, r14
    1018:	3f 09       	sbc	r19, r15
    101a:	40 0b       	sbc	r20, r16
    101c:	51 0b       	sbc	r21, r17
    101e:	57 fd       	sbrc	r21, 7
    1020:	04 c0       	rjmp	.+8      	; 0x102a <_fpadd_parts+0x1c6>
    1022:	19 82       	std	Y+1, r1	; 0x01
    1024:	db 82       	std	Y+3, r13	; 0x03
    1026:	ca 82       	std	Y+2, r12	; 0x02
    1028:	0b c0       	rjmp	.+22     	; 0x1040 <_fpadd_parts+0x1dc>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	db 82       	std	Y+3, r13	; 0x03
    1030:	ca 82       	std	Y+2, r12	; 0x02
    1032:	50 95       	com	r21
    1034:	40 95       	com	r20
    1036:	30 95       	com	r19
    1038:	21 95       	neg	r18
    103a:	3f 4f       	sbci	r19, 0xFF	; 255
    103c:	4f 4f       	sbci	r20, 0xFF	; 255
    103e:	5f 4f       	sbci	r21, 0xFF	; 255
    1040:	2c 83       	std	Y+4, r18	; 0x04
    1042:	3d 83       	std	Y+5, r19	; 0x05
    1044:	4e 83       	std	Y+6, r20	; 0x06
    1046:	5f 83       	std	Y+7, r21	; 0x07
    1048:	0d c0       	rjmp	.+26     	; 0x1064 <_fpadd_parts+0x200>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	aa 1f       	adc	r26, r26
    1050:	bb 1f       	adc	r27, r27
    1052:	8c 83       	std	Y+4, r24	; 0x04
    1054:	9d 83       	std	Y+5, r25	; 0x05
    1056:	ae 83       	std	Y+6, r26	; 0x06
    1058:	bf 83       	std	Y+7, r27	; 0x07
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	9b 83       	std	Y+3, r25	; 0x03
    1062:	8a 83       	std	Y+2, r24	; 0x02
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	ae 81       	ldd	r26, Y+6	; 0x06
    106a:	bf 81       	ldd	r27, Y+7	; 0x07
    106c:	9c 01       	movw	r18, r24
    106e:	ad 01       	movw	r20, r26
    1070:	21 50       	subi	r18, 0x01	; 1
    1072:	30 40       	sbci	r19, 0x00	; 0
    1074:	40 40       	sbci	r20, 0x00	; 0
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	2f 3f       	cpi	r18, 0xFF	; 255
    107a:	ef ef       	ldi	r30, 0xFF	; 255
    107c:	3e 07       	cpc	r19, r30
    107e:	ef ef       	ldi	r30, 0xFF	; 255
    1080:	4e 07       	cpc	r20, r30
    1082:	ef e3       	ldi	r30, 0x3F	; 63
    1084:	5e 07       	cpc	r21, r30
    1086:	08 f3       	brcs	.-62     	; 0x104a <_fpadd_parts+0x1e6>
    1088:	0b c0       	rjmp	.+22     	; 0x10a0 <_fpadd_parts+0x23c>
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	db 82       	std	Y+3, r13	; 0x03
    108e:	ca 82       	std	Y+2, r12	; 0x02
    1090:	2e 0d       	add	r18, r14
    1092:	3f 1d       	adc	r19, r15
    1094:	40 1f       	adc	r20, r16
    1096:	51 1f       	adc	r21, r17
    1098:	2c 83       	std	Y+4, r18	; 0x04
    109a:	3d 83       	std	Y+5, r19	; 0x05
    109c:	4e 83       	std	Y+6, r20	; 0x06
    109e:	5f 83       	std	Y+7, r21	; 0x07
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	88 83       	st	Y, r24
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	4e 81       	ldd	r20, Y+6	; 0x06
    10aa:	5f 81       	ldd	r21, Y+7	; 0x07
    10ac:	57 ff       	sbrs	r21, 7
    10ae:	1d c0       	rjmp	.+58     	; 0x10ea <_fpadd_parts+0x286>
    10b0:	da 01       	movw	r26, r20
    10b2:	c9 01       	movw	r24, r18
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	a0 70       	andi	r26, 0x00	; 0
    10ba:	b0 70       	andi	r27, 0x00	; 0
    10bc:	56 95       	lsr	r21
    10be:	47 95       	ror	r20
    10c0:	37 95       	ror	r19
    10c2:	27 95       	ror	r18
    10c4:	82 2b       	or	r24, r18
    10c6:	93 2b       	or	r25, r19
    10c8:	a4 2b       	or	r26, r20
    10ca:	b5 2b       	or	r27, r21
    10cc:	8c 83       	std	Y+4, r24	; 0x04
    10ce:	9d 83       	std	Y+5, r25	; 0x05
    10d0:	ae 83       	std	Y+6, r26	; 0x06
    10d2:	bf 83       	std	Y+7, r27	; 0x07
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	9b 81       	ldd	r25, Y+3	; 0x03
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	9b 83       	std	Y+3, r25	; 0x03
    10dc:	8a 83       	std	Y+2, r24	; 0x02
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <_fpadd_parts+0x286>
    10e0:	e8 e3       	ldi	r30, 0x38	; 56
    10e2:	f1 e0       	ldi	r31, 0x01	; 1
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <_fpadd_parts+0x288>
    10e6:	fb 01       	movw	r30, r22
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <_fpadd_parts+0x288>
    10ea:	fe 01       	movw	r30, r28
    10ec:	cf 01       	movw	r24, r30
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	ee e0       	ldi	r30, 0x0E	; 14
    10f4:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__epilogue_restores__+0x8>

000010f8 <__addsf3>:
    10f8:	a0 e2       	ldi	r26, 0x20	; 32
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e8       	ldi	r30, 0x82	; 130
    10fe:	f8 e0       	ldi	r31, 0x08	; 8
    1100:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
    1104:	69 83       	std	Y+1, r22	; 0x01
    1106:	7a 83       	std	Y+2, r23	; 0x02
    1108:	8b 83       	std	Y+3, r24	; 0x03
    110a:	9c 83       	std	Y+4, r25	; 0x04
    110c:	2d 83       	std	Y+5, r18	; 0x05
    110e:	3e 83       	std	Y+6, r19	; 0x06
    1110:	4f 83       	std	Y+7, r20	; 0x07
    1112:	58 87       	std	Y+8, r21	; 0x08
    1114:	89 e0       	ldi	r24, 0x09	; 9
    1116:	e8 2e       	mov	r14, r24
    1118:	f1 2c       	mov	r15, r1
    111a:	ec 0e       	add	r14, r28
    111c:	fd 1e       	adc	r15, r29
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	b7 01       	movw	r22, r14
    1124:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1128:	8e 01       	movw	r16, r28
    112a:	0f 5e       	subi	r16, 0xEF	; 239
    112c:	1f 4f       	sbci	r17, 0xFF	; 255
    112e:	ce 01       	movw	r24, r28
    1130:	05 96       	adiw	r24, 0x05	; 5
    1132:	b8 01       	movw	r22, r16
    1134:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1138:	c7 01       	movw	r24, r14
    113a:	b8 01       	movw	r22, r16
    113c:	ae 01       	movw	r20, r28
    113e:	47 5e       	subi	r20, 0xE7	; 231
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	0e 94 32 07 	call	0xe64	; 0xe64 <_fpadd_parts>
    1146:	0e 94 1e 0c 	call	0x183c	; 0x183c <__pack_f>
    114a:	a0 96       	adiw	r28, 0x20	; 32
    114c:	e6 e0       	ldi	r30, 0x06	; 6
    114e:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

00001152 <__subsf3>:
    1152:	a0 e2       	ldi	r26, 0x20	; 32
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ef ea       	ldi	r30, 0xAF	; 175
    1158:	f8 e0       	ldi	r31, 0x08	; 8
    115a:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
    115e:	69 83       	std	Y+1, r22	; 0x01
    1160:	7a 83       	std	Y+2, r23	; 0x02
    1162:	8b 83       	std	Y+3, r24	; 0x03
    1164:	9c 83       	std	Y+4, r25	; 0x04
    1166:	2d 83       	std	Y+5, r18	; 0x05
    1168:	3e 83       	std	Y+6, r19	; 0x06
    116a:	4f 83       	std	Y+7, r20	; 0x07
    116c:	58 87       	std	Y+8, r21	; 0x08
    116e:	8e 01       	movw	r16, r28
    1170:	07 5f       	subi	r16, 0xF7	; 247
    1172:	1f 4f       	sbci	r17, 0xFF	; 255
    1174:	ce 01       	movw	r24, r28
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	b8 01       	movw	r22, r16
    117a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    117e:	91 e1       	ldi	r25, 0x11	; 17
    1180:	e9 2e       	mov	r14, r25
    1182:	f1 2c       	mov	r15, r1
    1184:	ec 0e       	add	r14, r28
    1186:	fd 1e       	adc	r15, r29
    1188:	ce 01       	movw	r24, r28
    118a:	05 96       	adiw	r24, 0x05	; 5
    118c:	b7 01       	movw	r22, r14
    118e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1192:	8a 89       	ldd	r24, Y+18	; 0x12
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	89 27       	eor	r24, r25
    1198:	8a 8b       	std	Y+18, r24	; 0x12
    119a:	c8 01       	movw	r24, r16
    119c:	b7 01       	movw	r22, r14
    119e:	ae 01       	movw	r20, r28
    11a0:	47 5e       	subi	r20, 0xE7	; 231
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	0e 94 32 07 	call	0xe64	; 0xe64 <_fpadd_parts>
    11a8:	0e 94 1e 0c 	call	0x183c	; 0x183c <__pack_f>
    11ac:	a0 96       	adiw	r28, 0x20	; 32
    11ae:	e6 e0       	ldi	r30, 0x06	; 6
    11b0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

000011b4 <__mulsf3>:
    11b4:	a0 e2       	ldi	r26, 0x20	; 32
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e0 ee       	ldi	r30, 0xE0	; 224
    11ba:	f8 e0       	ldi	r31, 0x08	; 8
    11bc:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__prologue_saves__>
    11c0:	69 83       	std	Y+1, r22	; 0x01
    11c2:	7a 83       	std	Y+2, r23	; 0x02
    11c4:	8b 83       	std	Y+3, r24	; 0x03
    11c6:	9c 83       	std	Y+4, r25	; 0x04
    11c8:	2d 83       	std	Y+5, r18	; 0x05
    11ca:	3e 83       	std	Y+6, r19	; 0x06
    11cc:	4f 83       	std	Y+7, r20	; 0x07
    11ce:	58 87       	std	Y+8, r21	; 0x08
    11d0:	ce 01       	movw	r24, r28
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	be 01       	movw	r22, r28
    11d6:	67 5f       	subi	r22, 0xF7	; 247
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    11de:	ce 01       	movw	r24, r28
    11e0:	05 96       	adiw	r24, 0x05	; 5
    11e2:	be 01       	movw	r22, r28
    11e4:	6f 5e       	subi	r22, 0xEF	; 239
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    11ec:	99 85       	ldd	r25, Y+9	; 0x09
    11ee:	92 30       	cpi	r25, 0x02	; 2
    11f0:	78 f0       	brcs	.+30     	; 0x1210 <__mulsf3+0x5c>
    11f2:	89 89       	ldd	r24, Y+17	; 0x11
    11f4:	82 30       	cpi	r24, 0x02	; 2
    11f6:	c0 f0       	brcs	.+48     	; 0x1228 <__mulsf3+0x74>
    11f8:	94 30       	cpi	r25, 0x04	; 4
    11fa:	19 f4       	brne	.+6      	; 0x1202 <__mulsf3+0x4e>
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	41 f4       	brne	.+16     	; 0x1210 <__mulsf3+0x5c>
    1200:	cb c0       	rjmp	.+406    	; 0x1398 <__mulsf3+0x1e4>
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	19 f4       	brne	.+6      	; 0x120c <__mulsf3+0x58>
    1206:	92 30       	cpi	r25, 0x02	; 2
    1208:	79 f4       	brne	.+30     	; 0x1228 <__mulsf3+0x74>
    120a:	c6 c0       	rjmp	.+396    	; 0x1398 <__mulsf3+0x1e4>
    120c:	92 30       	cpi	r25, 0x02	; 2
    120e:	51 f4       	brne	.+20     	; 0x1224 <__mulsf3+0x70>
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	2a 85       	ldd	r18, Y+10	; 0x0a
    1214:	9a 89       	ldd	r25, Y+18	; 0x12
    1216:	29 17       	cp	r18, r25
    1218:	09 f4       	brne	.+2      	; 0x121c <__mulsf3+0x68>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	8a 87       	std	Y+10, r24	; 0x0a
    121e:	ce 01       	movw	r24, r28
    1220:	09 96       	adiw	r24, 0x09	; 9
    1222:	bc c0       	rjmp	.+376    	; 0x139c <__mulsf3+0x1e8>
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	51 f4       	brne	.+20     	; 0x123c <__mulsf3+0x88>
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	2a 85       	ldd	r18, Y+10	; 0x0a
    122c:	9a 89       	ldd	r25, Y+18	; 0x12
    122e:	29 17       	cp	r18, r25
    1230:	09 f4       	brne	.+2      	; 0x1234 <__mulsf3+0x80>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	8a 8b       	std	Y+18, r24	; 0x12
    1236:	ce 01       	movw	r24, r28
    1238:	41 96       	adiw	r24, 0x11	; 17
    123a:	b0 c0       	rjmp	.+352    	; 0x139c <__mulsf3+0x1e8>
    123c:	6d 84       	ldd	r6, Y+13	; 0x0d
    123e:	7e 84       	ldd	r7, Y+14	; 0x0e
    1240:	8f 84       	ldd	r8, Y+15	; 0x0f
    1242:	98 88       	ldd	r9, Y+16	; 0x10
    1244:	ed 88       	ldd	r14, Y+21	; 0x15
    1246:	fe 88       	ldd	r15, Y+22	; 0x16
    1248:	0f 89       	ldd	r16, Y+23	; 0x17
    124a:	18 8d       	ldd	r17, Y+24	; 0x18
    124c:	e0 e2       	ldi	r30, 0x20	; 32
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	dc 01       	movw	r26, r24
    1256:	aa 24       	eor	r10, r10
    1258:	bb 24       	eor	r11, r11
    125a:	65 01       	movw	r12, r10
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	a9 01       	movw	r20, r18
    1262:	b3 01       	movw	r22, r6
    1264:	61 70       	andi	r22, 0x01	; 1
    1266:	70 70       	andi	r23, 0x00	; 0
    1268:	61 15       	cp	r22, r1
    126a:	71 05       	cpc	r23, r1
    126c:	d1 f0       	breq	.+52     	; 0x12a2 <__mulsf3+0xee>
    126e:	2e 0d       	add	r18, r14
    1270:	3f 1d       	adc	r19, r15
    1272:	40 1f       	adc	r20, r16
    1274:	51 1f       	adc	r21, r17
    1276:	15 01       	movw	r2, r10
    1278:	26 01       	movw	r4, r12
    127a:	28 0e       	add	r2, r24
    127c:	39 1e       	adc	r3, r25
    127e:	4a 1e       	adc	r4, r26
    1280:	5b 1e       	adc	r5, r27
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a0 e0       	ldi	r26, 0x00	; 0
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	2e 15       	cp	r18, r14
    128c:	3f 05       	cpc	r19, r15
    128e:	40 07       	cpc	r20, r16
    1290:	51 07       	cpc	r21, r17
    1292:	18 f0       	brcs	.+6      	; 0x129a <__mulsf3+0xe6>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	dc 01       	movw	r26, r24
    129a:	82 0d       	add	r24, r2
    129c:	93 1d       	adc	r25, r3
    129e:	a4 1d       	adc	r26, r4
    12a0:	b5 1d       	adc	r27, r5
    12a2:	aa 0c       	add	r10, r10
    12a4:	bb 1c       	adc	r11, r11
    12a6:	cc 1c       	adc	r12, r12
    12a8:	dd 1c       	adc	r13, r13
    12aa:	17 ff       	sbrs	r17, 7
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <__mulsf3+0x10c>
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	26 2e       	mov	r2, r22
    12b2:	31 2c       	mov	r3, r1
    12b4:	41 2c       	mov	r4, r1
    12b6:	51 2c       	mov	r5, r1
    12b8:	a2 28       	or	r10, r2
    12ba:	b3 28       	or	r11, r3
    12bc:	c4 28       	or	r12, r4
    12be:	d5 28       	or	r13, r5
    12c0:	31 97       	sbiw	r30, 0x01	; 1
    12c2:	49 f0       	breq	.+18     	; 0x12d6 <__mulsf3+0x122>
    12c4:	ee 0c       	add	r14, r14
    12c6:	ff 1c       	adc	r15, r15
    12c8:	00 1f       	adc	r16, r16
    12ca:	11 1f       	adc	r17, r17
    12cc:	96 94       	lsr	r9
    12ce:	87 94       	ror	r8
    12d0:	77 94       	ror	r7
    12d2:	67 94       	ror	r6
    12d4:	c6 cf       	rjmp	.-116    	; 0x1262 <__mulsf3+0xae>
    12d6:	6b 89       	ldd	r22, Y+19	; 0x13
    12d8:	7c 89       	ldd	r23, Y+20	; 0x14
    12da:	eb 85       	ldd	r30, Y+11	; 0x0b
    12dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    12de:	6e 0f       	add	r22, r30
    12e0:	7f 1f       	adc	r23, r31
    12e2:	6e 5f       	subi	r22, 0xFE	; 254
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	7c 8f       	std	Y+28, r23	; 0x1c
    12e8:	6b 8f       	std	Y+27, r22	; 0x1b
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	ea 85       	ldd	r30, Y+10	; 0x0a
    12ee:	7a 89       	ldd	r23, Y+18	; 0x12
    12f0:	e7 17       	cp	r30, r23
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <__mulsf3+0x142>
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	6a 8f       	std	Y+26, r22	; 0x1a
    12f8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    12fa:	7c 8d       	ldd	r23, Y+28	; 0x1c
    12fc:	10 c0       	rjmp	.+32     	; 0x131e <__mulsf3+0x16a>
    12fe:	fc 01       	movw	r30, r24
    1300:	e1 70       	andi	r30, 0x01	; 1
    1302:	f0 70       	andi	r31, 0x00	; 0
    1304:	30 97       	sbiw	r30, 0x00	; 0
    1306:	29 f0       	breq	.+10     	; 0x1312 <__mulsf3+0x15e>
    1308:	56 95       	lsr	r21
    130a:	47 95       	ror	r20
    130c:	37 95       	ror	r19
    130e:	27 95       	ror	r18
    1310:	50 68       	ori	r21, 0x80	; 128
    1312:	b6 95       	lsr	r27
    1314:	a7 95       	ror	r26
    1316:	97 95       	ror	r25
    1318:	87 95       	ror	r24
    131a:	6f 5f       	subi	r22, 0xFF	; 255
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	b7 fd       	sbrc	r27, 7
    1320:	ee cf       	rjmp	.-36     	; 0x12fe <__mulsf3+0x14a>
    1322:	0c c0       	rjmp	.+24     	; 0x133c <__mulsf3+0x188>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	aa 1f       	adc	r26, r26
    132a:	bb 1f       	adc	r27, r27
    132c:	57 fd       	sbrc	r21, 7
    132e:	81 60       	ori	r24, 0x01	; 1
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	44 1f       	adc	r20, r20
    1336:	55 1f       	adc	r21, r21
    1338:	61 50       	subi	r22, 0x01	; 1
    133a:	70 40       	sbci	r23, 0x00	; 0
    133c:	80 30       	cpi	r24, 0x00	; 0
    133e:	e0 e0       	ldi	r30, 0x00	; 0
    1340:	9e 07       	cpc	r25, r30
    1342:	e0 e0       	ldi	r30, 0x00	; 0
    1344:	ae 07       	cpc	r26, r30
    1346:	e0 e4       	ldi	r30, 0x40	; 64
    1348:	be 07       	cpc	r27, r30
    134a:	60 f3       	brcs	.-40     	; 0x1324 <__mulsf3+0x170>
    134c:	6b 8f       	std	Y+27, r22	; 0x1b
    134e:	7c 8f       	std	Y+28, r23	; 0x1c
    1350:	6f e7       	ldi	r22, 0x7F	; 127
    1352:	e6 2e       	mov	r14, r22
    1354:	f1 2c       	mov	r15, r1
    1356:	01 2d       	mov	r16, r1
    1358:	11 2d       	mov	r17, r1
    135a:	e8 22       	and	r14, r24
    135c:	f9 22       	and	r15, r25
    135e:	0a 23       	and	r16, r26
    1360:	1b 23       	and	r17, r27
    1362:	60 e4       	ldi	r22, 0x40	; 64
    1364:	e6 16       	cp	r14, r22
    1366:	f1 04       	cpc	r15, r1
    1368:	01 05       	cpc	r16, r1
    136a:	11 05       	cpc	r17, r1
    136c:	61 f4       	brne	.+24     	; 0x1386 <__mulsf3+0x1d2>
    136e:	87 fd       	sbrc	r24, 7
    1370:	0a c0       	rjmp	.+20     	; 0x1386 <__mulsf3+0x1d2>
    1372:	21 15       	cp	r18, r1
    1374:	31 05       	cpc	r19, r1
    1376:	41 05       	cpc	r20, r1
    1378:	51 05       	cpc	r21, r1
    137a:	29 f0       	breq	.+10     	; 0x1386 <__mulsf3+0x1d2>
    137c:	80 5c       	subi	r24, 0xC0	; 192
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	af 4f       	sbci	r26, 0xFF	; 255
    1382:	bf 4f       	sbci	r27, 0xFF	; 255
    1384:	80 78       	andi	r24, 0x80	; 128
    1386:	8d 8f       	std	Y+29, r24	; 0x1d
    1388:	9e 8f       	std	Y+30, r25	; 0x1e
    138a:	af 8f       	std	Y+31, r26	; 0x1f
    138c:	b8 a3       	std	Y+32, r27	; 0x20
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	89 8f       	std	Y+25, r24	; 0x19
    1392:	ce 01       	movw	r24, r28
    1394:	49 96       	adiw	r24, 0x19	; 25
    1396:	02 c0       	rjmp	.+4      	; 0x139c <__mulsf3+0x1e8>
    1398:	88 e3       	ldi	r24, 0x38	; 56
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__pack_f>
    13a0:	a0 96       	adiw	r28, 0x20	; 32
    13a2:	e2 e1       	ldi	r30, 0x12	; 18
    13a4:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__epilogue_restores__>

000013a8 <__divsf3>:
    13a8:	a8 e1       	ldi	r26, 0x18	; 24
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ea ed       	ldi	r30, 0xDA	; 218
    13ae:	f9 e0       	ldi	r31, 0x09	; 9
    13b0:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__prologue_saves__+0x10>
    13b4:	69 83       	std	Y+1, r22	; 0x01
    13b6:	7a 83       	std	Y+2, r23	; 0x02
    13b8:	8b 83       	std	Y+3, r24	; 0x03
    13ba:	9c 83       	std	Y+4, r25	; 0x04
    13bc:	2d 83       	std	Y+5, r18	; 0x05
    13be:	3e 83       	std	Y+6, r19	; 0x06
    13c0:	4f 83       	std	Y+7, r20	; 0x07
    13c2:	58 87       	std	Y+8, r21	; 0x08
    13c4:	8e 01       	movw	r16, r28
    13c6:	07 5f       	subi	r16, 0xF7	; 247
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	ce 01       	movw	r24, r28
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	b8 01       	movw	r22, r16
    13d0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    13d4:	81 e1       	ldi	r24, 0x11	; 17
    13d6:	e8 2e       	mov	r14, r24
    13d8:	f1 2c       	mov	r15, r1
    13da:	ec 0e       	add	r14, r28
    13dc:	fd 1e       	adc	r15, r29
    13de:	ce 01       	movw	r24, r28
    13e0:	05 96       	adiw	r24, 0x05	; 5
    13e2:	b7 01       	movw	r22, r14
    13e4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    13e8:	99 85       	ldd	r25, Y+9	; 0x09
    13ea:	92 30       	cpi	r25, 0x02	; 2
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <__divsf3+0x48>
    13ee:	83 c0       	rjmp	.+262    	; 0x14f6 <__divsf3+0x14e>
    13f0:	89 89       	ldd	r24, Y+17	; 0x11
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	08 f4       	brcc	.+2      	; 0x13f8 <__divsf3+0x50>
    13f6:	7b c0       	rjmp	.+246    	; 0x14ee <__divsf3+0x146>
    13f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    13fa:	3a 89       	ldd	r19, Y+18	; 0x12
    13fc:	23 27       	eor	r18, r19
    13fe:	2a 87       	std	Y+10, r18	; 0x0a
    1400:	94 30       	cpi	r25, 0x04	; 4
    1402:	11 f0       	breq	.+4      	; 0x1408 <__divsf3+0x60>
    1404:	92 30       	cpi	r25, 0x02	; 2
    1406:	21 f4       	brne	.+8      	; 0x1410 <__divsf3+0x68>
    1408:	98 17       	cp	r25, r24
    140a:	09 f0       	breq	.+2      	; 0x140e <__divsf3+0x66>
    140c:	6c c0       	rjmp	.+216    	; 0x14e6 <__divsf3+0x13e>
    140e:	71 c0       	rjmp	.+226    	; 0x14f2 <__divsf3+0x14a>
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	39 f4       	brne	.+14     	; 0x1422 <__divsf3+0x7a>
    1414:	1d 86       	std	Y+13, r1	; 0x0d
    1416:	1e 86       	std	Y+14, r1	; 0x0e
    1418:	1f 86       	std	Y+15, r1	; 0x0f
    141a:	18 8a       	std	Y+16, r1	; 0x10
    141c:	1c 86       	std	Y+12, r1	; 0x0c
    141e:	1b 86       	std	Y+11, r1	; 0x0b
    1420:	6a c0       	rjmp	.+212    	; 0x14f6 <__divsf3+0x14e>
    1422:	82 30       	cpi	r24, 0x02	; 2
    1424:	19 f4       	brne	.+6      	; 0x142c <__divsf3+0x84>
    1426:	84 e0       	ldi	r24, 0x04	; 4
    1428:	89 87       	std	Y+9, r24	; 0x09
    142a:	65 c0       	rjmp	.+202    	; 0x14f6 <__divsf3+0x14e>
    142c:	8b 85       	ldd	r24, Y+11	; 0x0b
    142e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1430:	2b 89       	ldd	r18, Y+19	; 0x13
    1432:	3c 89       	ldd	r19, Y+20	; 0x14
    1434:	82 1b       	sub	r24, r18
    1436:	93 0b       	sbc	r25, r19
    1438:	9c 87       	std	Y+12, r25	; 0x0c
    143a:	8b 87       	std	Y+11, r24	; 0x0b
    143c:	2d 85       	ldd	r18, Y+13	; 0x0d
    143e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1440:	4f 85       	ldd	r20, Y+15	; 0x0f
    1442:	58 89       	ldd	r21, Y+16	; 0x10
    1444:	ed 88       	ldd	r14, Y+21	; 0x15
    1446:	fe 88       	ldd	r15, Y+22	; 0x16
    1448:	0f 89       	ldd	r16, Y+23	; 0x17
    144a:	18 8d       	ldd	r17, Y+24	; 0x18
    144c:	2e 15       	cp	r18, r14
    144e:	3f 05       	cpc	r19, r15
    1450:	40 07       	cpc	r20, r16
    1452:	51 07       	cpc	r21, r17
    1454:	38 f4       	brcc	.+14     	; 0x1464 <__divsf3+0xbc>
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	44 1f       	adc	r20, r20
    145c:	55 1f       	adc	r21, r21
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	9c 87       	std	Y+12, r25	; 0x0c
    1462:	8b 87       	std	Y+11, r24	; 0x0b
    1464:	6f e1       	ldi	r22, 0x1F	; 31
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	a1 2c       	mov	r10, r1
    146a:	b1 2c       	mov	r11, r1
    146c:	c1 2c       	mov	r12, r1
    146e:	a0 e4       	ldi	r26, 0x40	; 64
    1470:	da 2e       	mov	r13, r26
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	dc 01       	movw	r26, r24
    1478:	2e 15       	cp	r18, r14
    147a:	3f 05       	cpc	r19, r15
    147c:	40 07       	cpc	r20, r16
    147e:	51 07       	cpc	r21, r17
    1480:	40 f0       	brcs	.+16     	; 0x1492 <__divsf3+0xea>
    1482:	8a 29       	or	r24, r10
    1484:	9b 29       	or	r25, r11
    1486:	ac 29       	or	r26, r12
    1488:	bd 29       	or	r27, r13
    148a:	2e 19       	sub	r18, r14
    148c:	3f 09       	sbc	r19, r15
    148e:	40 0b       	sbc	r20, r16
    1490:	51 0b       	sbc	r21, r17
    1492:	d6 94       	lsr	r13
    1494:	c7 94       	ror	r12
    1496:	b7 94       	ror	r11
    1498:	a7 94       	ror	r10
    149a:	22 0f       	add	r18, r18
    149c:	33 1f       	adc	r19, r19
    149e:	44 1f       	adc	r20, r20
    14a0:	55 1f       	adc	r21, r21
    14a2:	61 50       	subi	r22, 0x01	; 1
    14a4:	70 40       	sbci	r23, 0x00	; 0
    14a6:	41 f7       	brne	.-48     	; 0x1478 <__divsf3+0xd0>
    14a8:	6f e7       	ldi	r22, 0x7F	; 127
    14aa:	e6 2e       	mov	r14, r22
    14ac:	f1 2c       	mov	r15, r1
    14ae:	01 2d       	mov	r16, r1
    14b0:	11 2d       	mov	r17, r1
    14b2:	e8 22       	and	r14, r24
    14b4:	f9 22       	and	r15, r25
    14b6:	0a 23       	and	r16, r26
    14b8:	1b 23       	and	r17, r27
    14ba:	60 e4       	ldi	r22, 0x40	; 64
    14bc:	e6 16       	cp	r14, r22
    14be:	f1 04       	cpc	r15, r1
    14c0:	01 05       	cpc	r16, r1
    14c2:	11 05       	cpc	r17, r1
    14c4:	61 f4       	brne	.+24     	; 0x14de <__divsf3+0x136>
    14c6:	87 fd       	sbrc	r24, 7
    14c8:	0a c0       	rjmp	.+20     	; 0x14de <__divsf3+0x136>
    14ca:	21 15       	cp	r18, r1
    14cc:	31 05       	cpc	r19, r1
    14ce:	41 05       	cpc	r20, r1
    14d0:	51 05       	cpc	r21, r1
    14d2:	29 f0       	breq	.+10     	; 0x14de <__divsf3+0x136>
    14d4:	80 5c       	subi	r24, 0xC0	; 192
    14d6:	9f 4f       	sbci	r25, 0xFF	; 255
    14d8:	af 4f       	sbci	r26, 0xFF	; 255
    14da:	bf 4f       	sbci	r27, 0xFF	; 255
    14dc:	80 78       	andi	r24, 0x80	; 128
    14de:	8d 87       	std	Y+13, r24	; 0x0d
    14e0:	9e 87       	std	Y+14, r25	; 0x0e
    14e2:	af 87       	std	Y+15, r26	; 0x0f
    14e4:	b8 8b       	std	Y+16, r27	; 0x10
    14e6:	8e 01       	movw	r16, r28
    14e8:	07 5f       	subi	r16, 0xF7	; 247
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <__divsf3+0x14e>
    14ee:	87 01       	movw	r16, r14
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <__divsf3+0x14e>
    14f2:	08 e3       	ldi	r16, 0x38	; 56
    14f4:	11 e0       	ldi	r17, 0x01	; 1
    14f6:	c8 01       	movw	r24, r16
    14f8:	0e 94 1e 0c 	call	0x183c	; 0x183c <__pack_f>
    14fc:	68 96       	adiw	r28, 0x18	; 24
    14fe:	ea e0       	ldi	r30, 0x0A	; 10
    1500:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__epilogue_restores__+0x10>

00001504 <__gtsf2>:
    1504:	a8 e1       	ldi	r26, 0x18	; 24
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e8       	ldi	r30, 0x88	; 136
    150a:	fa e0       	ldi	r31, 0x0A	; 10
    150c:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
    1510:	69 83       	std	Y+1, r22	; 0x01
    1512:	7a 83       	std	Y+2, r23	; 0x02
    1514:	8b 83       	std	Y+3, r24	; 0x03
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	2d 83       	std	Y+5, r18	; 0x05
    151a:	3e 83       	std	Y+6, r19	; 0x06
    151c:	4f 83       	std	Y+7, r20	; 0x07
    151e:	58 87       	std	Y+8, r21	; 0x08
    1520:	8e 01       	movw	r16, r28
    1522:	07 5f       	subi	r16, 0xF7	; 247
    1524:	1f 4f       	sbci	r17, 0xFF	; 255
    1526:	ce 01       	movw	r24, r28
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	b8 01       	movw	r22, r16
    152c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1530:	81 e1       	ldi	r24, 0x11	; 17
    1532:	e8 2e       	mov	r14, r24
    1534:	f1 2c       	mov	r15, r1
    1536:	ec 0e       	add	r14, r28
    1538:	fd 1e       	adc	r15, r29
    153a:	ce 01       	movw	r24, r28
    153c:	05 96       	adiw	r24, 0x05	; 5
    153e:	b7 01       	movw	r22, r14
    1540:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1544:	89 85       	ldd	r24, Y+9	; 0x09
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	40 f0       	brcs	.+16     	; 0x155a <__gtsf2+0x56>
    154a:	89 89       	ldd	r24, Y+17	; 0x11
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	28 f0       	brcs	.+10     	; 0x155a <__gtsf2+0x56>
    1550:	c8 01       	movw	r24, r16
    1552:	b7 01       	movw	r22, r14
    1554:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__fpcmp_parts_f>
    1558:	01 c0       	rjmp	.+2      	; 0x155c <__gtsf2+0x58>
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	68 96       	adiw	r28, 0x18	; 24
    155e:	e6 e0       	ldi	r30, 0x06	; 6
    1560:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

00001564 <__gesf2>:
    1564:	a8 e1       	ldi	r26, 0x18	; 24
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e8 eb       	ldi	r30, 0xB8	; 184
    156a:	fa e0       	ldi	r31, 0x0A	; 10
    156c:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
    1570:	69 83       	std	Y+1, r22	; 0x01
    1572:	7a 83       	std	Y+2, r23	; 0x02
    1574:	8b 83       	std	Y+3, r24	; 0x03
    1576:	9c 83       	std	Y+4, r25	; 0x04
    1578:	2d 83       	std	Y+5, r18	; 0x05
    157a:	3e 83       	std	Y+6, r19	; 0x06
    157c:	4f 83       	std	Y+7, r20	; 0x07
    157e:	58 87       	std	Y+8, r21	; 0x08
    1580:	8e 01       	movw	r16, r28
    1582:	07 5f       	subi	r16, 0xF7	; 247
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	ce 01       	movw	r24, r28
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	b8 01       	movw	r22, r16
    158c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1590:	81 e1       	ldi	r24, 0x11	; 17
    1592:	e8 2e       	mov	r14, r24
    1594:	f1 2c       	mov	r15, r1
    1596:	ec 0e       	add	r14, r28
    1598:	fd 1e       	adc	r15, r29
    159a:	ce 01       	movw	r24, r28
    159c:	05 96       	adiw	r24, 0x05	; 5
    159e:	b7 01       	movw	r22, r14
    15a0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    15a4:	89 85       	ldd	r24, Y+9	; 0x09
    15a6:	82 30       	cpi	r24, 0x02	; 2
    15a8:	40 f0       	brcs	.+16     	; 0x15ba <__gesf2+0x56>
    15aa:	89 89       	ldd	r24, Y+17	; 0x11
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	28 f0       	brcs	.+10     	; 0x15ba <__gesf2+0x56>
    15b0:	c8 01       	movw	r24, r16
    15b2:	b7 01       	movw	r22, r14
    15b4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__fpcmp_parts_f>
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <__gesf2+0x58>
    15ba:	8f ef       	ldi	r24, 0xFF	; 255
    15bc:	68 96       	adiw	r28, 0x18	; 24
    15be:	e6 e0       	ldi	r30, 0x06	; 6
    15c0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

000015c4 <__ltsf2>:
    15c4:	a8 e1       	ldi	r26, 0x18	; 24
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 ee       	ldi	r30, 0xE8	; 232
    15ca:	fa e0       	ldi	r31, 0x0A	; 10
    15cc:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
    15d0:	69 83       	std	Y+1, r22	; 0x01
    15d2:	7a 83       	std	Y+2, r23	; 0x02
    15d4:	8b 83       	std	Y+3, r24	; 0x03
    15d6:	9c 83       	std	Y+4, r25	; 0x04
    15d8:	2d 83       	std	Y+5, r18	; 0x05
    15da:	3e 83       	std	Y+6, r19	; 0x06
    15dc:	4f 83       	std	Y+7, r20	; 0x07
    15de:	58 87       	std	Y+8, r21	; 0x08
    15e0:	8e 01       	movw	r16, r28
    15e2:	07 5f       	subi	r16, 0xF7	; 247
    15e4:	1f 4f       	sbci	r17, 0xFF	; 255
    15e6:	ce 01       	movw	r24, r28
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	b8 01       	movw	r22, r16
    15ec:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    15f0:	81 e1       	ldi	r24, 0x11	; 17
    15f2:	e8 2e       	mov	r14, r24
    15f4:	f1 2c       	mov	r15, r1
    15f6:	ec 0e       	add	r14, r28
    15f8:	fd 1e       	adc	r15, r29
    15fa:	ce 01       	movw	r24, r28
    15fc:	05 96       	adiw	r24, 0x05	; 5
    15fe:	b7 01       	movw	r22, r14
    1600:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	82 30       	cpi	r24, 0x02	; 2
    1608:	40 f0       	brcs	.+16     	; 0x161a <__ltsf2+0x56>
    160a:	89 89       	ldd	r24, Y+17	; 0x11
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	28 f0       	brcs	.+10     	; 0x161a <__ltsf2+0x56>
    1610:	c8 01       	movw	r24, r16
    1612:	b7 01       	movw	r22, r14
    1614:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__fpcmp_parts_f>
    1618:	01 c0       	rjmp	.+2      	; 0x161c <__ltsf2+0x58>
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	68 96       	adiw	r28, 0x18	; 24
    161e:	e6 e0       	ldi	r30, 0x06	; 6
    1620:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

00001624 <__floatsisf>:
    1624:	a8 e0       	ldi	r26, 0x08	; 8
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e1       	ldi	r30, 0x18	; 24
    162a:	fb e0       	ldi	r31, 0x0B	; 11
    162c:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
    1630:	7b 01       	movw	r14, r22
    1632:	8c 01       	movw	r16, r24
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	d8 01       	movw	r26, r16
    163a:	c7 01       	movw	r24, r14
    163c:	88 27       	eor	r24, r24
    163e:	b7 fd       	sbrc	r27, 7
    1640:	83 95       	inc	r24
    1642:	99 27       	eor	r25, r25
    1644:	aa 27       	eor	r26, r26
    1646:	bb 27       	eor	r27, r27
    1648:	28 2f       	mov	r18, r24
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	e1 14       	cp	r14, r1
    164e:	f1 04       	cpc	r15, r1
    1650:	01 05       	cpc	r16, r1
    1652:	11 05       	cpc	r17, r1
    1654:	19 f4       	brne	.+6      	; 0x165c <__floatsisf+0x38>
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	37 c0       	rjmp	.+110    	; 0x16ca <__floatsisf+0xa6>
    165c:	8e e1       	ldi	r24, 0x1E	; 30
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03
    1664:	22 23       	and	r18, r18
    1666:	89 f0       	breq	.+34     	; 0x168a <__floatsisf+0x66>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	e8 16       	cp	r14, r24
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	f8 06       	cpc	r15, r24
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	08 07       	cpc	r16, r24
    1674:	80 e8       	ldi	r24, 0x80	; 128
    1676:	18 07       	cpc	r17, r24
    1678:	69 f1       	breq	.+90     	; 0x16d4 <__floatsisf+0xb0>
    167a:	10 95       	com	r17
    167c:	00 95       	com	r16
    167e:	f0 94       	com	r15
    1680:	e0 94       	com	r14
    1682:	e1 1c       	adc	r14, r1
    1684:	f1 1c       	adc	r15, r1
    1686:	01 1d       	adc	r16, r1
    1688:	11 1d       	adc	r17, r1
    168a:	ed 82       	std	Y+5, r14	; 0x05
    168c:	fe 82       	std	Y+6, r15	; 0x06
    168e:	0f 83       	std	Y+7, r16	; 0x07
    1690:	18 87       	std	Y+8, r17	; 0x08
    1692:	c8 01       	movw	r24, r16
    1694:	b7 01       	movw	r22, r14
    1696:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__clzsi2>
    169a:	9c 01       	movw	r18, r24
    169c:	21 50       	subi	r18, 0x01	; 1
    169e:	30 40       	sbci	r19, 0x00	; 0
    16a0:	12 16       	cp	r1, r18
    16a2:	13 06       	cpc	r1, r19
    16a4:	94 f4       	brge	.+36     	; 0x16ca <__floatsisf+0xa6>
    16a6:	02 2e       	mov	r0, r18
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <__floatsisf+0x8e>
    16aa:	ee 0c       	add	r14, r14
    16ac:	ff 1c       	adc	r15, r15
    16ae:	00 1f       	adc	r16, r16
    16b0:	11 1f       	adc	r17, r17
    16b2:	0a 94       	dec	r0
    16b4:	d2 f7       	brpl	.-12     	; 0x16aa <__floatsisf+0x86>
    16b6:	ed 82       	std	Y+5, r14	; 0x05
    16b8:	fe 82       	std	Y+6, r15	; 0x06
    16ba:	0f 83       	std	Y+7, r16	; 0x07
    16bc:	18 87       	std	Y+8, r17	; 0x08
    16be:	8e e1       	ldi	r24, 0x1E	; 30
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	82 1b       	sub	r24, r18
    16c4:	93 0b       	sbc	r25, r19
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	8b 83       	std	Y+3, r24	; 0x03
    16ca:	ce 01       	movw	r24, r28
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	0e 94 1e 0c 	call	0x183c	; 0x183c <__pack_f>
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <__floatsisf+0xb8>
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	9f ec       	ldi	r25, 0xCF	; 207
    16dc:	28 96       	adiw	r28, 0x08	; 8
    16de:	e6 e0       	ldi	r30, 0x06	; 6
    16e0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

000016e4 <__fixsfsi>:
    16e4:	ac e0       	ldi	r26, 0x0C	; 12
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e8 e7       	ldi	r30, 0x78	; 120
    16ea:	fb e0       	ldi	r31, 0x0B	; 11
    16ec:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__prologue_saves__+0x20>
    16f0:	69 83       	std	Y+1, r22	; 0x01
    16f2:	7a 83       	std	Y+2, r23	; 0x02
    16f4:	8b 83       	std	Y+3, r24	; 0x03
    16f6:	9c 83       	std	Y+4, r25	; 0x04
    16f8:	ce 01       	movw	r24, r28
    16fa:	01 96       	adiw	r24, 0x01	; 1
    16fc:	be 01       	movw	r22, r28
    16fe:	6b 5f       	subi	r22, 0xFB	; 251
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	81 f1       	breq	.+96     	; 0x176c <__fixsfsi+0x88>
    170c:	82 30       	cpi	r24, 0x02	; 2
    170e:	70 f1       	brcs	.+92     	; 0x176c <__fixsfsi+0x88>
    1710:	84 30       	cpi	r24, 0x04	; 4
    1712:	21 f4       	brne	.+8      	; 0x171c <__fixsfsi+0x38>
    1714:	8e 81       	ldd	r24, Y+6	; 0x06
    1716:	88 23       	and	r24, r24
    1718:	69 f1       	breq	.+90     	; 0x1774 <__fixsfsi+0x90>
    171a:	0a c0       	rjmp	.+20     	; 0x1730 <__fixsfsi+0x4c>
    171c:	2f 81       	ldd	r18, Y+7	; 0x07
    171e:	38 85       	ldd	r19, Y+8	; 0x08
    1720:	37 fd       	sbrc	r19, 7
    1722:	24 c0       	rjmp	.+72     	; 0x176c <__fixsfsi+0x88>
    1724:	6e 81       	ldd	r22, Y+6	; 0x06
    1726:	2f 31       	cpi	r18, 0x1F	; 31
    1728:	31 05       	cpc	r19, r1
    172a:	3c f0       	brlt	.+14     	; 0x173a <__fixsfsi+0x56>
    172c:	66 23       	and	r22, r22
    172e:	11 f1       	breq	.+68     	; 0x1774 <__fixsfsi+0x90>
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	50 e8       	ldi	r21, 0x80	; 128
    1738:	21 c0       	rjmp	.+66     	; 0x177c <__fixsfsi+0x98>
    173a:	8e e1       	ldi	r24, 0x1E	; 30
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	82 1b       	sub	r24, r18
    1740:	93 0b       	sbc	r25, r19
    1742:	29 85       	ldd	r18, Y+9	; 0x09
    1744:	3a 85       	ldd	r19, Y+10	; 0x0a
    1746:	4b 85       	ldd	r20, Y+11	; 0x0b
    1748:	5c 85       	ldd	r21, Y+12	; 0x0c
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <__fixsfsi+0x70>
    174c:	56 95       	lsr	r21
    174e:	47 95       	ror	r20
    1750:	37 95       	ror	r19
    1752:	27 95       	ror	r18
    1754:	8a 95       	dec	r24
    1756:	d2 f7       	brpl	.-12     	; 0x174c <__fixsfsi+0x68>
    1758:	66 23       	and	r22, r22
    175a:	81 f0       	breq	.+32     	; 0x177c <__fixsfsi+0x98>
    175c:	50 95       	com	r21
    175e:	40 95       	com	r20
    1760:	30 95       	com	r19
    1762:	21 95       	neg	r18
    1764:	3f 4f       	sbci	r19, 0xFF	; 255
    1766:	4f 4f       	sbci	r20, 0xFF	; 255
    1768:	5f 4f       	sbci	r21, 0xFF	; 255
    176a:	08 c0       	rjmp	.+16     	; 0x177c <__fixsfsi+0x98>
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	a9 01       	movw	r20, r18
    1772:	04 c0       	rjmp	.+8      	; 0x177c <__fixsfsi+0x98>
    1774:	2f ef       	ldi	r18, 0xFF	; 255
    1776:	3f ef       	ldi	r19, 0xFF	; 255
    1778:	4f ef       	ldi	r20, 0xFF	; 255
    177a:	5f e7       	ldi	r21, 0x7F	; 127
    177c:	b9 01       	movw	r22, r18
    177e:	ca 01       	movw	r24, r20
    1780:	2c 96       	adiw	r28, 0x0c	; 12
    1782:	e2 e0       	ldi	r30, 0x02	; 2
    1784:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__epilogue_restores__+0x20>

00001788 <__clzsi2>:
    1788:	af 92       	push	r10
    178a:	bf 92       	push	r11
    178c:	cf 92       	push	r12
    178e:	df 92       	push	r13
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	7b 01       	movw	r14, r22
    179a:	8c 01       	movw	r16, r24
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	e8 16       	cp	r14, r24
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	f8 06       	cpc	r15, r24
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	08 07       	cpc	r16, r24
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	18 07       	cpc	r17, r24
    17ac:	58 f4       	brcc	.+22     	; 0x17c4 <__clzsi2+0x3c>
    17ae:	ef ef       	ldi	r30, 0xFF	; 255
    17b0:	ee 16       	cp	r14, r30
    17b2:	f1 04       	cpc	r15, r1
    17b4:	01 05       	cpc	r16, r1
    17b6:	11 05       	cpc	r17, r1
    17b8:	09 f0       	breq	.+2      	; 0x17bc <__clzsi2+0x34>
    17ba:	90 f4       	brcc	.+36     	; 0x17e0 <__clzsi2+0x58>
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	dc 01       	movw	r26, r24
    17c2:	17 c0       	rjmp	.+46     	; 0x17f2 <__clzsi2+0x6a>
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	ef 16       	cp	r14, r31
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	ff 06       	cpc	r15, r31
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	0f 07       	cpc	r16, r31
    17d0:	f1 e0       	ldi	r31, 0x01	; 1
    17d2:	1f 07       	cpc	r17, r31
    17d4:	50 f4       	brcc	.+20     	; 0x17ea <__clzsi2+0x62>
    17d6:	80 e1       	ldi	r24, 0x10	; 16
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	09 c0       	rjmp	.+18     	; 0x17f2 <__clzsi2+0x6a>
    17e0:	88 e0       	ldi	r24, 0x08	; 8
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 e0       	ldi	r26, 0x00	; 0
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <__clzsi2+0x6a>
    17ea:	88 e1       	ldi	r24, 0x18	; 24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 e0       	ldi	r26, 0x00	; 0
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	20 e2       	ldi	r18, 0x20	; 32
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	28 1b       	sub	r18, r24
    17fc:	39 0b       	sbc	r19, r25
    17fe:	4a 0b       	sbc	r20, r26
    1800:	5b 0b       	sbc	r21, r27
    1802:	57 01       	movw	r10, r14
    1804:	68 01       	movw	r12, r16
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <__clzsi2+0x88>
    1808:	d6 94       	lsr	r13
    180a:	c7 94       	ror	r12
    180c:	b7 94       	ror	r11
    180e:	a7 94       	ror	r10
    1810:	8a 95       	dec	r24
    1812:	d2 f7       	brpl	.-12     	; 0x1808 <__clzsi2+0x80>
    1814:	d6 01       	movw	r26, r12
    1816:	c5 01       	movw	r24, r10
    1818:	80 5c       	subi	r24, 0xC0	; 192
    181a:	9e 4f       	sbci	r25, 0xFE	; 254
    181c:	fc 01       	movw	r30, r24
    181e:	80 81       	ld	r24, Z
    1820:	28 1b       	sub	r18, r24
    1822:	31 09       	sbc	r19, r1
    1824:	41 09       	sbc	r20, r1
    1826:	51 09       	sbc	r21, r1
    1828:	c9 01       	movw	r24, r18
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	bf 90       	pop	r11
    1838:	af 90       	pop	r10
    183a:	08 95       	ret

0000183c <__pack_f>:
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	fc 01       	movw	r30, r24
    184a:	24 81       	ldd	r18, Z+4	; 0x04
    184c:	35 81       	ldd	r19, Z+5	; 0x05
    184e:	46 81       	ldd	r20, Z+6	; 0x06
    1850:	57 81       	ldd	r21, Z+7	; 0x07
    1852:	61 81       	ldd	r22, Z+1	; 0x01
    1854:	80 81       	ld	r24, Z
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	20 f4       	brcc	.+8      	; 0x1862 <__pack_f+0x26>
    185a:	40 61       	ori	r20, 0x10	; 16
    185c:	ef ef       	ldi	r30, 0xFF	; 255
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	a3 c0       	rjmp	.+326    	; 0x19a8 <__pack_f+0x16c>
    1862:	84 30       	cpi	r24, 0x04	; 4
    1864:	09 f4       	brne	.+2      	; 0x1868 <__pack_f+0x2c>
    1866:	9b c0       	rjmp	.+310    	; 0x199e <__pack_f+0x162>
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	09 f4       	brne	.+2      	; 0x186e <__pack_f+0x32>
    186c:	92 c0       	rjmp	.+292    	; 0x1992 <__pack_f+0x156>
    186e:	21 15       	cp	r18, r1
    1870:	31 05       	cpc	r19, r1
    1872:	41 05       	cpc	r20, r1
    1874:	51 05       	cpc	r21, r1
    1876:	09 f4       	brne	.+2      	; 0x187a <__pack_f+0x3e>
    1878:	8f c0       	rjmp	.+286    	; 0x1998 <__pack_f+0x15c>
    187a:	02 80       	ldd	r0, Z+2	; 0x02
    187c:	f3 81       	ldd	r31, Z+3	; 0x03
    187e:	e0 2d       	mov	r30, r0
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	e2 38       	cpi	r30, 0x82	; 130
    1884:	f8 07       	cpc	r31, r24
    1886:	0c f0       	brlt	.+2      	; 0x188a <__pack_f+0x4e>
    1888:	5a c0       	rjmp	.+180    	; 0x193e <__pack_f+0x102>
    188a:	c2 e8       	ldi	r28, 0x82	; 130
    188c:	df ef       	ldi	r29, 0xFF	; 255
    188e:	ce 1b       	sub	r28, r30
    1890:	df 0b       	sbc	r29, r31
    1892:	ca 31       	cpi	r28, 0x1A	; 26
    1894:	d1 05       	cpc	r29, r1
    1896:	6c f5       	brge	.+90     	; 0x18f2 <__pack_f+0xb6>
    1898:	79 01       	movw	r14, r18
    189a:	8a 01       	movw	r16, r20
    189c:	0c 2e       	mov	r0, r28
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <__pack_f+0x6c>
    18a0:	16 95       	lsr	r17
    18a2:	07 95       	ror	r16
    18a4:	f7 94       	ror	r15
    18a6:	e7 94       	ror	r14
    18a8:	0a 94       	dec	r0
    18aa:	d2 f7       	brpl	.-12     	; 0x18a0 <__pack_f+0x64>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a0 e0       	ldi	r26, 0x00	; 0
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	0c 2e       	mov	r0, r28
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <__pack_f+0x84>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	aa 1f       	adc	r26, r26
    18be:	bb 1f       	adc	r27, r27
    18c0:	0a 94       	dec	r0
    18c2:	d2 f7       	brpl	.-12     	; 0x18b8 <__pack_f+0x7c>
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	a1 09       	sbc	r26, r1
    18c8:	b1 09       	sbc	r27, r1
    18ca:	82 23       	and	r24, r18
    18cc:	93 23       	and	r25, r19
    18ce:	a4 23       	and	r26, r20
    18d0:	b5 23       	and	r27, r21
    18d2:	21 e0       	ldi	r18, 0x01	; 1
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	a1 05       	cpc	r26, r1
    18de:	b1 05       	cpc	r27, r1
    18e0:	19 f4       	brne	.+6      	; 0x18e8 <__pack_f+0xac>
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	a9 01       	movw	r20, r18
    18e8:	2e 29       	or	r18, r14
    18ea:	3f 29       	or	r19, r15
    18ec:	40 2b       	or	r20, r16
    18ee:	51 2b       	or	r21, r17
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <__pack_f+0xbc>
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	a9 01       	movw	r20, r18
    18f8:	da 01       	movw	r26, r20
    18fa:	c9 01       	movw	r24, r18
    18fc:	8f 77       	andi	r24, 0x7F	; 127
    18fe:	90 70       	andi	r25, 0x00	; 0
    1900:	a0 70       	andi	r26, 0x00	; 0
    1902:	b0 70       	andi	r27, 0x00	; 0
    1904:	80 34       	cpi	r24, 0x40	; 64
    1906:	91 05       	cpc	r25, r1
    1908:	a1 05       	cpc	r26, r1
    190a:	b1 05       	cpc	r27, r1
    190c:	39 f4       	brne	.+14     	; 0x191c <__pack_f+0xe0>
    190e:	27 ff       	sbrs	r18, 7
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <__pack_f+0xe8>
    1912:	20 5c       	subi	r18, 0xC0	; 192
    1914:	3f 4f       	sbci	r19, 0xFF	; 255
    1916:	4f 4f       	sbci	r20, 0xFF	; 255
    1918:	5f 4f       	sbci	r21, 0xFF	; 255
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <__pack_f+0xe8>
    191c:	21 5c       	subi	r18, 0xC1	; 193
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	4f 4f       	sbci	r20, 0xFF	; 255
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	e1 e0       	ldi	r30, 0x01	; 1
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	20 30       	cpi	r18, 0x00	; 0
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	38 07       	cpc	r19, r24
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	48 07       	cpc	r20, r24
    1932:	80 e4       	ldi	r24, 0x40	; 64
    1934:	58 07       	cpc	r21, r24
    1936:	28 f5       	brcc	.+74     	; 0x1982 <__pack_f+0x146>
    1938:	e0 e0       	ldi	r30, 0x00	; 0
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	22 c0       	rjmp	.+68     	; 0x1982 <__pack_f+0x146>
    193e:	e0 38       	cpi	r30, 0x80	; 128
    1940:	f1 05       	cpc	r31, r1
    1942:	6c f5       	brge	.+90     	; 0x199e <__pack_f+0x162>
    1944:	e1 58       	subi	r30, 0x81	; 129
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	da 01       	movw	r26, r20
    194a:	c9 01       	movw	r24, r18
    194c:	8f 77       	andi	r24, 0x7F	; 127
    194e:	90 70       	andi	r25, 0x00	; 0
    1950:	a0 70       	andi	r26, 0x00	; 0
    1952:	b0 70       	andi	r27, 0x00	; 0
    1954:	80 34       	cpi	r24, 0x40	; 64
    1956:	91 05       	cpc	r25, r1
    1958:	a1 05       	cpc	r26, r1
    195a:	b1 05       	cpc	r27, r1
    195c:	39 f4       	brne	.+14     	; 0x196c <__pack_f+0x130>
    195e:	27 ff       	sbrs	r18, 7
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <__pack_f+0x138>
    1962:	20 5c       	subi	r18, 0xC0	; 192
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	4f 4f       	sbci	r20, 0xFF	; 255
    1968:	5f 4f       	sbci	r21, 0xFF	; 255
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <__pack_f+0x138>
    196c:	21 5c       	subi	r18, 0xC1	; 193
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	4f 4f       	sbci	r20, 0xFF	; 255
    1972:	5f 4f       	sbci	r21, 0xFF	; 255
    1974:	57 ff       	sbrs	r21, 7
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <__pack_f+0x146>
    1978:	56 95       	lsr	r21
    197a:	47 95       	ror	r20
    197c:	37 95       	ror	r19
    197e:	27 95       	ror	r18
    1980:	31 96       	adiw	r30, 0x01	; 1
    1982:	87 e0       	ldi	r24, 0x07	; 7
    1984:	56 95       	lsr	r21
    1986:	47 95       	ror	r20
    1988:	37 95       	ror	r19
    198a:	27 95       	ror	r18
    198c:	8a 95       	dec	r24
    198e:	d1 f7       	brne	.-12     	; 0x1984 <__pack_f+0x148>
    1990:	0b c0       	rjmp	.+22     	; 0x19a8 <__pack_f+0x16c>
    1992:	e0 e0       	ldi	r30, 0x00	; 0
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <__pack_f+0x166>
    1998:	e0 e0       	ldi	r30, 0x00	; 0
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <__pack_f+0x16c>
    199e:	ef ef       	ldi	r30, 0xFF	; 255
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	8e 2f       	mov	r24, r30
    19aa:	87 95       	ror	r24
    19ac:	88 27       	eor	r24, r24
    19ae:	87 95       	ror	r24
    19b0:	94 2f       	mov	r25, r20
    19b2:	9f 77       	andi	r25, 0x7F	; 127
    19b4:	67 95       	ror	r22
    19b6:	66 27       	eor	r22, r22
    19b8:	67 95       	ror	r22
    19ba:	e6 95       	lsr	r30
    19bc:	e2 2e       	mov	r14, r18
    19be:	a9 2f       	mov	r26, r25
    19c0:	a8 2b       	or	r26, r24
    19c2:	fe 2f       	mov	r31, r30
    19c4:	f6 2b       	or	r31, r22
    19c6:	62 2f       	mov	r22, r18
    19c8:	73 2f       	mov	r23, r19
    19ca:	8a 2f       	mov	r24, r26
    19cc:	9f 2f       	mov	r25, r31
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	e6 e0       	ldi	r30, 0x06	; 6
    19d4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

000019d8 <__unpack_f>:
    19d8:	dc 01       	movw	r26, r24
    19da:	fb 01       	movw	r30, r22
    19dc:	2c 91       	ld	r18, X
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	3c 91       	ld	r19, X
    19e2:	11 97       	sbiw	r26, 0x01	; 1
    19e4:	12 96       	adiw	r26, 0x02	; 2
    19e6:	8c 91       	ld	r24, X
    19e8:	12 97       	sbiw	r26, 0x02	; 2
    19ea:	48 2f       	mov	r20, r24
    19ec:	4f 77       	andi	r20, 0x7F	; 127
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	98 2f       	mov	r25, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	99 27       	eor	r25, r25
    19f6:	99 1f       	adc	r25, r25
    19f8:	13 96       	adiw	r26, 0x03	; 3
    19fa:	6c 91       	ld	r22, X
    19fc:	13 97       	sbiw	r26, 0x03	; 3
    19fe:	86 2f       	mov	r24, r22
    1a00:	88 0f       	add	r24, r24
    1a02:	89 2b       	or	r24, r25
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	66 1f       	adc	r22, r22
    1a08:	66 27       	eor	r22, r22
    1a0a:	66 1f       	adc	r22, r22
    1a0c:	61 83       	std	Z+1, r22	; 0x01
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	39 f5       	brne	.+78     	; 0x1a60 <__unpack_f+0x88>
    1a12:	21 15       	cp	r18, r1
    1a14:	31 05       	cpc	r19, r1
    1a16:	41 05       	cpc	r20, r1
    1a18:	51 05       	cpc	r21, r1
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <__unpack_f+0x48>
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	29 c0       	rjmp	.+82     	; 0x1a72 <__unpack_f+0x9a>
    1a20:	82 e8       	ldi	r24, 0x82	; 130
    1a22:	9f ef       	ldi	r25, 0xFF	; 255
    1a24:	93 83       	std	Z+3, r25	; 0x03
    1a26:	82 83       	std	Z+2, r24	; 0x02
    1a28:	67 e0       	ldi	r22, 0x07	; 7
    1a2a:	22 0f       	add	r18, r18
    1a2c:	33 1f       	adc	r19, r19
    1a2e:	44 1f       	adc	r20, r20
    1a30:	55 1f       	adc	r21, r21
    1a32:	6a 95       	dec	r22
    1a34:	d1 f7       	brne	.-12     	; 0x1a2a <__unpack_f+0x52>
    1a36:	83 e0       	ldi	r24, 0x03	; 3
    1a38:	80 83       	st	Z, r24
    1a3a:	09 c0       	rjmp	.+18     	; 0x1a4e <__unpack_f+0x76>
    1a3c:	22 0f       	add	r18, r18
    1a3e:	33 1f       	adc	r19, r19
    1a40:	44 1f       	adc	r20, r20
    1a42:	55 1f       	adc	r21, r21
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	93 83       	std	Z+3, r25	; 0x03
    1a4c:	82 83       	std	Z+2, r24	; 0x02
    1a4e:	20 30       	cpi	r18, 0x00	; 0
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	38 07       	cpc	r19, r24
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	48 07       	cpc	r20, r24
    1a58:	80 e4       	ldi	r24, 0x40	; 64
    1a5a:	58 07       	cpc	r21, r24
    1a5c:	78 f3       	brcs	.-34     	; 0x1a3c <__unpack_f+0x64>
    1a5e:	20 c0       	rjmp	.+64     	; 0x1aa0 <__unpack_f+0xc8>
    1a60:	8f 3f       	cpi	r24, 0xFF	; 255
    1a62:	91 05       	cpc	r25, r1
    1a64:	79 f4       	brne	.+30     	; 0x1a84 <__unpack_f+0xac>
    1a66:	21 15       	cp	r18, r1
    1a68:	31 05       	cpc	r19, r1
    1a6a:	41 05       	cpc	r20, r1
    1a6c:	51 05       	cpc	r21, r1
    1a6e:	19 f4       	brne	.+6      	; 0x1a76 <__unpack_f+0x9e>
    1a70:	84 e0       	ldi	r24, 0x04	; 4
    1a72:	80 83       	st	Z, r24
    1a74:	08 95       	ret
    1a76:	44 ff       	sbrs	r20, 4
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <__unpack_f+0xa8>
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 83       	st	Z, r24
    1a7e:	10 c0       	rjmp	.+32     	; 0x1aa0 <__unpack_f+0xc8>
    1a80:	10 82       	st	Z, r1
    1a82:	0e c0       	rjmp	.+28     	; 0x1aa0 <__unpack_f+0xc8>
    1a84:	8f 57       	subi	r24, 0x7F	; 127
    1a86:	90 40       	sbci	r25, 0x00	; 0
    1a88:	93 83       	std	Z+3, r25	; 0x03
    1a8a:	82 83       	std	Z+2, r24	; 0x02
    1a8c:	83 e0       	ldi	r24, 0x03	; 3
    1a8e:	80 83       	st	Z, r24
    1a90:	87 e0       	ldi	r24, 0x07	; 7
    1a92:	22 0f       	add	r18, r18
    1a94:	33 1f       	adc	r19, r19
    1a96:	44 1f       	adc	r20, r20
    1a98:	55 1f       	adc	r21, r21
    1a9a:	8a 95       	dec	r24
    1a9c:	d1 f7       	brne	.-12     	; 0x1a92 <__unpack_f+0xba>
    1a9e:	50 64       	ori	r21, 0x40	; 64
    1aa0:	24 83       	std	Z+4, r18	; 0x04
    1aa2:	35 83       	std	Z+5, r19	; 0x05
    1aa4:	46 83       	std	Z+6, r20	; 0x06
    1aa6:	57 83       	std	Z+7, r21	; 0x07
    1aa8:	08 95       	ret

00001aaa <__fpcmp_parts_f>:
    1aaa:	fc 01       	movw	r30, r24
    1aac:	db 01       	movw	r26, r22
    1aae:	90 81       	ld	r25, Z
    1ab0:	92 30       	cpi	r25, 0x02	; 2
    1ab2:	08 f4       	brcc	.+2      	; 0x1ab6 <__fpcmp_parts_f+0xc>
    1ab4:	49 c0       	rjmp	.+146    	; 0x1b48 <__fpcmp_parts_f+0x9e>
    1ab6:	8c 91       	ld	r24, X
    1ab8:	82 30       	cpi	r24, 0x02	; 2
    1aba:	08 f4       	brcc	.+2      	; 0x1abe <__fpcmp_parts_f+0x14>
    1abc:	45 c0       	rjmp	.+138    	; 0x1b48 <__fpcmp_parts_f+0x9e>
    1abe:	94 30       	cpi	r25, 0x04	; 4
    1ac0:	51 f4       	brne	.+20     	; 0x1ad6 <__fpcmp_parts_f+0x2c>
    1ac2:	61 81       	ldd	r22, Z+1	; 0x01
    1ac4:	84 30       	cpi	r24, 0x04	; 4
    1ac6:	b1 f5       	brne	.+108    	; 0x1b34 <__fpcmp_parts_f+0x8a>
    1ac8:	11 96       	adiw	r26, 0x01	; 1
    1aca:	2c 91       	ld	r18, X
    1acc:	11 97       	sbiw	r26, 0x01	; 1
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	26 1b       	sub	r18, r22
    1ad2:	31 09       	sbc	r19, r1
    1ad4:	41 c0       	rjmp	.+130    	; 0x1b58 <__fpcmp_parts_f+0xae>
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	21 f0       	breq	.+8      	; 0x1ae2 <__fpcmp_parts_f+0x38>
    1ada:	92 30       	cpi	r25, 0x02	; 2
    1adc:	41 f4       	brne	.+16     	; 0x1aee <__fpcmp_parts_f+0x44>
    1ade:	82 30       	cpi	r24, 0x02	; 2
    1ae0:	b1 f1       	breq	.+108    	; 0x1b4e <__fpcmp_parts_f+0xa4>
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	8c 91       	ld	r24, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	88 23       	and	r24, r24
    1aea:	a1 f1       	breq	.+104    	; 0x1b54 <__fpcmp_parts_f+0xaa>
    1aec:	2d c0       	rjmp	.+90     	; 0x1b48 <__fpcmp_parts_f+0x9e>
    1aee:	61 81       	ldd	r22, Z+1	; 0x01
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	01 f1       	breq	.+64     	; 0x1b34 <__fpcmp_parts_f+0x8a>
    1af4:	11 96       	adiw	r26, 0x01	; 1
    1af6:	8c 91       	ld	r24, X
    1af8:	11 97       	sbiw	r26, 0x01	; 1
    1afa:	68 17       	cp	r22, r24
    1afc:	d9 f4       	brne	.+54     	; 0x1b34 <__fpcmp_parts_f+0x8a>
    1afe:	22 81       	ldd	r18, Z+2	; 0x02
    1b00:	33 81       	ldd	r19, Z+3	; 0x03
    1b02:	12 96       	adiw	r26, 0x02	; 2
    1b04:	8d 91       	ld	r24, X+
    1b06:	9c 91       	ld	r25, X
    1b08:	13 97       	sbiw	r26, 0x03	; 3
    1b0a:	82 17       	cp	r24, r18
    1b0c:	93 07       	cpc	r25, r19
    1b0e:	94 f0       	brlt	.+36     	; 0x1b34 <__fpcmp_parts_f+0x8a>
    1b10:	28 17       	cp	r18, r24
    1b12:	39 07       	cpc	r19, r25
    1b14:	bc f0       	brlt	.+46     	; 0x1b44 <__fpcmp_parts_f+0x9a>
    1b16:	24 81       	ldd	r18, Z+4	; 0x04
    1b18:	35 81       	ldd	r19, Z+5	; 0x05
    1b1a:	46 81       	ldd	r20, Z+6	; 0x06
    1b1c:	57 81       	ldd	r21, Z+7	; 0x07
    1b1e:	14 96       	adiw	r26, 0x04	; 4
    1b20:	8d 91       	ld	r24, X+
    1b22:	9d 91       	ld	r25, X+
    1b24:	0d 90       	ld	r0, X+
    1b26:	bc 91       	ld	r27, X
    1b28:	a0 2d       	mov	r26, r0
    1b2a:	82 17       	cp	r24, r18
    1b2c:	93 07       	cpc	r25, r19
    1b2e:	a4 07       	cpc	r26, r20
    1b30:	b5 07       	cpc	r27, r21
    1b32:	18 f4       	brcc	.+6      	; 0x1b3a <__fpcmp_parts_f+0x90>
    1b34:	66 23       	and	r22, r22
    1b36:	41 f0       	breq	.+16     	; 0x1b48 <__fpcmp_parts_f+0x9e>
    1b38:	0d c0       	rjmp	.+26     	; 0x1b54 <__fpcmp_parts_f+0xaa>
    1b3a:	28 17       	cp	r18, r24
    1b3c:	39 07       	cpc	r19, r25
    1b3e:	4a 07       	cpc	r20, r26
    1b40:	5b 07       	cpc	r21, r27
    1b42:	28 f4       	brcc	.+10     	; 0x1b4e <__fpcmp_parts_f+0xa4>
    1b44:	66 23       	and	r22, r22
    1b46:	31 f0       	breq	.+12     	; 0x1b54 <__fpcmp_parts_f+0xaa>
    1b48:	21 e0       	ldi	r18, 0x01	; 1
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	05 c0       	rjmp	.+10     	; 0x1b58 <__fpcmp_parts_f+0xae>
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <__fpcmp_parts_f+0xae>
    1b54:	2f ef       	ldi	r18, 0xFF	; 255
    1b56:	3f ef       	ldi	r19, 0xFF	; 255
    1b58:	c9 01       	movw	r24, r18
    1b5a:	08 95       	ret

00001b5c <__udivmodhi4>:
    1b5c:	aa 1b       	sub	r26, r26
    1b5e:	bb 1b       	sub	r27, r27
    1b60:	51 e1       	ldi	r21, 0x11	; 17
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <__udivmodhi4_ep>

00001b64 <__udivmodhi4_loop>:
    1b64:	aa 1f       	adc	r26, r26
    1b66:	bb 1f       	adc	r27, r27
    1b68:	a6 17       	cp	r26, r22
    1b6a:	b7 07       	cpc	r27, r23
    1b6c:	10 f0       	brcs	.+4      	; 0x1b72 <__udivmodhi4_ep>
    1b6e:	a6 1b       	sub	r26, r22
    1b70:	b7 0b       	sbc	r27, r23

00001b72 <__udivmodhi4_ep>:
    1b72:	88 1f       	adc	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	5a 95       	dec	r21
    1b78:	a9 f7       	brne	.-22     	; 0x1b64 <__udivmodhi4_loop>
    1b7a:	80 95       	com	r24
    1b7c:	90 95       	com	r25
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	08 95       	ret

00001b84 <__divmodhi4>:
    1b84:	97 fb       	bst	r25, 7
    1b86:	09 2e       	mov	r0, r25
    1b88:	07 26       	eor	r0, r23
    1b8a:	0a d0       	rcall	.+20     	; 0x1ba0 <__divmodhi4_neg1>
    1b8c:	77 fd       	sbrc	r23, 7
    1b8e:	04 d0       	rcall	.+8      	; 0x1b98 <__divmodhi4_neg2>
    1b90:	e5 df       	rcall	.-54     	; 0x1b5c <__udivmodhi4>
    1b92:	06 d0       	rcall	.+12     	; 0x1ba0 <__divmodhi4_neg1>
    1b94:	00 20       	and	r0, r0
    1b96:	1a f4       	brpl	.+6      	; 0x1b9e <__divmodhi4_exit>

00001b98 <__divmodhi4_neg2>:
    1b98:	70 95       	com	r23
    1b9a:	61 95       	neg	r22
    1b9c:	7f 4f       	sbci	r23, 0xFF	; 255

00001b9e <__divmodhi4_exit>:
    1b9e:	08 95       	ret

00001ba0 <__divmodhi4_neg1>:
    1ba0:	f6 f7       	brtc	.-4      	; 0x1b9e <__divmodhi4_exit>
    1ba2:	90 95       	com	r25
    1ba4:	81 95       	neg	r24
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	08 95       	ret

00001baa <__divmodsi4>:
    1baa:	97 fb       	bst	r25, 7
    1bac:	09 2e       	mov	r0, r25
    1bae:	05 26       	eor	r0, r21
    1bb0:	0e d0       	rcall	.+28     	; 0x1bce <__divmodsi4_neg1>
    1bb2:	57 fd       	sbrc	r21, 7
    1bb4:	04 d0       	rcall	.+8      	; 0x1bbe <__divmodsi4_neg2>
    1bb6:	14 d0       	rcall	.+40     	; 0x1be0 <__udivmodsi4>
    1bb8:	0a d0       	rcall	.+20     	; 0x1bce <__divmodsi4_neg1>
    1bba:	00 1c       	adc	r0, r0
    1bbc:	38 f4       	brcc	.+14     	; 0x1bcc <__divmodsi4_exit>

00001bbe <__divmodsi4_neg2>:
    1bbe:	50 95       	com	r21
    1bc0:	40 95       	com	r20
    1bc2:	30 95       	com	r19
    1bc4:	21 95       	neg	r18
    1bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bca:	5f 4f       	sbci	r21, 0xFF	; 255

00001bcc <__divmodsi4_exit>:
    1bcc:	08 95       	ret

00001bce <__divmodsi4_neg1>:
    1bce:	f6 f7       	brtc	.-4      	; 0x1bcc <__divmodsi4_exit>
    1bd0:	90 95       	com	r25
    1bd2:	80 95       	com	r24
    1bd4:	70 95       	com	r23
    1bd6:	61 95       	neg	r22
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bda:	8f 4f       	sbci	r24, 0xFF	; 255
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	08 95       	ret

00001be0 <__udivmodsi4>:
    1be0:	a1 e2       	ldi	r26, 0x21	; 33
    1be2:	1a 2e       	mov	r1, r26
    1be4:	aa 1b       	sub	r26, r26
    1be6:	bb 1b       	sub	r27, r27
    1be8:	fd 01       	movw	r30, r26
    1bea:	0d c0       	rjmp	.+26     	; 0x1c06 <__udivmodsi4_ep>

00001bec <__udivmodsi4_loop>:
    1bec:	aa 1f       	adc	r26, r26
    1bee:	bb 1f       	adc	r27, r27
    1bf0:	ee 1f       	adc	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	a2 17       	cp	r26, r18
    1bf6:	b3 07       	cpc	r27, r19
    1bf8:	e4 07       	cpc	r30, r20
    1bfa:	f5 07       	cpc	r31, r21
    1bfc:	20 f0       	brcs	.+8      	; 0x1c06 <__udivmodsi4_ep>
    1bfe:	a2 1b       	sub	r26, r18
    1c00:	b3 0b       	sbc	r27, r19
    1c02:	e4 0b       	sbc	r30, r20
    1c04:	f5 0b       	sbc	r31, r21

00001c06 <__udivmodsi4_ep>:
    1c06:	66 1f       	adc	r22, r22
    1c08:	77 1f       	adc	r23, r23
    1c0a:	88 1f       	adc	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	1a 94       	dec	r1
    1c10:	69 f7       	brne	.-38     	; 0x1bec <__udivmodsi4_loop>
    1c12:	60 95       	com	r22
    1c14:	70 95       	com	r23
    1c16:	80 95       	com	r24
    1c18:	90 95       	com	r25
    1c1a:	9b 01       	movw	r18, r22
    1c1c:	ac 01       	movw	r20, r24
    1c1e:	bd 01       	movw	r22, r26
    1c20:	cf 01       	movw	r24, r30
    1c22:	08 95       	ret

00001c24 <__prologue_saves__>:
    1c24:	2f 92       	push	r2
    1c26:	3f 92       	push	r3
    1c28:	4f 92       	push	r4
    1c2a:	5f 92       	push	r5
    1c2c:	6f 92       	push	r6
    1c2e:	7f 92       	push	r7
    1c30:	8f 92       	push	r8
    1c32:	9f 92       	push	r9
    1c34:	af 92       	push	r10
    1c36:	bf 92       	push	r11
    1c38:	cf 92       	push	r12
    1c3a:	df 92       	push	r13
    1c3c:	ef 92       	push	r14
    1c3e:	ff 92       	push	r15
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	ca 1b       	sub	r28, r26
    1c4e:	db 0b       	sbc	r29, r27
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	09 94       	ijmp

00001c5c <__epilogue_restores__>:
    1c5c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c5e:	39 88       	ldd	r3, Y+17	; 0x11
    1c60:	48 88       	ldd	r4, Y+16	; 0x10
    1c62:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c64:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c66:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c68:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c6e:	b9 84       	ldd	r11, Y+9	; 0x09
    1c70:	c8 84       	ldd	r12, Y+8	; 0x08
    1c72:	df 80       	ldd	r13, Y+7	; 0x07
    1c74:	ee 80       	ldd	r14, Y+6	; 0x06
    1c76:	fd 80       	ldd	r15, Y+5	; 0x05
    1c78:	0c 81       	ldd	r16, Y+4	; 0x04
    1c7a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c7c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c7e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c80:	ce 0f       	add	r28, r30
    1c82:	d1 1d       	adc	r29, r1
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	ed 01       	movw	r28, r26
    1c90:	08 95       	ret

00001c92 <_exit>:
    1c92:	f8 94       	cli

00001c94 <__stop_program>:
    1c94:	ff cf       	rjmp	.-2      	; 0x1c94 <__stop_program>
